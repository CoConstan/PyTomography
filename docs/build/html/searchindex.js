Search.setIndex({"docnames": ["autoapi/index", "autoapi/pytomography/algorithms/fbp/index", "autoapi/pytomography/algorithms/index", "autoapi/pytomography/algorithms/statistical_iterative/index", "autoapi/pytomography/callbacks/callback/index", "autoapi/pytomography/callbacks/index", "autoapi/pytomography/callbacks/likelihood/index", "autoapi/pytomography/index", "autoapi/pytomography/io/CT/attenuation_map/index", "autoapi/pytomography/io/CT/dicom/index", "autoapi/pytomography/io/CT/index", "autoapi/pytomography/io/PET/gate/index", "autoapi/pytomography/io/PET/index", "autoapi/pytomography/io/PET/petsird/index", "autoapi/pytomography/io/PET/prd/_binary/index", "autoapi/pytomography/io/PET/prd/_dtypes/index", "autoapi/pytomography/io/PET/prd/_ndjson/index", "autoapi/pytomography/io/PET/prd/binary/index", "autoapi/pytomography/io/PET/prd/index", "autoapi/pytomography/io/PET/prd/ndjson/index", "autoapi/pytomography/io/PET/prd/protocols/index", "autoapi/pytomography/io/PET/prd/types/index", "autoapi/pytomography/io/PET/prd/yardl_types/index", "autoapi/pytomography/io/SPECT/dicom/index", "autoapi/pytomography/io/SPECT/index", "autoapi/pytomography/io/SPECT/simind/index", "autoapi/pytomography/io/index", "autoapi/pytomography/io/shared/dicom_creation/index", "autoapi/pytomography/io/shared/index", "autoapi/pytomography/io/shared/interfile/index", "autoapi/pytomography/metadata/PET/index", "autoapi/pytomography/metadata/PET/pet_tof_metadata/index", "autoapi/pytomography/metadata/PET/petlm_metadata/index", "autoapi/pytomography/metadata/SPECT/index", "autoapi/pytomography/metadata/SPECT/spect_metadata/index", "autoapi/pytomography/metadata/index", "autoapi/pytomography/metadata/metadata/index", "autoapi/pytomography/priors/index", "autoapi/pytomography/priors/nearest_neighbour/index", "autoapi/pytomography/priors/prior/index", "autoapi/pytomography/projectors/PET/index", "autoapi/pytomography/projectors/PET/petlm_system_matrix/index", "autoapi/pytomography/projectors/SPECT/index", "autoapi/pytomography/projectors/SPECT/spect_system_matrix/index", "autoapi/pytomography/projectors/index", "autoapi/pytomography/projectors/shared/index", "autoapi/pytomography/projectors/shared/kem_system_matrix/index", "autoapi/pytomography/projectors/shared/motion_correction_system_matrix/index", "autoapi/pytomography/projectors/system_matrix/index", "autoapi/pytomography/transforms/SPECT/attenuation/index", "autoapi/pytomography/transforms/SPECT/cutoff/index", "autoapi/pytomography/transforms/SPECT/index", "autoapi/pytomography/transforms/SPECT/psf/index", "autoapi/pytomography/transforms/index", "autoapi/pytomography/transforms/shared/filters/index", "autoapi/pytomography/transforms/shared/index", "autoapi/pytomography/transforms/shared/kem/index", "autoapi/pytomography/transforms/shared/motion/index", "autoapi/pytomography/transforms/shared/spatial/index", "autoapi/pytomography/transforms/transform/index", "autoapi/pytomography/utils/fourier_filters/index", "autoapi/pytomography/utils/index", "autoapi/pytomography/utils/misc/index", "autoapi/pytomography/utils/nist_data/index", "autoapi/pytomography/utils/scatter/index", "autoapi/pytomography/utils/spatial/index", "developers_guide", "external_data", "index", "notebooks/conventions", "notebooks/dt1", "notebooks/dt2", "notebooks/dt3", "notebooks/dt4", "notebooks/dt5", "notebooks/dt6", "notebooks/t_BSREM", "notebooks/t_KEM", "notebooks/t_OSL", "notebooks/t_PETGATE", "notebooks/t_PETSIRD", "notebooks/t_dicomdata", "notebooks/t_fbp", "notebooks/t_quantitative", "notebooks/t_siminddata", "usage"], "filenames": ["autoapi/index.rst", "autoapi/pytomography/algorithms/fbp/index.rst", "autoapi/pytomography/algorithms/index.rst", "autoapi/pytomography/algorithms/statistical_iterative/index.rst", "autoapi/pytomography/callbacks/callback/index.rst", "autoapi/pytomography/callbacks/index.rst", "autoapi/pytomography/callbacks/likelihood/index.rst", "autoapi/pytomography/index.rst", "autoapi/pytomography/io/CT/attenuation_map/index.rst", "autoapi/pytomography/io/CT/dicom/index.rst", "autoapi/pytomography/io/CT/index.rst", "autoapi/pytomography/io/PET/gate/index.rst", "autoapi/pytomography/io/PET/index.rst", "autoapi/pytomography/io/PET/petsird/index.rst", "autoapi/pytomography/io/PET/prd/_binary/index.rst", "autoapi/pytomography/io/PET/prd/_dtypes/index.rst", "autoapi/pytomography/io/PET/prd/_ndjson/index.rst", "autoapi/pytomography/io/PET/prd/binary/index.rst", "autoapi/pytomography/io/PET/prd/index.rst", "autoapi/pytomography/io/PET/prd/ndjson/index.rst", "autoapi/pytomography/io/PET/prd/protocols/index.rst", "autoapi/pytomography/io/PET/prd/types/index.rst", "autoapi/pytomography/io/PET/prd/yardl_types/index.rst", "autoapi/pytomography/io/SPECT/dicom/index.rst", "autoapi/pytomography/io/SPECT/index.rst", "autoapi/pytomography/io/SPECT/simind/index.rst", "autoapi/pytomography/io/index.rst", "autoapi/pytomography/io/shared/dicom_creation/index.rst", "autoapi/pytomography/io/shared/index.rst", "autoapi/pytomography/io/shared/interfile/index.rst", "autoapi/pytomography/metadata/PET/index.rst", "autoapi/pytomography/metadata/PET/pet_tof_metadata/index.rst", "autoapi/pytomography/metadata/PET/petlm_metadata/index.rst", "autoapi/pytomography/metadata/SPECT/index.rst", "autoapi/pytomography/metadata/SPECT/spect_metadata/index.rst", "autoapi/pytomography/metadata/index.rst", "autoapi/pytomography/metadata/metadata/index.rst", "autoapi/pytomography/priors/index.rst", "autoapi/pytomography/priors/nearest_neighbour/index.rst", "autoapi/pytomography/priors/prior/index.rst", "autoapi/pytomography/projectors/PET/index.rst", "autoapi/pytomography/projectors/PET/petlm_system_matrix/index.rst", "autoapi/pytomography/projectors/SPECT/index.rst", "autoapi/pytomography/projectors/SPECT/spect_system_matrix/index.rst", "autoapi/pytomography/projectors/index.rst", "autoapi/pytomography/projectors/shared/index.rst", "autoapi/pytomography/projectors/shared/kem_system_matrix/index.rst", "autoapi/pytomography/projectors/shared/motion_correction_system_matrix/index.rst", "autoapi/pytomography/projectors/system_matrix/index.rst", "autoapi/pytomography/transforms/SPECT/attenuation/index.rst", "autoapi/pytomography/transforms/SPECT/cutoff/index.rst", "autoapi/pytomography/transforms/SPECT/index.rst", "autoapi/pytomography/transforms/SPECT/psf/index.rst", "autoapi/pytomography/transforms/index.rst", "autoapi/pytomography/transforms/shared/filters/index.rst", "autoapi/pytomography/transforms/shared/index.rst", "autoapi/pytomography/transforms/shared/kem/index.rst", "autoapi/pytomography/transforms/shared/motion/index.rst", "autoapi/pytomography/transforms/shared/spatial/index.rst", "autoapi/pytomography/transforms/transform/index.rst", "autoapi/pytomography/utils/fourier_filters/index.rst", "autoapi/pytomography/utils/index.rst", "autoapi/pytomography/utils/misc/index.rst", "autoapi/pytomography/utils/nist_data/index.rst", "autoapi/pytomography/utils/scatter/index.rst", "autoapi/pytomography/utils/spatial/index.rst", "developers_guide.md", "external_data.md", "index.md", "notebooks/conventions.ipynb", "notebooks/dt1.ipynb", "notebooks/dt2.ipynb", "notebooks/dt3.ipynb", "notebooks/dt4.ipynb", "notebooks/dt5.ipynb", "notebooks/dt6.ipynb", "notebooks/t_BSREM.ipynb", "notebooks/t_KEM.ipynb", "notebooks/t_OSL.ipynb", "notebooks/t_PETGATE.ipynb", "notebooks/t_PETSIRD.ipynb", "notebooks/t_dicomdata.ipynb", "notebooks/t_fbp.ipynb", "notebooks/t_quantitative.ipynb", "notebooks/t_siminddata.ipynb", "usage.md"], "titles": ["API Reference", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">pytomography.algorithms.fbp</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">pytomography.algorithms</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">pytomography.algorithms.statistical_iterative</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">pytomography.callbacks.callback</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">pytomography.callbacks</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">pytomography.callbacks.likelihood</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">pytomography</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">pytomography.io.CT.attenuation_map</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">pytomography.io.CT.dicom</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">pytomography.io.CT</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">pytomography.io.PET.gate</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">pytomography.io.PET</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">pytomography.io.PET.petsird</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">pytomography.io.PET.prd._binary</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">pytomography.io.PET.prd._dtypes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">pytomography.io.PET.prd._ndjson</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">pytomography.io.PET.prd.binary</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">pytomography.io.PET.prd</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">pytomography.io.PET.prd.ndjson</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">pytomography.io.PET.prd.protocols</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">pytomography.io.PET.prd.types</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">pytomography.io.PET.prd.yardl_types</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">pytomography.io.SPECT.dicom</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">pytomography.io.SPECT</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">pytomography.io.SPECT.simind</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">pytomography.io</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">pytomography.io.shared.dicom_creation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">pytomography.io.shared</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">pytomography.io.shared.interfile</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">pytomography.metadata.PET</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">pytomography.metadata.PET.pet_tof_metadata</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">pytomography.metadata.PET.petlm_metadata</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">pytomography.metadata.SPECT</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">pytomography.metadata.SPECT.spect_metadata</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">pytomography.metadata</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">pytomography.metadata.metadata</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">pytomography.priors</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">pytomography.priors.nearest_neighbour</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">pytomography.priors.prior</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">pytomography.projectors.PET</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">pytomography.projectors.PET.petlm_system_matrix</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">pytomography.projectors.SPECT</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">pytomography.projectors.SPECT.spect_system_matrix</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">pytomography.projectors</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">pytomography.projectors.shared</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">pytomography.projectors.shared.kem_system_matrix</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">pytomography.projectors.shared.motion_correction_system_matrix</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">pytomography.projectors.system_matrix</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">pytomography.transforms.SPECT.attenuation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">pytomography.transforms.SPECT.cutoff</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">pytomography.transforms.SPECT</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">pytomography.transforms.SPECT.psf</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">pytomography.transforms</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">pytomography.transforms.shared.filters</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">pytomography.transforms.shared</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">pytomography.transforms.shared.kem</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">pytomography.transforms.shared.motion</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">pytomography.transforms.shared.spatial</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">pytomography.transforms.transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">pytomography.utils.fourier_filters</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">pytomography.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">pytomography.utils.misc</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">pytomography.utils.nist_data</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">pytomography.utils.scatter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">pytomography.utils.spatial</span></code>", "Developer\u2019s Guide", "External Data", "PyTomography", "Manual", "Fundamental Operations", "Last Time", "Last Time", "Last Time", "&lt;no title&gt;", "Last Time", "BSREM", "KEM", "OSEMOSL", "Reconstructing GATE Data", "Reconstructing PETSIRD Data", "Reconstructing DICOM Data", "Filtered Back Projection", "Quantitative Example", "Reconstructing SIMIND Data", "Tutorials"], "terms": {"thi": [0, 1, 2, 3, 5, 8, 9, 10, 11, 12, 14, 16, 17, 18, 19, 21, 23, 24, 25, 26, 27, 28, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 48, 49, 50, 51, 52, 53, 54, 55, 56, 59, 61, 62, 65, 66, 67, 68, 69, 70, 74, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85], "page": [0, 2, 3, 23, 24, 66, 68], "contain": [0, 1, 2, 3, 9, 10, 11, 13, 24, 25, 26, 28, 29, 30, 31, 35, 37, 40, 41, 44, 49, 51, 52, 53, 55, 56, 61, 68, 69, 70, 80, 81], "auto": [0, 13], "gener": [0, 12, 14, 16, 17, 18, 19, 22, 27, 30, 32, 35, 36, 40, 41, 44, 45, 46, 47, 48, 67, 68, 73, 74, 76, 79, 80, 84], "document": [0, 2, 3, 69, 76], "1": [0, 1, 2, 3, 8, 10, 14, 16, 18, 20, 23, 24, 25, 28, 29, 30, 32, 33, 34, 35, 37, 38, 40, 41, 42, 43, 44, 45, 46, 48, 49, 51, 55, 56, 60, 61, 62, 63, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80], "pytomographi": [0, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84], "algorithm": [0, 5, 6, 7, 23, 30, 32, 35, 37, 40, 41, 42, 43, 44, 45, 47, 48, 49, 51, 54, 55, 68, 71, 75, 77, 78, 79, 80, 81, 82, 83, 84], "fbp": [0, 2, 3, 7, 68, 82], "statistical_it": [0, 2, 7], "callback": [0, 2, 3, 7, 76, 83], "likelihood": [0, 5, 7], "io": [0, 7, 67, 76, 77, 78, 79, 80, 81, 82, 83, 84], "ct": [0, 7, 23, 24, 26, 37, 38, 49, 51, 55, 56, 67, 68, 72, 73, 74, 75, 77, 78, 79, 81, 84], "attenuation_map": [0, 7, 10, 26, 40, 41, 49, 51, 76, 77, 78, 80, 81, 83, 84], "dicom": [0, 2, 3, 7, 10, 24, 26, 27, 28, 49, 50, 51, 55, 58, 68, 69, 82, 85], "spect": [0, 7, 8, 10, 26, 28, 29, 35, 44, 53, 61, 62, 68, 70, 73, 74, 75, 76, 77, 78, 81, 82, 84], "simind": [0, 7, 24, 26, 28, 29, 67, 68, 76, 77, 78, 83, 85], "share": [0, 7, 11, 26, 44, 53, 77, 79, 80], "dicom_cr": [0, 7, 26, 28], "metadata": [0, 7, 11, 13, 23, 24, 25, 27, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 51, 52, 53, 54, 55, 56, 59, 74, 75, 79, 80, 81, 82, 84], "spect_metadata": [0, 7, 33, 35], "prior": [0, 2, 3, 5, 6, 7, 40, 41, 42, 43, 68, 76, 78, 80, 85], "nearest_neighbour": [0, 7, 37], "projector": [0, 2, 3, 7, 30, 32, 35, 76, 77, 78, 79, 80, 81, 82, 83, 84], "spect_system_matrix": [0, 7, 42, 44], "kem_system_matrix": [0, 7, 44, 45], "system_matrix": [0, 2, 3, 5, 6, 7, 42, 43, 44, 45, 46, 47, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84], "transform": [0, 1, 2, 3, 7, 40, 41, 42, 43, 44, 45, 46, 47, 48, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 82, 83, 84], "pet": [0, 2, 3, 7, 8, 10, 23, 24, 25, 26, 28, 29, 35, 44, 53, 55, 56, 68, 69, 77, 79, 80, 81], "attenu": [0, 7, 8, 10, 11, 23, 24, 25, 28, 29, 30, 32, 35, 40, 41, 44, 45, 47, 48, 51, 53, 55, 58, 61, 62, 63, 67, 68, 69, 70, 72, 73, 74, 75, 78, 79, 80, 82, 84], "psf": [0, 7, 23, 24, 25, 33, 34, 35, 40, 41, 51, 53, 61, 62, 65, 67, 68, 69, 70, 72, 73, 74, 80, 82, 84], "cutoff": [0, 2, 3, 7, 51, 53, 82], "filter": [0, 1, 2, 7, 11, 53, 55, 60, 61, 68, 80, 85], "kem": [0, 2, 3, 7, 45, 46, 53, 55, 68, 85], "util": [0, 7, 70, 71, 72, 73, 74, 81, 82], "fourier_filt": [0, 7, 61], "misc": [0, 7, 61], "nist_data": [0, 7, 61], "scatter": [0, 2, 3, 7, 23, 24, 25, 30, 32, 35, 40, 41, 61, 68, 70, 76, 77, 78, 80, 81, 82, 83, 84], "spatial": [0, 7, 11, 30, 31, 32, 35, 53, 55, 61, 69], "creat": [0, 8, 14, 16, 18, 22, 27, 28, 52, 53, 54, 55, 59, 66, 68, 70, 71, 73, 75, 78, 79, 80, 81, 83, 84], "sphinx": 0, "autoapi": 0, "implement": [1, 2, 3, 18, 21, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 53, 55, 56, 57, 59, 60, 61, 62, 66, 69, 71, 72, 73, 74, 82], "back": [1, 2, 30, 32, 35, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 51, 52, 54, 55, 61, 65, 68, 69, 71, 72, 73, 74, 75, 78, 85], "project": [1, 2, 3, 5, 6, 13, 23, 24, 25, 30, 31, 32, 33, 34, 35, 36, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 61, 62, 65, 68, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 85], "reconstruct": [1, 2, 3, 4, 5, 11, 23, 25, 30, 32, 35, 37, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 53, 54, 55, 57, 59, 66, 68, 71, 75, 76, 77, 78, 85], "filteredbackproject": [1, 2, 82], "angl": [1, 2, 23, 33, 34, 35, 36, 42, 43, 44, 45, 46, 48, 49, 51, 52, 55, 58, 61, 65, 69, 70, 71, 72, 73, 74, 75, 81, 82, 84], "none": [1, 2, 3, 5, 6, 8, 11, 13, 14, 16, 17, 18, 19, 20, 21, 23, 24, 25, 27, 30, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 59, 76, 78, 80, 81, 83], "sourc": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 73, 83], "hat": [1, 2, 3, 42, 43, 69, 70, 71, 72, 73, 74, 76, 77, 79], "f": [1, 2, 3, 5, 6, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 51, 52, 55, 56, 61, 63, 69, 70, 71, 72, 75, 76, 77, 79, 81, 82, 83, 84], "frac": [1, 2, 3, 33, 34, 35, 37, 38, 39, 42, 43, 55, 56, 60, 61, 69, 75, 76, 77, 79], "pi": [1, 2, 33, 34, 35, 55, 58, 60, 61, 65, 69], "n_": [1, 2, 81], "text": [1, 2, 40, 41, 49, 51, 69, 70, 71, 81], "proj": [1, 2, 40, 41, 42, 43, 44, 45, 46, 47, 48, 50, 51, 53, 54, 55, 59, 61, 62, 65, 70, 82], "mathcal": [1, 2], "r": [1, 2, 18, 21, 33, 34, 35, 37, 38, 40, 41, 61, 62, 69, 70, 71, 73, 74, 76, 79, 84], "g": [1, 2, 3, 5, 6, 40, 41, 42, 43, 44, 45, 46, 47, 48, 69, 70, 71, 72, 75, 81, 82], "where": [1, 2, 3, 11, 23, 24, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 48, 50, 51, 52, 55, 56, 58, 61, 62, 65, 66, 69, 72, 73, 74, 76, 77, 78, 80, 81, 83, 84], "i": [1, 2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84], "number": [1, 2, 3, 4, 5, 6, 11, 13, 18, 21, 27, 28, 30, 31, 32, 33, 34, 35, 37, 38, 40, 41, 42, 43, 44, 48, 54, 55, 56, 61, 62, 65, 69, 70, 75, 76, 79, 80, 81, 83, 84], "3d": [1, 2, 69, 70, 82, 83, 84], "radon": [1, 2, 82], "2d": [1, 2, 11, 13, 33, 34, 35, 51, 52, 53, 69, 81, 84], "fourier": [1, 2], "appli": [1, 2, 3, 30, 32, 35, 40, 41, 42, 43, 51, 52, 53, 54, 55, 57, 59, 61, 65, 72, 73, 74, 82, 84], "each": [1, 2, 3, 4, 5, 11, 18, 21, 23, 25, 27, 30, 31, 33, 34, 35, 40, 41, 42, 43, 44, 48, 49, 51, 52, 55, 56, 57, 58, 61, 62, 65, 69, 71, 72, 73, 76, 77, 78, 80, 82, 83, 84], "seper": [1, 2, 9, 10, 23, 24, 33, 34, 35, 40, 41, 69, 73, 74, 83, 84], "space": [1, 2, 3, 11, 18, 21, 33, 34, 35, 36, 37, 38, 40, 41, 42, 43, 44, 48, 49, 51, 52, 61, 62, 69, 72, 73, 74, 79, 81, 82, 84], "which": [1, 2, 3, 4, 5, 6, 8, 9, 10, 12, 25, 27, 28, 30, 31, 32, 33, 34, 35, 37, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 61, 63, 65, 68, 69, 70, 72, 75, 76, 79, 80, 81, 83, 84], "default": [1, 2, 3, 5, 6, 11, 13, 14, 16, 17, 19, 23, 24, 25, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 51, 52, 54, 55, 56, 61, 65, 77, 78], "ramp": [1, 2, 60, 61], "paramet": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 65, 67, 68, 75, 76, 77, 79, 81], "torch": [1, 2, 3, 4, 5, 6, 11, 13, 23, 24, 25, 28, 29, 30, 32, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 65, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84], "tensor": [1, 2, 3, 4, 5, 6, 11, 13, 23, 24, 25, 28, 29, 30, 32, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 65, 69, 70, 72, 73, 74, 77, 79, 80], "data": [1, 2, 3, 5, 6, 8, 10, 11, 12, 14, 23, 24, 25, 26, 28, 29, 30, 31, 35, 40, 41, 44, 45, 46, 48, 49, 50, 51, 52, 61, 62, 63, 68, 69, 70, 73, 74, 76, 77, 78, 85], "sequenc": [1, 2, 3, 8, 9, 10, 11, 13, 18, 20, 21, 23, 24, 25, 33, 34, 35, 37, 38, 40, 41, 42, 43, 44, 45, 47, 48, 49, 51, 52, 55, 56, 61, 62, 69, 76], "correspond": [1, 2, 3, 5, 6, 8, 9, 10, 11, 23, 24, 25, 27, 28, 29, 30, 31, 33, 34, 35, 37, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 55, 56, 57, 58, 61, 62, 63, 65, 66, 69, 74, 76, 77, 79, 80, 81, 83, 84], "callabl": [1, 2, 3, 15, 37, 38, 51, 52, 55, 56], "option": [1, 2, 3, 5, 6, 11, 13, 14, 16, 18, 20, 21, 23, 24, 25, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 51, 52, 54, 55, 56, 61, 65, 68, 78, 81], "addit": [1, 2, 3, 12, 27, 28, 33, 34, 35, 40, 41, 44, 48, 50, 51, 55, 56, 69, 77], "after": [1, 2, 3, 4, 5, 6, 30, 32, 35, 40, 41, 42, 43, 44, 45, 47, 48, 53, 54, 55, 59, 72, 76, 83, 84], "us": [1, 2, 3, 4, 5, 6, 8, 11, 12, 14, 16, 17, 18, 19, 21, 22, 23, 24, 25, 27, 28, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 65, 66, 67, 68, 69, 70, 72, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85], "dure": [1, 2, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 69, 77, 80, 82, 83, 84], "__call__": [1, 2, 3, 37, 38, 53, 54, 55, 57, 59, 60, 61], "return": [1, 2, 3, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 65, 69, 72, 73, 74, 76, 77, 78, 81, 82], "object": [1, 2, 3, 4, 5, 6, 11, 16, 18, 19, 20, 21, 22, 23, 24, 25, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 65, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 83, 84], "predict": [1, 2, 3, 45, 46, 75], "type": [0, 1, 2, 3, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 65, 70, 77, 81], "modul": [2, 26, 35, 37, 44, 53, 61], "all": [2, 3, 5, 8, 11, 12, 13, 18, 21, 23, 24, 27, 28, 30, 31, 32, 33, 34, 35, 36, 38, 40, 41, 42, 43, 44, 45, 46, 48, 49, 51, 52, 53, 55, 57, 59, 61, 62, 66, 67, 68, 69, 70, 74, 76, 77, 78, 79, 80, 81, 83, 84], "avail": [2, 23, 61, 62, 68], "statisticalit": [2, 3], "object_initi": [2, 3], "0": [2, 3, 8, 11, 13, 14, 18, 20, 21, 22, 23, 24, 37, 38, 60, 61, 65, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84], "precompute_normalization_factor": [2, 3], "true": [2, 3, 9, 10, 11, 23, 24, 45, 46, 49, 51, 52, 61, 65, 71, 72, 73, 75, 77, 79, 80, 82, 83, 84], "parent": [2, 3, 35, 36, 53, 55, 57, 59], "statist": [2, 3, 4, 5, 37, 68, 69, 83], "iter": [2, 3, 4, 5, 6, 14, 17, 18, 19, 20, 37, 39, 44, 45, 47, 48, 54, 55, 68, 69, 75, 76, 79, 80, 81, 83], "child": [2, 3], "must": [2, 3, 4, 5, 23, 24, 27, 28, 30, 32, 35, 40, 41, 44, 48, 49, 51, 53, 55, 57, 59, 80, 81], "method": [2, 3, 4, 5, 6, 23, 24, 37, 39, 44, 45, 47, 48, 49, 51, 52, 53, 55, 57, 59, 61, 62, 65, 68, 69, 82, 84], "perform": [2, 3, 5, 13, 23, 30, 32, 35, 74, 76, 81, 82, 83], "photopeak": [2, 3, 8, 10, 18, 21, 23, 24, 25, 76, 77, 78, 81, 83, 84], "window": [2, 3, 18, 21, 23, 24, 25, 69, 81], "systemmatrix": [2, 3, 5, 6, 40, 41, 42, 43, 44, 45, 46, 47, 48, 69, 74, 75], "system": [2, 3, 5, 6, 23, 30, 32, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 50, 51, 53, 54, 55, 59, 61, 65, 67, 68, 69, 71, 74, 75, 76, 78, 79, 80, 84], "matrix": [2, 3, 5, 6, 23, 30, 32, 35, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 59, 68, 69, 71, 72, 74, 75, 76, 77, 78, 79, 80, 82, 84], "model": [2, 3, 25, 30, 32, 33, 34, 35, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 61, 62, 65, 67, 68, 69, 70, 71, 72, 80, 84], "imag": [2, 3, 5, 6, 8, 9, 10, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 55, 56, 67, 68, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85], "In": [2, 3, 12, 27, 28, 35, 36, 37, 38, 40, 41, 51, 52, 61, 65, 69, 72, 74, 76, 77, 79, 80, 81, 82, 83, 84], "particular": [2, 3, 11, 23, 27, 28, 40, 41, 45, 46, 49, 51, 52, 61, 63, 65, 69, 79, 83], "h": [2, 3, 30, 32, 35, 40, 41, 42, 43, 44, 45, 46, 47, 48, 69, 71, 72, 73, 74, 75, 79, 81, 82, 84], "hf": [2, 3, 5, 6, 44, 48, 69, 70, 71, 72, 75, 82], "batch_siz": [2, 3, 4, 5, 23, 24, 25, 28, 29, 37, 38, 39, 42, 43, 44, 48, 49, 50, 51, 52, 55, 58, 61, 62, 65, 70], "lx": [2, 3, 4, 5, 23, 24, 25, 28, 29, 33, 34, 35, 37, 38, 39, 42, 43, 44, 48, 49, 51, 52, 55, 58, 61, 62, 65, 70, 73, 74], "ly": [2, 3, 4, 5, 23, 24, 25, 28, 29, 33, 34, 35, 37, 38, 39, 42, 43, 44, 48, 49, 51, 52, 55, 58, 61, 62, 65, 70], "lz": [2, 3, 4, 5, 23, 24, 25, 28, 29, 33, 34, 35, 37, 38, 39, 42, 43, 44, 48, 49, 50, 51, 52, 55, 58, 61, 62, 65, 70], "initi": [2, 3, 12, 37, 38, 44, 48, 51, 52, 61, 62, 69, 75, 77, 80, 81], "guess": [2, 3, 69, 75], "If": [2, 3, 4, 5, 8, 23, 24, 30, 32, 33, 34, 35, 40, 41, 42, 43, 45, 46, 55, 56, 61, 65, 66, 68, 69, 71, 72, 79, 81, 83], "consist": [2, 3, 8, 11, 23, 40, 41, 42, 43, 44, 45, 47, 48, 49, 51, 69, 74, 81, 84], "estim": [2, 3, 23, 24, 25, 42, 43, 55, 56, 75, 76, 77, 81, 84], "contribut": [2, 3, 61, 62, 66, 68, 69, 78], "": [2, 3, 18, 22, 37, 38, 61, 63, 65, 67, 68, 69, 70, 72, 76, 77, 78, 79, 81, 83, 84], "bayesian": [2, 3, 5, 6, 76, 78], "comput": [2, 3, 4, 5, 6, 9, 10, 11, 23, 25, 30, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 51, 52, 53, 55, 57, 59, 61, 62, 63, 65, 66, 67, 68, 69, 70, 72, 77, 80, 81, 83], "beta": [2, 3, 5, 6, 37, 38, 39, 40, 41, 42, 43, 55, 58, 61, 65, 69, 70, 76, 78, 80], "partial": [2, 3, 37, 38, 39], "v": [2, 3, 5, 6, 8, 37, 38, 39, 44, 45, 47, 48, 50, 51, 61, 63, 67, 69, 74, 76, 77], "term": [2, 3, 74], "bool": [2, 3, 7, 11, 13, 14, 16, 18, 21, 22, 23, 24, 37, 38, 40, 41, 42, 43, 44, 45, 46, 48, 49, 51, 52, 55, 56, 61, 65], "get_subset_split": [44, 48], "n_subset": [2, 3, 40, 41, 42, 43, 44, 48, 76, 77, 78, 79, 80, 81, 83, 84], "list": [9, 10, 11, 14, 16, 18, 21, 23, 24, 25, 28, 29, 33, 34, 35, 40, 41, 42, 43, 44, 48, 51, 52, 55, 56, 61, 62, 67, 77, 80, 81], "subset": [2, 3, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 69, 76, 79, 80, 81], "indici": [], "differ": [2, 3, 9, 10, 23, 24, 25, 27, 28, 30, 32, 35, 36, 37, 38, 40, 41, 49, 51, 52, 55, 56, 67, 68, 69, 70, 71, 73, 76, 77, 78, 82, 83, 84], "For": [2, 3, 5, 12, 14, 16, 17, 19, 23, 24, 38, 40, 41, 66, 69, 70, 72, 73, 74, 76, 77, 78, 79, 80, 81, 82, 83, 84], "exampl": [5, 14, 16, 17, 19, 35, 42, 43, 55, 56, 66, 69, 70, 71, 72, 74, 77, 78, 79, 81, 82, 85], "6": [71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84], "total": [40, 41, 42, 43, 69, 78, 81, 83, 84], "get_subsets_split": [], "2": [8, 11, 30, 32, 33, 34, 35, 37, 38, 55, 56, 58, 60, 61, 62, 63, 65, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80], "would": [44, 45, 47, 48, 66, 69, 70, 71, 72, 78, 81, 84], "4": [8, 37, 38, 61, 63, 68, 70, 71, 73, 76, 77, 78, 79, 80, 81, 82, 83, 84], "3": [8, 11, 13, 23, 24, 30, 31, 32, 33, 34, 35, 54, 55, 58, 61, 63, 65, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84], "5": [55, 56, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84], "int": [2, 3, 4, 5, 6, 13, 14, 16, 18, 20, 22, 23, 24, 28, 29, 30, 31, 33, 34, 35, 37, 38, 40, 41, 42, 43, 44, 45, 46, 48, 51, 52, 55, 56, 61, 62, 65, 73, 74], "osem": [2, 3, 5, 37, 39, 42, 43, 44, 45, 47, 48, 68, 69, 77, 78, 79, 81, 83, 84], "index": [11, 14, 18, 21, 22, 23, 24, 37, 38, 40, 41, 42, 43, 44, 45, 46, 48, 52, 70, 71, 72, 73, 74, 75, 77, 81, 82], "arrai": [8, 9, 10, 11, 13, 18, 21, 23, 24, 40, 41, 44, 48, 51, 52, 61, 62, 63, 70, 72, 73, 74, 79, 83], "abstract": [2, 3, 4, 5, 14, 16, 17, 18, 19, 20, 37, 38, 39, 44, 45, 47, 48, 53, 59], "n_iter": [2, 3, 4, 5, 6, 75, 76, 77, 78, 79, 80, 81, 83, 84], "subclass": [2, 3, 4, 5, 37, 38, 53, 55, 57, 59, 83], "evalu": [2, 3, 83], "subiter": [2, 3, 4, 5], "base": [2, 3, 5, 6, 13, 14, 16, 17, 18, 19, 20, 22, 25, 27, 28, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 55, 56, 57, 58, 66, 69, 76, 77, 78, 79, 83], "osemosl": [2, 3, 68, 85], "order": [2, 3, 42, 43, 44, 48, 69, 80, 84], "expect": [2, 3, 12, 40, 41, 69, 77, 80], "maximum": [2, 3, 9, 10, 23, 42, 43, 69, 76, 77], "n": [2, 3, 11, 30, 32, 35, 37, 38, 42, 43, 44, 48, 51, 52, 55, 56, 69, 73, 74, 75, 76, 77, 78, 79], "m": [2, 3, 18, 21, 40, 41, 42, 43, 45, 46, 66, 69, 76, 77], "left": [2, 3, 5, 6, 37, 38, 55, 56, 60, 61, 66, 68, 69, 75, 76, 77, 78, 79, 81, 83], "h_m": [2, 3, 40, 41, 42, 43, 69, 76, 77], "t": [2, 3, 14, 16, 18, 20, 21, 22, 23, 24, 25, 30, 32, 35, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 55, 56, 61, 65, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84], "g_m": [2, 3, 40, 41, 42, 43, 45, 46, 69, 76, 77], "right": [2, 3, 5, 6, 37, 38, 55, 56, 60, 61, 66, 68, 69, 70, 73, 75, 76, 77, 78, 79, 83, 84], "one": [2, 3, 4, 5, 14, 16, 17, 18, 19, 21, 23, 40, 41, 51, 52, 55, 56, 61, 65, 69, 76, 77, 78, 81, 84], "step": [2, 3, 69, 78], "late": [2, 3, 69, 78], "includ": [2, 3, 11, 12, 23, 27, 42, 43, 50, 51, 54, 55, 66, 68, 69, 70, 79, 81, 83], "inform": [2, 3, 9, 10, 11, 13, 18, 21, 23, 24, 25, 27, 28, 30, 31, 32, 35, 37, 38, 40, 41, 51, 52, 68, 69, 78, 80, 81], "_": [2, 3, 69, 70, 71, 74], "_set_recon_nam": [2, 3], "set": [2, 3, 25, 37, 38, 39, 42, 43, 44, 48, 50, 51, 68, 69, 74, 75, 76, 77, 79, 84], "uniqu": [2, 3, 23, 24, 27, 28], "identifi": [2, 3, 18, 21, 27, 28], "when": [2, 3, 11, 13, 18, 22, 30, 31, 33, 34, 35, 37, 39, 42, 43, 44, 48, 49, 50, 51, 52, 55, 56, 68, 69, 76, 79, 80, 81, 84], "save": [2, 3, 23, 27, 28, 40, 41, 69, 76, 77, 78, 79, 80, 83, 84], "file": [2, 3, 8, 9, 10, 11, 12, 13, 23, 24, 25, 27, 28, 29, 49, 51, 61, 63, 67, 68, 79, 80, 81, 83], "function": [2, 3, 5, 12, 26, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 51, 55, 56, 66, 67, 68, 69, 71, 72, 73, 74, 76, 77, 78, 79, 81, 83, 84], "bsrem": [2, 3, 68, 78, 80, 85], "relaxation_funct": [2, 3, 76], "lambda": [2, 3, 33, 34, 35, 76], "x": [2, 3, 11, 14, 18, 21, 49, 51, 52, 53, 59, 61, 62, 63, 65, 69, 70, 71, 73, 74, 75, 82, 83], "scaling_matrix_typ": [2, 3, 76], "subind_norm": [2, 3, 76], "block": [2, 3, 13, 18, 21, 69], "sequenti": [2, 3, 69], "regular": [2, 3, 68, 69, 77], "alpha_n": [2, 3, 69, 76], "d": [2, 3, 7, 23, 27, 51, 52, 71, 72, 76], "nabla_": [2, 3, 69, 76], "The": [2, 3, 4, 5, 11, 12, 23, 24, 25, 28, 29, 30, 32, 33, 34, 35, 37, 38, 40, 41, 42, 43, 44, 48, 49, 51, 52, 53, 55, 56, 57, 59, 61, 62, 65, 66, 67, 69, 72, 73, 74, 75, 77, 78, 79, 80, 81, 83, 84, 85], "modifi": [2, 3, 30, 32, 35, 66, 69, 72, 76, 77, 78, 81, 83, 84], "ii": [2, 3, 23, 51, 52, 67, 68, 72, 73, 74, 75, 76, 81, 82, 84], "u": [2, 3, 42, 43, 44, 45, 47, 48, 49, 51, 52, 55, 58, 69, 74, 76], "infti": [2, 3, 76], "epsilon": [2, 3, 76], "see": [2, 3, 14, 23, 24, 25, 68, 76, 77, 78, 83, 84], "http": [2, 3, 12, 23, 68, 76, 80], "ieeexplor": [2, 3, 76], "ieee": [2, 3, 76], "org": [2, 3, 23, 68, 76, 80], "1207396": [2, 3, 76], "There": [2, 3, 51, 52, 69, 76, 81], "rather": [2, 3], "than": [2, 3, 18, 21, 81], "get": [2, 3, 8, 11, 18, 21, 23, 24, 25, 33, 34, 35, 37, 38, 40, 41, 42, 43, 44, 45, 46, 48, 51, 52, 61, 63, 65, 67, 72, 73, 74, 77, 79, 80, 81, 83, 84], "an": [2, 3, 4, 5, 8, 11, 12, 14, 16, 18, 22, 23, 24, 27, 28, 29, 33, 34, 35, 37, 38, 39, 40, 41, 44, 45, 47, 48, 49, 51, 52, 53, 55, 56, 58, 59, 61, 62, 65, 66, 69, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83], "done": [2, 3, 23, 24, 30, 32, 33, 34, 35, 53, 54, 55, 59, 61, 62, 69, 76, 79, 81], "paper": [2, 3], "singl": [2, 3, 9, 10, 12, 18, 21, 23, 24, 51, 52, 68, 69, 71, 77], "requir": [2, 3, 8, 10, 11, 16, 23, 24, 25, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 39, 40, 41, 44, 45, 47, 48, 49, 50, 51, 54, 55, 61, 65, 67, 69, 72, 75, 76, 77, 78, 79, 80, 81, 83, 84], "here": [2, 3, 18, 21, 38, 68, 69, 70, 80, 81, 82, 83, 85], "due": [2, 3, 50, 51, 69, 82], "global": [2, 3], "scale": [2, 3, 30, 32, 35, 37, 38, 39, 40, 41, 42, 43, 69, 76, 78, 84], "discuss": [2, 3, 69], "620": [2, 3], "repres": [2, 3, 18, 22, 37, 38, 39, 60, 61, 68, 69, 72, 73, 81, 82, 83, 84], "relax": [2, 3, 76], "str": [2, 3, 7, 8, 9, 10, 11, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 33, 34, 35, 40, 41, 49, 50, 51, 53, 55, 57, 58, 59, 61, 62, 63, 65], "form": [2, 3, 37, 44, 61, 63, 69, 72], "sub": [2, 3], "independ": [2, 3, 23, 69, 73], "normal": [2, 3, 11, 30, 32, 35, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 51, 52, 54, 55, 68, 75, 80, 81, 83], "s_m": [2, 3, 40, 41, 69], "cdot": [2, 3, 72], "subdep_norm": [2, 3], "depend": [2, 3, 12, 18, 21, 23, 24, 33, 34, 35, 37, 38, 51, 52, 61, 62, 69, 70, 73, 78, 79, 83], "section": [2, 3, 23, 24, 69], "iii": [2, 3, 23, 51, 52], "abov": [2, 3, 37, 38, 42, 43, 44, 48, 55, 56, 69, 72, 76, 79, 84], "_scale_prior_gradi": [2, 3], "gradient": [2, 3, 37, 38, 39, 69, 76], "avoid": [2, 3, 33, 34, 35, 75, 76], "division": [2, 3], "error": [2, 3, 23], "null": [2, 3], "region": [2, 3, 8, 11, 25, 42, 43, 68, 76, 77, 78, 79, 80, 83], "cutofftransform": [2, 3, 50, 51], "new": [2, 3, 23, 27, 28, 51, 52, 55, 57, 66, 69, 80, 81], "valu": [2, 3, 8, 10, 11, 14, 16, 17, 18, 19, 20, 21, 22, 23, 28, 29, 37, 38, 39, 42, 43, 44, 48, 50, 51, 61, 63, 65, 67, 69, 72, 76, 77, 81, 83, 84], "ar": [2, 3, 5, 10, 12, 14, 18, 21, 23, 24, 27, 28, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 48, 49, 50, 51, 52, 61, 62, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84], "outsid": [2, 3, 11, 18, 22], "call": [2, 3, 4, 5, 33, 34, 35, 40, 41, 44, 48, 51, 52, 54, 55, 70, 74, 76, 81, 83], "kem_transform": [2, 3, 45, 46, 77], "given": [2, 3, 5, 6, 8, 9, 10, 11, 14, 18, 21, 23, 24, 27, 30, 32, 35, 37, 38, 40, 41, 42, 43, 45, 46, 51, 52, 55, 56, 60, 61, 62, 63, 65, 69, 73, 77, 78, 81, 84], "alpha": [2, 3, 55, 56, 77], "k": [2, 3, 37, 38, 45, 46, 55, 56, 61, 62, 77, 83], "final": [2, 3, 51, 52, 70, 83], "kemtransform": [2, 3, 45, 46, 55, 56, 77], "redefin": [4, 5], "__init__": [4, 5, 83], "run": [4, 5, 6, 69, 75, 77, 79, 81, 83, 84], "argument": [4, 5, 27, 28, 37, 38, 50, 51, 52, 60, 61, 67, 76, 77, 79, 80, 81, 84], "algorihtm": [4, 5], "__run__": [4, 5], "obj": [4, 5, 70, 71, 72, 73, 74, 75, 83], "can": [4, 5, 11, 14, 16, 17, 19, 30, 32, 35, 42, 43, 53, 54, 55, 59, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85], "variou": [4, 5, 26, 44, 45, 47, 48, 83], "from": [4, 5, 8, 9, 10, 11, 12, 13, 14, 16, 17, 18, 19, 21, 23, 24, 25, 27, 28, 29, 33, 34, 35, 37, 38, 39, 40, 41, 44, 45, 46, 48, 51, 52, 61, 62, 63, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84], "metric": 5, "throughout": [5, 69, 80], "you": [5, 66, 68, 69, 75, 76, 77, 78, 79, 81, 83, 84], "mai": [5, 27, 28, 35, 36, 40, 41, 42, 43, 55, 56, 69, 70, 77, 79, 80, 83], "want": [5, 66, 68, 70, 73, 74, 79, 80, 81, 83, 84], "look": [5, 11, 28, 29, 61, 62, 69, 70, 71, 73, 76, 79, 81, 82, 83, 84], "nois": [5, 75, 83, 84], "liver": [5, 76, 77, 78, 83, 84], "A": [5, 11, 14, 16, 17, 18, 19, 21, 22, 44, 45, 47, 48, 49, 50, 51, 52, 55, 56, 58, 61, 62, 69, 72, 73, 74, 80, 81, 83, 84], "simpli": [5, 69, 72, 74, 80, 82], "take": [2, 3, 5, 18, 21, 25, 33, 34, 35, 44, 45, 47, 48, 51, 52, 55, 56, 69, 70, 74, 76, 77, 79, 83], "oper": [5, 33, 34, 35, 44, 45, 47, 48, 53, 54, 55, 69, 71, 72, 74, 82], "input": [2, 3, 5, 10, 24, 25, 26, 27, 28, 37, 38, 52, 55, 57], "user": [2, 3, 5, 37, 38, 61, 65], "defin": [2, 3, 5, 11, 12, 14, 16, 17, 18, 19, 22, 37, 38, 69, 74, 76, 77, 78, 80], "should": [5, 30, 32, 35, 37, 38, 39, 51, 52, 60, 61, 65, 66, 69, 76, 80], "inherit": [5, 14, 16, 17, 18, 19, 22, 37, 39], "could": [5, 18, 21, 55, 56], "bia": [5, 73, 74, 83], "curv": [5, 8, 33, 34, 35, 61, 63, 73, 83], "provid": [5, 11, 12, 14, 16, 18, 22, 23, 24, 25, 30, 32, 35, 40, 41, 42, 43, 45, 46, 79, 81, 84], "wa": [5, 12, 61, 63, 65, 67, 68, 72, 73, 74, 76, 79, 80, 81, 84], "some": [2, 3, 5, 8, 18, 21, 23, 24, 27, 28, 68, 69, 71, 73, 74, 76, 79, 81, 83, 84], "ground": [5, 68, 83], "truth": [5, 68, 83], "compar": [5, 69, 76, 77, 78, 81, 83], "loglikelihoodcallback": [5, 6, 76], "log": [5, 6, 37, 38, 39, 69, 76], "liklihood": [5, 6, 37, 42, 43, 69, 76], "sum": [5, 6, 38, 61, 62, 69, 70, 71, 72, 73, 74, 83], "measur": [5, 6, 25, 50, 51, 69, 80, 81], "__version__": 7, "devic": [2, 3, 7, 40, 41, 53, 55, 57, 59, 70, 71, 72, 73, 74, 75, 80], "dtype": [7, 14, 15, 16, 28, 29, 73, 74, 83], "delta": [7, 11, 37, 38, 73, 74, 75], "1e": [7, 73, 74, 75], "11": [7, 73, 75, 76, 77, 80, 81, 82, 83, 84], "verbos": 7, "fals": [7, 11, 13, 23, 24, 28, 29, 37, 38, 40, 41, 42, 43, 44, 45, 46, 48, 55, 56, 61, 65, 77, 79, 80, 83], "set_dtyp": 7, "dt": [7, 18, 22, 76, 77, 78, 83, 84], "float": [2, 3, 7, 8, 9, 10, 11, 13, 16, 23, 24, 25, 28, 29, 30, 31, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 49, 51, 52, 54, 55, 56, 61, 62, 63, 65, 69, 70, 71, 72, 73, 74, 75, 82], "set_devic": 7, "set_verbos": 7, "b": [7, 14, 18, 22, 33, 34, 35, 50, 51, 69, 73], "map": [8, 11, 14, 16, 17, 19, 23, 24, 25, 28, 29, 40, 41, 42, 43, 44, 45, 47, 48, 49, 67, 68, 69, 74, 75, 78, 79, 80, 81, 82, 84], "correct": [8, 10, 24, 25, 28, 29, 30, 32, 33, 34, 35, 40, 41, 49, 51, 52, 53, 55, 58, 59, 61, 62, 67, 68, 72, 73, 74, 79, 80, 81, 82, 84], "module_path": 8, "datadir": 8, "file_wat": 8, "file_air": 8, "file_cbon": 8, "bilinear_transform": 8, "hu": [8, 10, 23, 24], "a1": [8, 74], "a2": [8, 74], "b1": 8, "b2": 8, "convert": [8, 10, 23, 24, 49, 67, 76, 78, 79, 81, 82, 83], "between": [8, 28, 30, 31, 33, 34, 35, 36, 37, 38, 44, 61, 62, 63, 69, 73, 83], "hounsfield": [8, 9, 10, 23, 24], "unit": [8, 9, 10, 11, 18, 21, 23, 24, 25, 69, 80, 81, 83, 84], "effect": [8, 9, 10, 24, 40, 41, 49, 51, 52, 72, 74, 82], "energi": [8, 9, 10, 13, 18, 21, 23, 24, 25, 49, 51, 52, 61, 63, 67, 69, 72, 81, 82], "linear": [8, 10, 23, 24, 33, 34, 35, 61, 63, 72, 73], "coeffici": [8, 23, 24, 45, 46, 49, 51, 55, 56, 61, 63, 67, 72, 80, 81], "radionuclid": [8, 23, 24, 68, 69], "It": [8, 18, 22, 26, 51, 52, 61, 63, 68, 69, 76, 78, 79, 80, 81, 84], "two": [2, 3, 8, 30, 32, 35, 40, 41, 51, 52, 55, 56, 61, 62, 69, 70, 77, 80, 82], "distinct": [8, 44, 69, 84], "geq": 8, "fit": [2, 3, 8, 33, 34, 35, 61, 63, 83], "get_hu_from_spectrum_interp": 8, "obtain": [8, 9, 10, 11, 13, 23, 24, 25, 40, 41, 42, 43, 44, 48, 51, 52, 54, 55, 57, 61, 62, 67, 68, 69, 76, 77, 78, 79, 81, 84], "materi": [8, 23, 24, 61, 63, 69, 72], "filepath": [8, 9, 10, 11, 23, 24, 25, 49, 51, 61, 63, 81], "desir": [8, 23, 24, 61, 63], "np": [8, 9, 10, 11, 14, 16, 17, 19, 23, 24, 28, 29, 61, 62, 63, 70, 71, 72, 73, 74, 75, 79, 80, 81, 82, 83], "get_hu_mu_curv": 8, "files_ct": [8, 9, 10, 23, 24, 81], "ct_kvp": [8, 10], "e_spect": [8, 10], "housnfield": 8, "air": 8, "water": [8, 82], "cortic": 8, "bone": 8, "point": [8, 11, 18, 21, 33, 34, 35, 38, 51, 52, 69, 72, 73, 83], "slice": [8, 9, 10, 23, 24, 27, 28, 49, 50, 51, 61, 62, 68, 73, 75, 79, 81, 82, 83], "kvp": [8, 10], "scan": [8, 9, 10, 11, 23, 24, 25, 49, 51, 69, 77, 79, 81, 83, 84], "tupl": [8, 11, 13, 14, 15, 16, 18, 37, 38, 61, 62, 63, 73, 74], "hu_to_mu": 8, "e": [8, 18, 21, 33, 34, 35, 37, 42, 43, 44, 48, 55, 56, 60, 61, 62, 65, 67, 69, 72], "p_water_opt": 8, "p_air_opt": 8, "optim": [2, 3, 8], "mu": [8, 10, 23, 24, 40, 41, 61, 63, 72, 73, 74, 75, 79, 82, 84], "_description_": [2, 3, 8, 25, 27, 28, 40, 41, 55, 57, 61, 63, 65], "_type_": [2, 3, 8, 25, 27, 28, 55, 56, 57, 61, 65], "get_hu_corticalbon": 8, "found": [8, 80], "get_ect_from_corticalbone_hu": 8, "find": [8, 28, 29, 49, 51, 52, 61, 62, 83], "give": [2, 3, 8, 9, 10, 51, 52, 69, 71, 75, 77, 79, 80], "get_hu2mu_convers": [8, 10], "convers": [8, 10, 83], "cm": [8, 10, 23, 24, 25, 33, 34, 35, 49, 51, 61, 63, 72, 73, 74, 75, 77, 81, 82, 83], "open": [9, 10, 23, 24, 25, 28, 29, 66, 68, 79, 84], "open_ct_fil": [9, 10, 24], "them": [9, 10, 23, 24, 66, 68, 69, 78, 80, 83, 84], "up": [9, 10, 11, 18, 21, 23, 24, 40, 41, 42, 43, 68, 69, 78, 84], "stack": [9, 10, 23, 24], "togeth": [9, 10, 23, 24, 25, 69, 71, 74, 84], "z": [2, 3, 9, 10, 11, 18, 21, 23, 24, 50, 51, 61, 62, 65, 69, 70, 71, 73, 82, 83], "same": [9, 10, 11, 23, 24, 30, 32, 35, 40, 41, 49, 50, 51, 52, 54, 55, 56, 61, 65, 69, 71, 73, 74, 76, 77, 78, 83, 84], "compute_max_slice_loc_ct": [9, 10], "locat": [9, 10, 18, 21, 23, 24, 33, 34, 35, 49, 51, 61, 62, 63, 65, 69, 73, 77, 81, 84], "output": [2, 3, 10, 23, 24, 25, 26, 28, 29, 40, 41, 49, 50, 51, 52, 68, 80, 81], "modal": [10, 24, 26, 27, 28, 35, 36, 68, 69, 70], "current": [2, 3, 10, 12, 18, 21, 24, 30, 31, 35, 37, 38, 53, 69, 80, 84], "support": [10, 12, 24, 53, 55, 56, 67, 68, 77, 80, 81], "parse_projection_dataset": 23, "radii": [11, 23, 33, 34, 35, 74, 75, 82], "dataset": [23, 27, 28, 80], "pydicom": [23, 81], "iv": 23, "flag": 23, "whether": [2, 3, 11, 23, 24, 37, 38, 40, 41, 42, 43, 44, 48], "multipl": [23, 27, 28, 68, 72, 74, 76, 77, 78, 81, 83], "time": [11, 13, 14, 16, 18, 21, 22, 23, 24, 27, 30, 31, 32, 35, 40, 41, 42, 43, 68, 69, 77, 78, 79, 80, 84], "slot": [23, 24], "were": [23, 84], "detect": [11, 23, 30, 32, 35, 40, 41, 49, 50, 51, 61, 62, 68, 69, 73, 79, 83], "ewindow": 23, "timewindow": 23, "ltheta": [23, 24, 25, 42, 43, 44, 48, 50, 51, 61, 65, 70], "lr": [23, 24, 25, 42, 43, 44, 48, 50, 51, 61, 65, 70], "get_metadata": [23, 25, 76, 77, 78, 81, 83, 84], "index_peak": [23, 24, 81], "dcm": [23, 24, 49, 51, 81], "path": [11, 23, 24, 25, 28, 29, 72, 73, 76, 77, 78, 79, 80, 81, 83, 84], "energywindowinformationsequ": [23, 24, 81], "objectmeta": [11, 23, 33, 34, 35, 36, 37, 38, 39, 44, 45, 47, 48, 53, 54, 55, 59, 74, 75, 79, 80], "projmeta": [23, 33, 34, 35, 36, 44, 45, 47, 48, 53, 54, 55, 59], "get_project": [23, 24, 25, 81, 84], "index_tim": [23, 24], "otherwis": [23, 24, 69], "gate": [0, 7, 12, 23, 24, 26, 68, 69, 80, 85], "spectobjectmeta": [23, 24, 25, 33, 34, 35, 40, 41, 42, 43, 49, 51, 52, 55, 56, 82], "spectprojmeta": [23, 24, 25, 33, 34, 35, 42, 43, 49, 51, 52, 55, 56, 82], "consid": [13, 23, 24, 30, 31, 33, 34, 35, 38, 40, 41, 42, 43, 45, 46, 69, 72, 76, 80, 84], "get_window_width": 23, "width": [23, 30, 31, 33, 34, 35, 51, 52, 54, 55, 61, 65, 73, 81], "detectorinformationsequ": 23, "attribut": [9, 10, 13, 23, 24, 37, 39, 51, 52, 81], "rang": [23, 69, 75, 79], "kev": [18, 21, 23, 67], "get_scatter_from_tew": [23, 24, 25, 81, 84], "index_low": [23, 24, 81], "index_upp": [23, 24, 81], "tripl": [23, 24, 25, 69, 81], "lower": [23, 24, 25, 81, 82], "upper": [23, 24, 25, 81, 82], "get_attenuation_map_from_fil": [23, 24], "file_am": [23, 24], "usual": [23, 24, 75], "manufactur": [23, 24, 27], "scanner": [11, 13, 18, 21, 23, 24, 30, 32, 35, 40, 41, 49, 52, 55, 58, 61, 62, 65, 67, 68, 69, 73, 74, 79, 80, 81, 84], "name": [11, 18, 20, 21, 23, 24, 61, 62, 66, 68, 69], "shape": [14, 16, 18, 21, 23, 24, 30, 32, 33, 34, 35, 36, 37, 38, 51, 52, 61, 62, 70, 71, 73, 74, 75, 79, 80, 81, 82, 83], "atteun": [23, 24, 69, 72, 81], "math": [11, 23, 24, 49, 55, 56], "get_psfmeta_from_scanner_param": [23, 24, 67, 81, 82], "collimator_nam": [23, 24, 67, 81, 82], "energy_kev": [23, 24, 81, 82], "min_sigma": [23, 24, 33, 34, 35, 51, 52, 81], "collim": [23, 24, 42, 43, 51, 52, 61, 62, 68, 81, 82], "code": [12, 23, 24, 67, 73, 74, 76, 77, 78, 83], "more": [2, 3, 14, 16, 17, 18, 19, 21, 23, 24, 25, 42, 43, 69, 72, 75, 76, 77, 78, 79, 80, 82], "extern": [23, 24, 68, 78, 79, 80], "readthedoc": [23, 24], "minimum": [23, 24], "size": [2, 3, 14, 18, 21, 22, 23, 24, 33, 34, 35, 37, 39, 40, 41, 44, 48, 49, 50, 51, 52, 55, 56, 58, 65, 70, 71, 74, 81, 82], "blur": [23, 24, 33, 34, 35, 44, 45, 47, 48, 51, 52, 61, 62, 69, 71, 73, 74, 81], "kernel": [23, 24, 33, 34, 35, 51, 52, 54, 55, 56, 73, 74, 77], "fix": [23, 24, 33, 34, 35, 66], "convolut": [23, 24, 33, 34, 35, 52, 73], "so": [18, 21, 23, 24, 33, 34, 35, 38, 40, 41, 53, 54, 55, 59, 61, 65, 66, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 81, 82, 84], "have": [18, 21, 23, 24, 30, 32, 33, 34, 35, 40, 41, 44, 48, 68, 69, 70, 77, 81], "least": [23, 24, 33, 34, 35, 51, 52], "dimens": [11, 23, 24, 30, 32, 33, 34, 35, 40, 41, 44, 48, 55, 58, 61, 65, 69, 70, 72, 81, 82, 83], "greater": [23, 24], "spectpsfmeta": [23, 24, 25, 33, 34, 35, 51, 52], "ct_to_mumap": [23, 24], "file_nm": [23, 24, 50, 51, 81], "align": [11, 23, 24, 49, 51, 61, 65, 68, 69, 80, 81], "alreadi": [23, 24, 40, 41, 81], "helper": [14, 16, 18, 22, 23, 24], "get_attenuation_map_from_ct_slic": [23, 24], "projectio": [23, 24], "ndata": [23, 24], "energyinformationsequ": [23, 24], "keep_as_hu": [23, 24], "mode": [23, 24, 40, 41, 49, 51, 55, 58, 61, 65, 69, 80], "constant": [23, 24, 33, 34, 35, 40, 41, 49, 51, 54, 55, 61, 65, 69], "usabl": [23, 24], "individu": [23, 24, 74], "raw": [23, 24, 81], "don": [23, 24, 61, 65, 76, 79, 81], "keep": [23, 24], "_get_affine_spect_project": 23, "filenam": 23, "affin": [23, 79, 80], "coordin": [11, 13, 23, 30, 32, 35, 37, 38, 55, 57, 61, 65, 68, 71, 79], "_get_affine_ct": 23, "note": [23, 33, 34, 35, 40, 41, 49, 55, 58, 61, 65, 69, 73, 74, 76, 77, 80, 81, 82, 83, 84], "sinc": [18, 21, 23, 25, 27, 28, 49, 50, 51, 52, 55, 56, 61, 62, 69, 72, 77, 79, 81, 83], "mani": [23, 69, 73, 78], "why": [23, 69, 80], "also": [23, 27, 28, 40, 41, 42, 43, 44, 45, 47, 48, 68, 69, 72, 76, 78, 79, 80, 81, 82, 84], "across": 23, "max_z": 23, "axial": [23, 33, 34, 35, 49, 50, 51, 68, 69, 70, 71, 81, 82], "make": [9, 10, 23, 66, 68, 69, 72, 76, 77, 81, 83], "stitch_multib": 23, "recon": [23, 68, 79, 85], "files_nm": 23, "midslic": 23, "stitch": 23, "bed": [23, 69], "posit": [11, 23, 25, 37, 38, 69, 77, 79, 81], "n_bed": 23, "first": [18, 21, 23, 28, 29, 30, 32, 35, 49, 50, 51, 52, 61, 62, 68, 69, 70, 72, 73, 76, 77, 78, 80, 81, 83, 84], "length": [13, 14, 16, 18, 21, 23, 30, 32, 33, 34, 35, 42, 43, 51, 52, 69], "doi": 23, "10": [23, 40, 41, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84], "1117": 23, "12": [23, 69, 72, 73, 78, 79, 80, 81, 82, 83, 84], "2254096": 23, "describ": [18, 21, 23, 37, 38, 39, 66], "averag": [11, 23, 42, 43, 83], "crossfad": 23, "tem": 23, "transit": 23, "minim": [23, 27], "l_z": [23, 69], "save_dcm": [23, 81], "save_path": [23, 81], "recon_nam": [23, 81], "scale_factor": [], "1024": [], "seri": [23, 27, 69, 84], "folder": [23, 49, 51, 69, 80, 81, 84], "studi": [23, 27, 28, 81], "recon_method_str": 23, "class": [23, 27, 62, 69, 76, 77, 82, 83], "amount": [25, 61, 62, 65, 69], "16": [70, 76, 79, 81, 84], "bit": [], "integ": [61, 62, 83], "get_attenuation_map": [24, 25, 76, 77, 78, 83, 84], "headerfil": [11, 24, 25, 28, 29, 76, 77, 78, 83, 84], "header": [11, 13, 17, 18, 19, 20, 21, 24, 25, 27, 28, 29, 80], "relation_dict": 25, "find_first_entry_containing_head": [], "list_of_attribut": [28, 29], "float32": [14, 16, 18, 21, 22, 28, 29, 73, 74, 83], "entri": [28, 29, 79], "interfil": [0, 7, 26, 28], "line": [28, 29, 66, 69, 72, 75, 81], "distanc": [25, 33, 34, 35, 37, 38, 51, 52, 55, 56, 61, 62, 69, 73, 74, 77, 78], "mm": [11, 18, 21, 25, 30, 31, 35, 79], "doesn": [25, 71, 72], "specifi": [2, 3, 18, 21, 25, 27, 28, 30, 32, 33, 34, 35, 40, 41, 42, 43, 44, 48, 51, 52, 54, 55, 61, 65, 69, 72, 75, 76, 77, 79, 80, 81, 83], "simul": [25, 68, 73, 75, 79, 80, 83, 84], "headerfile_peak": [25, 84], "headerfile_low": [25, 84], "headerfile_upp": [25, 84], "combine_projection_data": [25, 76, 77, 78, 83, 84], "weight": [25, 30, 32, 35, 37, 38, 39, 40, 41, 42, 43, 55, 56, 68, 73, 74, 76, 77, 78, 79, 84], "add": [25, 27, 44, 48, 66, 69, 71, 73, 74, 80, 82, 84], "rel": [25, 37, 38, 40, 41, 42, 43, 80], "necessari": [18, 21, 25, 51, 52], "along": [25, 40, 41, 42, 43, 44, 48, 49, 51, 52, 61, 62, 65, 66, 69, 70, 79, 80, 81], "combine_scatter_data_tew": [25, 76, 77, 78, 83, 84], "headerfiles_peak": 25, "headerfiles_low": [25, 76, 77, 78, 83, 84], "headerfiles_upp": [25, 76, 77, 78, 83, 84], "detail": [2, 3, 14, 25, 27], "get_psfmeta_from_head": [25, 76, 77, 78, 83, 84], "format": [12, 26, 80], "organ": [26, 68, 76, 77, 78, 84], "primarili": [14, 26], "secondarili": 26, "get_file_meta": 27, "sop_instance_uid": [27, 28], "sop_class_uid": [27, 28], "sop": 27, "instanc": [2, 3, 27, 28, 61, 62, 78, 83], "uid": [27, 28], "filemetadataset": 27, "generate_base_dataset": 27, "filedataset": [27, 28], "add_required_elements_to_d": 27, "element": [11, 27, 30, 32, 33, 34, 35, 40, 41, 55, 58, 61, 62, 63, 65, 67, 69, 71, 80], "updat": [27, 76, 80, 83], "add_study_and_series_inform": 27, "reference_d": [27, 28], "refer": [27, 28, 55, 58, 61, 65, 68, 69, 74, 77, 78], "copi": [27, 28, 81], "add_patient_inform": 27, "patient": [27, 28, 68, 69, 81, 84], "create_d": [27, 28], "becaus": [2, 3, 27, 28, 54, 55, 61, 63, 69, 72, 73, 74, 76, 80], "potenti": [27, 28, 51, 52, 66, 81], "wherebi": [27, 28, 61, 62], "convent": [27, 28, 69], "import": [27, 28, 44, 66, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84], "everi": [13, 27, 28, 51, 52, 68, 79, 83], "string": [27, 28, 29, 81], "dr": [33, 34, 35, 36, 40, 41, 52, 67, 74, 75, 79, 80, 82, 83], "voxel": [33, 34, 35, 37, 38, 40, 41, 52, 55, 56, 57, 61, 62, 69, 72, 77, 78, 79, 81, 82, 83], "compute_padded_shap": [33, 34, 35], "pad": [33, 34, 35, 36, 49, 51, 61, 65, 73, 74], "rotat": [33, 34, 35, 51, 52, 55, 58, 61, 65, 69, 71, 72, 73, 74, 83], "anyth": [33, 34, 35], "cut": [33, 34, 35], "off": [33, 34, 35, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84], "projection_shap": [33, 34, 35, 82], "radial": [11, 25, 33, 34, 35, 52, 61, 62, 69, 73, 81], "detector": [11, 13, 17, 18, 19, 21, 30, 32, 33, 34, 35, 40, 41, 49, 51, 52, 61, 62, 68, 69, 70, 72, 73, 79, 80, 81], "onli": [2, 3, 11, 14, 30, 31, 32, 33, 34, 35, 37, 38, 42, 43, 44, 45, 46, 48, 49, 51, 52, 53, 61, 62, 69, 75, 77, 78, 79, 80, 81, 82, 83, 84], "certain": [33, 34, 35, 40, 41, 42, 43, 44, 48, 50, 51], "case": [2, 3, 14, 16, 33, 34, 35, 37, 38, 40, 41, 51, 52, 61, 65, 69, 71, 72, 73, 76, 77, 78, 79, 80, 81, 83], "sigma_fit_param": [33, 34, 35, 81], "sigma_fit": [33, 34, 35], "kernel_dimens": [33, 34, 35, 81], "gaussian": [33, 34, 35, 40, 41, 51, 52, 54, 55, 73, 80, 84], "sigma": [13, 30, 31, 33, 34, 35, 51, 52, 54, 55, 56, 73, 74, 77], "p": [33, 34, 35, 68, 69, 73, 74, 79], "By": [33, 34, 35, 42, 43, 77, 78], "As": [2, 3, 30, 32, 33, 34, 35, 55, 56, 69, 75, 76, 80, 82], "sqrt": [33, 34, 35, 61, 63, 78], "spread": [33, 34, 35], "1d": [33, 34, 35, 51, 52, 79], "plane": [33, 34, 35, 49, 52, 61, 62, 65, 69, 70], "dimension": [33, 34, 35, 75], "mix": [33, 34, 35], "whose": [33, 34, 35], "extens": [33, 34, 35, 78], "infinit": [33, 34, 35], "we": [18, 21, 33, 34, 35, 66, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84], "need": [2, 3, 25, 30, 32, 33, 34, 35, 40, 41, 52, 61, 65, 68, 69, 70, 71, 72, 73, 77, 79, 80, 81, 82, 83, 84], "crop": [33, 34, 35, 61, 65], "numer": [33, 34, 35], "depth": [11, 33, 34, 35, 79, 80], "__repr__": [18, 21, 22, 33, 34, 35, 36], "repr": [18, 21, 22, 33, 34, 35, 36], "self": [2, 3, 14, 16, 17, 18, 19, 21, 22, 33, 34, 35, 36, 37, 38, 39, 42, 43, 44, 48, 83], "pertain": [35, 37, 38, 49, 51], "interpret": [35, 69], "store": [2, 3, 35, 40, 41, 69, 70, 74, 77, 79, 80], "while": [12, 30, 32, 35, 36, 40, 41, 44, 45, 47, 48, 69, 80, 82], "fairli": [35, 36], "similar": [35, 36, 37, 38, 69], "featur": [35, 36, 69], "etc": [14, 16, 17, 19, 35, 36, 81], "significantli": [35, 36], "encorpor": [37, 78], "under": [37, 66, 72, 81], "modif": [37, 42, 43], "l": [37, 38, 39, 69, 72, 76, 83], "tild": [30, 32, 35, 37, 38, 39, 40, 41, 51, 52, 69, 79], "becom": [30, 32, 35, 37, 69], "ln": [37, 38, 39, 69], "typic": [14, 16, 17, 19, 37, 40, 41, 52, 69, 78, 84], "ha": [37, 69, 74, 75, 78, 79, 80, 81, 83, 84], "sum_": [37, 38, 69, 70, 72, 73, 74], "w_": [37, 38], "phi": [37, 38, 55, 58, 61, 65, 69, 70], "f_r": [37, 38, 39], "f_": [37, 38, 69], "express": [18, 21, 37, 55, 56, 60, 61, 69, 74, 76], "nearbi": 37, "posterior": [37, 38, 39, 69], "probabl": [37, 38, 39, 40, 41, 49, 69, 72, 73], "ani": [14, 15, 16, 37, 38, 39, 40, 41, 51, 52, 61, 65, 66, 68, 69, 71, 74, 76, 77, 81], "foward": [37, 39], "set_object_meta": [37, 38, 39], "object_meta": [11, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 51, 52, 53, 54, 55, 56, 59, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84], "set_beta_scal": [37, 39], "factor": [2, 3, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 67, 69, 79, 80, 83, 84], "finit": [37, 39, 50, 51, 79], "per": [11, 37, 39, 72, 84], "set_object": [37, 39], "compute_gradi": [37, 38, 39], "nearestneighbourprior": [37, 38, 78], "vr": [37, 38], "kwarg": [37, 38, 44, 48, 77], "summat": [37, 38, 51, 52], "over": [2, 3, 37, 38, 40, 41, 52, 69, 81], "nearest": [37, 38, 61, 62], "neighbour": [37, 38, 61, 62, 78], "formula": [37, 38, 42, 43, 44, 48], "pass": [14, 37, 38, 73, 74, 77, 79], "neighbourweight": [37, 38], "collect": [17, 18, 19, 20, 37, 38, 45, 47, 70, 72, 83], "abc": [14, 16, 17, 18, 19, 20, 22, 37, 38, 45, 47], "compute_prior": [37, 38], "beta_scal": [37, 38], "quadraticprior": [37, 38, 78], "quadrat": [37, 38, 78], "equat": [37, 38, 69], "logcoshprior": [37, 38], "tanh": [37, 38], "logcosh": [37, 38], "cosh": [37, 38], "relativedifferenceprior": [37, 38, 76, 78, 80], "gamma": [18, 21, 37, 38, 76, 78, 80], "3f_": [37, 38], "assign": [37, 38], "meta": [37, 38, 51, 52], "appropri": [37, 38, 42, 43, 75], "coord": [37, 38], "j": [37, 38, 42, 43, 44, 48, 61, 62, 69, 75], "shift": [37, 38, 61, 62], "euclideanneighbourweight": [37, 38, 78], "invers": [11, 37, 38, 61, 65, 68], "euclidean": [37, 38, 61, 62, 76, 78], "anatomyneighbourweight": [37, 38], "anatomy_imag": [37, 38], "similarity_funct": [37, 38], "anatom": [37, 38, 68, 76, 78], "mri": [37, 38, 55, 56, 68, 77, 79], "bound": [37, 38, 73, 74, 79, 80], "represet": [37, 38], "complet": [37, 38, 79, 83], "dissimilar": [37, 38], "topnanatomyneighbourweight": [37, 38, 76, 78], "n_neighbour": [37, 38, 76, 78], "top": [37, 38, 40, 41, 50, 51, 68, 77, 78, 83], "most": [37, 38, 51, 52, 69, 78, 81], "compute_inclusion_tensor": [37, 38], "those": [38, 69], "directli": 38, "surround": 38, "26": [38, 78], "spectsystemmatrix": [42, 43, 76, 77, 78, 81, 82, 83, 84], "obj2obj_transform": [40, 41, 42, 43, 44, 45, 47, 48, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84], "proj2proj_transform": [42, 43, 44, 48, 76, 77, 78, 81, 82, 83, 84], "proj_meta": [40, 41, 42, 43, 44, 45, 47, 48, 49, 51, 52, 53, 54, 55, 56, 59, 76, 77, 78, 79, 81, 82, 83, 84], "n_parallel": [42, 43, 76, 77, 78, 84], "parallel": [42, 43, 52, 61, 62, 67, 69], "hole": [42, 43], "allow": [18, 22, 42, 43, 66, 73, 76, 81, 84], "converg": [42, 43, 69, 76], "diverg": [42, 43], "configur": [42, 43, 49, 51, 52, 53, 54, 55, 56, 59, 81, 84], "well": [40, 41, 42, 43, 79, 80, 82], "occur": [42, 43, 44, 45, 47, 48], "befor": [2, 3, 30, 32, 35, 40, 41, 42, 43, 44, 45, 47, 48, 54, 55, 66, 69, 72, 74, 76, 78, 81], "forward": [30, 32, 35, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 69, 71, 72, 73, 74, 75, 82], "event": [11, 13, 18, 21, 30, 32, 35, 40, 41, 42, 43, 50, 51, 68, 79, 80, 84], "speed": [42, 43], "increas": [42, 43], "gpu": [2, 3, 40, 41, 42, 43, 68, 76, 77], "usag": [42, 43, 85], "angle_subset": [42, 43, 44, 48], "assum": [11, 18, 21, 30, 32, 35, 40, 41, 42, 43, 44, 48, 49, 51, 69, 70, 76, 77, 78, 80, 82, 84], "backward": [40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 69, 75], "return_norm_const": [40, 41, 42, 43, 44, 45, 46, 48], "sum_j": [42, 43, 44, 48, 69], "h_": [42, 43, 44, 48, 69], "ij": [42, 43, 44, 48, 69, 70, 71, 72, 73, 74, 75, 77, 82], "spectsystemmatrixmaskedseg": [42, 43], "mask": [42, 43], "vector": [42, 43, 44, 55, 57, 69, 74, 79], "mean": [11, 13, 30, 31, 35, 42, 43, 49, 51, 66, 69, 77, 78, 79, 80, 83, 84], "activ": [42, 43, 68, 76, 77, 78, 83, 84], "insid": [42, 43, 73, 74, 80, 83], "segment": [42, 43], "hua": [42, 43], "n_mask": [42, 43], "p_i": [42, 43, 72, 73, 74], "divid": [42, 43, 83], "result": [42, 43, 61, 63, 73, 77, 78], "One": [44, 69, 81], "veri": [40, 41, 44, 70], "mathbb": [44, 45, 47, 48, 49, 50, 51, 52, 55, 58, 69, 74], "produc": [44, 45, 47, 48], "characterist": [44, 45, 47, 48], "through": [44, 45, 47, 48, 69, 73, 74, 75, 76, 78, 79, 82], "im2im_transform": [44, 45, 47, 48, 74, 75], "initialize_transform": [44, 48], "build": [44, 48, 53, 55, 56, 69, 73, 76, 78, 81, 83, 84], "kemsystemmatrix": [45, 46], "hk": [45, 46], "go": [45, 46, 66, 67, 68, 71, 72, 76, 78], "real": [45, 46, 83, 84], "count": [14, 40, 41, 45, 46, 61, 62, 68, 69, 72, 76, 77, 78, 81, 82, 83, 84], "addition": [45, 46, 68], "get_prob_of_detection_matrix": 49, "dx": [49, 61, 62, 72, 73, 74, 75], "photon": [11, 40, 41, 49, 51, 61, 63, 68, 69, 79, 81, 82], "pair": [11, 30, 31, 32, 35, 40, 41, 69, 80], "orient": 80, "axi": [49, 51, 52, 61, 62, 65, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84], "being": [2, 3, 40, 41, 49, 51, 52, 55, 58, 61, 62, 69, 72, 80], "emit": 49, "511kev": [61, 63], "pixel": [49, 50, 51, 61, 65, 69], "petattenuationtransform": [], "proj2proj": [50, 51], "pytorch": [53, 55, 57, 59, 68, 69, 70], "init": [49, 51, 52, 55, 56], "apppli": [50, 51], "norm_const": [49, 50, 51, 52, 54, 55, 56], "diagon": [49, 50, 51, 72], "its": [2, 3, 12, 18, 22, 40, 41, 51, 52, 61, 65, 74, 75, 78, 79, 80, 82, 83], "ident": 77, "petpsftransform": [], "kern": [], "smooth": [51, 52, 54, 55, 84], "theta": [2, 3, 69, 70, 73, 74], "construct_matrix": [], "construct": [30, 32, 35], "kernel_noncol": [], "08": [], "kernel_penetr": [], "87": 75, "kernel_scatt": [], "scatter_fact": [], "327": [], "spectattenuationtransform": [49, 51, 74, 75, 76, 77, 78, 81, 82, 83, 84], "obj2obj": [49, 51, 52, 53, 55, 57, 58, 59], "accept": [49, 51, 66], "either": [49, 51, 69, 81], "extrapol": [49, 51], "beyond": [49, 51], "edg": [11, 13, 18, 21, 49, 51, 79], "zero": [49, 50, 51, 61, 62, 69, 70, 71, 72, 73, 74, 78, 83], "object_i": [49, 51, 52, 55, 57, 70, 71, 72, 73, 74], "ang_idx": [49, 51, 52], "indic": [18, 21, 40, 41, 49, 51, 52, 69, 80], "equal": [18, 21, 50, 51, 79], "last": [18, 21, 50, 51, 70], "few": [50, 51, 52, 69, 73, 74, 80, 81, 83, 84], "often": [9, 10, 50, 51, 69, 74], "field": [50, 51, 55, 57], "view": [50, 51, 69, 76, 78, 79, 80, 81, 83], "bottom": [50, 51, 68, 83], "sharp": [50, 51], "fov": [50, 51, 79, 80], "origin": [44, 48, 50, 51, 55, 57, 61, 62, 65, 66, 71, 83], "spectpsftransform": [51, 52, 74, 75, 76, 77, 78, 81, 82, 83, 84], "psf_meta": [51, 52, 74, 75, 76, 77, 78, 81, 82, 83, 84], "kernel_f": [51, 52], "psf_net": [51, 52], "relev": [51, 52], "work": [51, 52, 69, 80, 82], "low": [51, 52, 67, 68], "medium": [51, 52, 67, 81, 82], "network": [2, 3, 51, 52, 53, 54, 55, 59, 73, 74], "automat": [51, 52, 81], "full": [18, 21, 42, 43, 45, 46, 51, 52, 54, 55, 66, 72, 77], "y": [11, 18, 21, 51, 52, 61, 62, 69, 70, 71, 82, 83], "abl": [51, 52, 66], "numpi": [14, 15, 16, 18, 21, 22, 51, 52, 70, 71, 72, 73, 74, 75, 79, 80, 81, 82, 83, 84], "subsequ": [2, 3, 51, 52, 61, 65, 76], "accur": [51, 52], "respons": [51, 52, 73], "_configure_gaussian_model": [51, 52], "intern": [2, 3, 40, 41, 51, 52, 77], "_configure_kernel_model": [51, 52], "arbitrari": [51, 52], "_configure_manual_net": [51, 52], "net": [51, 52, 69, 84], "_compute_kernel_s": [51, 52], "radiu": [11, 51, 52, 73, 74, 79, 81, 82], "determin": [13, 51, 52, 79, 81], "what": [51, 52, 66, 69, 70, 74], "encompass": [51, 52], "_get_sigma": [51, 52], "1st": [51, 52], "_apply_psf": [51, 52], "batch": [44, 48, 51, 52, 55, 58, 61, 65, 69, 70, 81, 82], "situat": [51, 52, 69], "transpos": [51, 52, 70, 81, 83], "symmetr": [30, 31, 35, 51, 52, 54, 55, 56], "implemt": [51, 52], "gaussianblurnet": 52, "layer_r": 52, "layer_z": 52, "nn": [2, 3, 52, 73, 74], "head": [52, 66], "conv1d": 52, "direct": [52, 69], "sup": [52, 61, 62], "inf": [52, 61, 62], "adjust": [52, 53, 54, 55, 59, 69, 72, 73, 84], "cdr": 52, "arbitrarypsfnet": 52, "kernel_s": [52, 73, 74], "perpendicular": [52, 72], "larg": [40, 41, 52, 79], "enough": [40, 41, 52, 61, 65, 84], "encapsul": [52, 69], "entir": [40, 41, 52, 61, 62, 65, 69], "get_1d_psf_lay": 52, "layer": [52, 73, 74], "cover": 52, "neural": [2, 3, 52, 73], "l1": 52, "l2": 52, "treat": 52, "channel": [52, 81], "group": [52, 73, 74], "conv2d": [52, 73, 74], "im2im": [53, 55, 57, 59], "obj2im": [53, 55, 57, 59], "support_object": [55, 56, 77], "support_kernel": [55, 56, 77], "support_kernels_param": [55, 56, 77], "distance_kernel": [55, 56, 77], "distance_kernel_param": [55, 56, 77], "top_n": [55, 56, 77], "kernel_on_gpu": [55, 56, 77], "basi": [55, 56], "These": [30, 32, 35, 40, 41, 55, 56, 77, 78, 81, 83], "v_i": [55, 56, 77], "v_j": [55, 56, 77], "exp": [55, 56, 72, 73, 74, 77], "sublist": [55, 56], "follow": [14, 16, 17, 19, 55, 56, 66, 68, 69, 71, 72, 73, 76, 77, 78, 79, 81, 83, 84], "semi": [55, 56], "colon": [55, 56], "sai": [55, 56, 69], "support_kernel_param": [55, 56, 77], "40": [55, 56, 72, 73, 74, 75, 76, 77, 78], "x_i": [55, 56, 77], "x_j": [55, 56, 77], "expleft": [55, 56], "2sigma": [55, 56], "compute_kernel": [55, 56], "gaussianfilt": [54, 55, 79, 80, 84], "fwhm": [18, 21, 23, 24, 30, 31, 35, 54, 55, 80, 84], "half": [54, 55], "max": [54, 55, 77, 84], "_get_kernel": [54, 55], "altern": [54, 55, 77, 79], "wai": [14, 16, 18, 22, 54, 55], "rampfilt": [60, 61], "omega": [60, 61], "w": [18, 21, 30, 32, 35, 40, 41, 60, 61], "hammingfilt": [60, 61, 82], "wl": [60, 61, 82], "wh": [60, 61, 82], "ham": [60, 61, 82], "co": [60, 61], "omega_l": [60, 61], "omega_h": [60, 61], "leq": [60, 61], "fraction": [60, 61], "nyquist": [60, 61], "frequenc": [60, 61, 82], "93": [60, 61, 82], "other": [18, 21, 22, 61, 72, 78], "rev_cumsum": [61, 62, 72, 73, 74], "revers": [61, 62, 69, 72], "cumul": [61, 62, 72], "get_dist": [61, 62, 73, 74], "center": [11, 30, 31, 35, 61, 62, 72, 75], "thedist": [61, 62], "central": [61, 62, 78, 82], "get_object_nearest_neighbour": [61, 62], "three": [11, 61, 62, 81], "get_blank_below_abov": [61, 62], "blank": [61, 62, 81], "blank_abov": [61, 62], "blank_below": [61, 62], "empirc": [61, 62], "print_collimator_paramet": [61, 62, 81], "print": [61, 62, 81], "rotate_detector_z": [61, 65, 70, 71, 72, 73, 74], "bilinear": [55, 58, 61, 65], "neg": [61, 65, 69, 71, 72, 73], "frame": [55, 58, 61, 65], "relat": [13, 55, 58, 61, 65, 72], "azimuth": [55, 58, 61, 65, 69], "cartesian": [61, 65, 69], "manual": [61, 65, 70, 80, 81], "interpol": [55, 58, 61, 65], "param": [30, 32, 35, 61, 65], "compute_pad_s": [61, 65], "retain": [61, 65], "side": [30, 31, 35, 61, 65, 66], "pad_proj": [61, 65], "fill": [61, 65], "pad_object": [61, 65], "xy": [61, 65, 70], "out": [11, 61, 65, 68, 77, 79, 80], "unpad_proj": [61, 65], "unpad": [61, 65], "unpad_object": [61, 65], "pad_object_z": [61, 65], "pad_siz": [61, 65], "unpad_object_z": [61, 65], "direcion": [61, 65], "dual_sqrt_exponenti": [61, 63], "c1": [61, 63], "c2": [61, 63], "d1": [61, 63], "d2": [61, 63], "nist": [61, 63], "c_1e": [61, 63], "d_1": [61, 63], "c_2e": [61, 63], "d_2": [61, 63], "chosen": [61, 63], "pure": [61, 63], "gave": [61, 63], "good": [61, 63, 75, 82], "get_e_mu_data_from_datasheet": [61, 63], "datafil": [61, 63], "mass": [61, 63], "50kev": [61, 63], "get_mu_from_spectrum_interp": [61, 63], "compute_tew": [61, 64], "projection_low": [61, 64], "projection_upp": [61, 64], "width_low": [61, 64], "width_upp": [61, 64], "width_peak": [61, 64], "compute_pad_size_pad": 65, "team": 66, "highli": 66, "encourag": 66, "commun": 66, "believ": 66, "reach": [66, 69, 72, 81], "multimod": 66, "framework": 66, "issu": [66, 69], "github": [12, 66], "intend": [66, 69], "onc": [12, 66, 78, 79, 84], "branch": 66, "do": [66, 69, 73, 74, 77, 80, 81], "your": [66, 68, 77, 81, 83], "hand": 66, "On": 66, "local": 66, "clone": 66, "repositori": [12, 66, 68], "Then": [66, 68, 72, 74, 75, 77, 79], "command": 66, "git": 66, "fetch": 66, "checkout": 66, "branchnam": 66, "replac": 66, "chang": [66, 76, 79], "essenti": [66, 84], "pleas": [66, 68, 76, 77, 78, 79], "sure": [66, 68, 81], "test": [66, 67], "proceed": 66, "made": 66, "commit": [12, 66], "messag": 66, "present": [66, 82], "tens": 66, "statement": 66, "about": [11, 18, 21, 66, 68, 69, 71, 74, 76, 77, 78, 80], "do_thi": 66, "do_that": 66, "someth": 66, "renam": 66, "push": [66, 74], "pull": 66, "request": 66, "choos": [66, 69], "merg": 66, "ref": 66, "someon": 66, "review": 66, "contact": 66, "via": [42, 43, 66, 68, 77, 79, 84], "comment": [66, 67], "thei": [14, 30, 32, 35, 49, 51, 66, 69, 72, 74, 76, 77, 80, 81], "ll": [66, 69, 71, 72, 73, 76, 79, 80, 81, 82, 83, 84], "eventu": 66, "next": [66, 69, 72, 79, 83, 84], "releas": [66, 77], "varieti": [67, 78], "task": 67, "like": [67, 69, 70, 71, 83], "link": [67, 68, 74, 85], "media": 67, "compound": 67, "lead": [23, 24, 67], "col": 67, "mont": [67, 68, 79], "carlo": [67, 68, 79], "program": [67, 79], "column": 67, "below": [67, 76, 77, 78, 79, 81, 83], "millenium": 67, "vg": 67, "kameran": 67, "gv": 67, "legp": 67, "purpos": [67, 79], "lehr": 67, "high": [67, 68, 82], "resolut": [18, 21, 23, 24, 30, 31, 35, 67, 68, 69], "eegp": 67, "extend": [44, 48, 67, 77, 84], "megp": 67, "hegp": 67, "leur": 67, "fan": 67, "beam": 67, "ultra": [67, 68], "ueuh": 67, "mpr": 67, "kamera": 67, "gm": 67, "ge": 67, "infinia": 67, "gi": 67, "eleg": 67, "lehx": 67, "870": 67, "g8": 67, "lhr": 67, "leh": 67, "sensit": [30, 32, 35, 40, 41, 67, 79, 80], "luhr": 67, "ventri": 67, "gt": [67, 70, 72, 75, 76, 81, 82, 83, 84], "640": 67, "optima": 67, "630": [67, 68], "670": 67, "czt": 67, "gz": [67, 79, 80], "crystalcam": 67, "hh": 67, "le": 67, "rect": 67, "me": [67, 79, 81, 82], "circ": [67, 69, 70, 72, 84], "bw": 67, "philip": 67, "brightview": 67, "camera": 67, "pb": 67, "cahr": 67, "cadiac": 67, "hr": 67, "von": 67, "gahlen": 67, "holland": 67, "lee": 67, "extra": [67, 81], "less": [67, 82], "super": 67, "leu": 67, "leti": 67, "thyroid": 67, "me23": 67, "123": 67, "me19": 67, "190": 67, "me26": 67, "260": 67, "me30": 67, "300": 67, "me36": 67, "360": [67, 70, 71, 72, 73, 74, 75, 82], "meti": 67, "thyro333id": 67, "he51": 67, "511": [18, 21, 67], "engin": 67, "dynam": 67, "corpor": 67, "ed": 67, "lem": 67, "meu": 67, "meh": 67, "mehr": 67, "mediso": 67, "nuclin": 67, "spirit": 67, "dh": 67, "leuhr": 67, "ma": 67, "anyscan": 67, "lhrh": 67, "mlegp": 67, "mhegp": 67, "pr": 67, "prism": 67, "2000": 67, "3000": 67, "leap": 67, "re": [67, 69, 72, 74, 81, 83], "he": 67, "apfb": 67, "hrfb": 67, "urfb": 67, "ultrahigh": 67, "resol": 67, "si": 67, "siemen": [67, 68, 80, 81, 82], "medic": [67, 68, 69, 80], "cam": [67, 79], "512": [67, 83], "ther": 67, "therapi": [67, 68], "delu": 67, "se": 67, "lefb": 67, "uh": 67, "sy": [67, 81, 82], "symbia": [67, 81], "he1": 67, "he2": 67, "python": [61, 62, 68], "librari": [12, 68], "enabl": [68, 84], "fast": 68, "acceler": 68, "permit": 68, "easi": [68, 71, 79], "integr": [40, 41, 68, 72], "deep": [2, 3, 68, 85], "learn": [68, 78], "tradit": 68, "own": [12, 68], "research": 68, "cite": 68, "arxiv": 68, "ab": [68, 70, 71, 72, 73, 74, 75], "2309": 68, "01977": 68, "emiss": [12, 68, 69, 72, 73, 80], "tomographi": [12, 68, 69, 80], "positron": 68, "mlem": [68, 69, 75, 79], "exist": [68, 79, 81], "datatyp": 68, "abil": 68, "combin": [18, 21, 30, 32, 35, 68, 69, 80, 84], "firstli": [68, 79], "graphic": [68, 83], "card": [68, 83], "driver": 68, "date": [14, 16, 68], "To": [68, 69, 72], "ensur": [68, 69, 70, 81], "enter": 68, "download": [68, 84, 85], "newest": 68, "possibl": [30, 32, 35, 68, 79], "recommend": [68, 76], "anaconda": [68, 77], "manag": [12, 68], "environ": 68, "virtual": 68, "conda": 68, "pytomography_env": 68, "pip": 68, "Be": 68, "check": [2, 3, 14, 61, 62, 68, 81], "tutori": [2, 3, 69, 71, 72, 74, 76, 77, 78, 79, 80, 83], "simpl": [14, 16, 68, 70, 72], "wish": [68, 69], "read": [13, 14, 17, 68], "develop": 68, "guid": 68, "receiv": [68, 72], "target": 68, "lu177": [68, 84], "dotat": 68, "neuroendocrin": 68, "tumour": 68, "cycl": [68, 69, 76], "7": [68, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84], "gbq": 68, "administ": 68, "8": [68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84], "week": 68, "row": [], "30": [72, 73, 74, 75], "rdp": [68, 76, 78], "intens": [], "distribut": [30, 31, 35, 69, 73], "xcat": [], "phantom": [68, 83], "softwar": [68, 79, 80], "shown": [68, 75], "120": [75, 82], "iteraton": 83, "overlaid": [], "mip": [], "henc": [69, 80], "visibl": [], "skeleton": [], "even": [], "though": [9, 10, 75, 81], "had": [], "sigific": [], "uptak": [], "api": [68, 69], "our": [69, 71, 72, 80, 81, 82, 83, 84], "choic": [69, 81], "standard": [12, 14, 16, 18, 22, 25, 40, 41, 69, 80, 83, 84], "anterior": 69, "inferior": 69, "superior": [69, 78], "counterclockwis": 69, "o": [69, 76, 77, 78, 79, 80, 81, 83, 84], "clock": [18, 22, 69], "primari": 69, "item": [18, 21, 69, 83], "sinogram": 69, "impli": 69, "90": [69, 75, 76, 77, 78, 81, 83, 84], "counterintuit": 69, "l_x": 69, "l_y": 69, "l_": 69, "l_r": 69, "discret": [18, 21, 30, 31, 35, 40, 41, 69], "transaxi": 69, "bin": [11, 13, 18, 21, 30, 31, 32, 35, 69, 79, 80, 83], "arrang": [30, 31, 35, 69, 79], "smaller": 69, "object_tensor": 69, "largest": 69, "smallest": 69, "anoth": 69, "image_tensor": 69, "10th": 69, "unless": [69, 73], "spcifi": 69, "symbol": 69, "f_j": 69, "g_i": [40, 41, 69], "compon": [69, 74, 77], "establish": [12, 69, 80], "paradigm": 69, "thu": [69, 77], "mostli": 69, "who": 69, "novel": 69, "still": [12, 40, 41, 69, 79, 80], "howev": [69, 78, 79], "everyon": 69, "know": [69, 81], "built": [69, 70, 81], "around": [69, 70, 76, 84], "fundament": 69, "b_i": 69, "a_j": 69, "_i": [40, 41, 69], "128x128x128": 69, "64": [69, 70, 71, 75, 79, 82, 83], "128x128": 69, "2097152": 69, "1048576": 69, "byte": [14, 69], "17": [69, 73, 81, 84], "6tb": 69, "harddriv": 69, "fortun": 69, "spars": 69, "effici": [69, 79], "techniqu": [2, 3, 69], "practic": [69, 83], "decompos": 69, "squar": [69, 77], "matric": [69, 74, 80], "a_i": 69, "known": [69, 76, 83], "phenomena": [69, 71], "peculiar": 69, "g_": [69, 70], "otim": [44, 48, 69, 70, 72, 73, 74], "specif": 69, "therefor": [69, 78, 84], "lie": 69, "prod_i": 69, "written": [69, 75, 77, 79, 83], "prod_": [69, 77], "a_1": [69, 74], "a_2": [69, 74], "travel": 69, "circular": [25, 69, 73], "orbit": [25, 69], "turn": [69, 70], "b_1": 69, "b_2": 69, "unlik": 69, "fact": [69, 80, 81, 84], "lor": [11, 18, 21, 30, 31, 32, 35, 40, 41, 69, 79, 80], "predefin": 69, "realtiti": [69, 84], "random": [11, 30, 32, 35, 69, 76, 79, 80], "determinist": 69, "simplic": 69, "let": [69, 70, 72, 73, 74, 76, 77, 79, 80, 82, 83, 84], "write": [14, 17, 69], "poisson": [69, 75, 76, 77, 78, 83, 84], "hold": [69, 76, 82], "interv": [18, 21, 69], "begin": [69, 71, 76, 81], "deriv": [40, 41, 69, 78], "ji": 69, "denot": [30, 32, 35, 69, 77], "sim": 69, "now": [12, 18, 22, 69, 70, 72, 73, 74, 77, 78, 79, 80, 81, 82, 83, 84], "seek": 69, "solut": 69, "densiti": 69, "prod_j": 69, "sum_i": 69, "f_i": 69, "end": [69, 71], "yield": [69, 72, 82], "realiti": 69, "bar": 69, "quantiti": [2, 3, 40, 41, 69], "e_": 69, "properli": [69, 81], "understand": 69, "just": [18, 21, 69, 71, 78], "question": [68, 69], "doe": [69, 71, 75, 76, 82], "e_f": 69, "claim": [69, 71], "g_j": 69, "_j": 69, "ratio": [18, 21, 69, 75], "substitut": 69, "rewrit": 69, "vec": [69, 72, 75], "lh": [69, 72], "better": [18, 21, 69, 74, 75], "box": [69, 75], "basic": [18, 22, 69, 75, 78], "cost": 69, "small": [69, 72], "previou": 69, "theta_0": 69, "theta_": 69, "theta_m": 69, "h_mf": [42, 43, 69], "equiv": 69, "move": 69, "plan": [18, 21, 69], "futur": [12, 69, 80], "involv": [69, 77], "modififi": 69, "denomin": 69, "belief": 69, "reason": [40, 41, 69, 84], "adjac": [69, 78], "radiopharmaceut": 69, "concentr": [68, 69], "strength": 69, "temperatur": 69, "mechan": 69, "problem": 69, "approach": 69, "solv": 69, "osl": 69, "formal": 69, "second": [18, 22, 40, 41, 69, 72, 81, 84], "bsr": 69, "72": [70, 75], "matplotlib": [70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84], "pyplot": [70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84], "plt": [70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84], "torchvis": [70, 71, 72, 73, 74], "cuda": [70, 71, 72, 73, 74, 75, 79], "is_avail": [70, 71, 72, 73, 74, 75, 79], "els": [70, 71, 72, 73, 74, 75], "cpu": [2, 3, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84], "analog": 70, "73": [70, 75], "9": [70, 71, 72, 73, 74, 75, 78, 79, 80, 81, 82, 83, 84], "74": [70, 75], "ones": [70, 71, 72, 73, 74, 75, 77, 82], "128": [70, 71, 72, 73, 74, 75, 79, 80, 81, 82, 83], "cylind": [70, 72], "meshgrid": [55, 57, 70, 71, 72, 73, 74, 75, 77, 82], "75": [70, 80], "linspac": [70, 71, 72, 73, 74, 75, 79, 82], "xv": [70, 71, 72, 73, 74, 75, 82], "yv": [70, 71, 72, 73, 74, 75, 82], "zv": [70, 71, 72, 73, 74, 75, 82], "76": 70, "unsqueez": [70, 71, 72, 73, 74, 75, 82], "dim": [70, 71, 72, 73, 74, 75, 82], "plot": [70, 72, 74, 75, 76, 79, 80, 82, 83, 84], "coron": [68, 70, 71, 75, 83], "sagit": 70, "perspect": 70, "34": 70, "fig": [70, 71, 72, 73, 74, 75, 77, 79, 80, 82, 83, 84], "subplot": [70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84], "figsiz": [70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84], "131": [70, 71, 77, 79], "pcolormesh": [70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84], "cmap": [70, 71, 76, 77, 78, 79, 80, 81, 82, 83, 84], "greys_r": [70, 71, 81, 82, 84], "xlabel": [70, 71, 76, 83], "ylabel": [70, 71, 76, 83], "titl": [70, 71, 76, 77, 78, 80, 81, 82, 84], "132": [70, 71, 77, 79, 82], "sagitt": [68, 70, 71], "133": [70, 71, 77, 79], "tight_layout": [70, 71, 79, 80, 83, 84], "think": 70, "rai": [70, 79], "alwai": [18, 22, 40, 41, 70], "37": [70, 74, 79], "long": [70, 77, 79, 82, 84], "77": 70, "45": [70, 74], "270": 70, "obj_rot": 70, "permut": 70, "53": 70, "proj_45": 70, "54": 70, "grei": 70, "lt": [70, 72, 75, 76, 81, 82, 83, 84], "quadmesh": [70, 72, 83], "0x7fb33e5c2e80": 70, "equival": [70, 82], "80": [70, 83], "arang": [70, 71, 72, 73, 74, 75, 82], "82": [70, 75], "len": [70, 71, 72, 73, 74, 82], "84": 70, "85": 70, "enumer": [70, 71, 72, 73, 74, 82, 83, 84], "86": [70, 75], "39": [70, 71, 81], "18": [71, 81, 84], "talk": 71, "how": [30, 31, 35, 68, 71, 72, 73, 79, 80, 83, 84], "start": [18, 21, 71, 72, 79, 82, 83, 84], "empti": [71, 81], "22": [18, 71, 74, 81, 84], "23": [71, 79, 84], "bp_single_angl": [71, 72], "bmatrix": 71, "15": [71, 73, 76, 78, 81, 82, 83, 84], "duplic": 71, "nopw": 71, "ax": [71, 72, 73, 74, 75, 77, 79, 80, 82, 83, 84], "everyth": [71, 74], "24": [71, 84], "obj_bp": [71, 72, 73, 75], "did": [71, 83, 84], "25": [71, 73, 74, 75, 79, 82, 84], "clearli": 71, "theres": 71, "job": [71, 82], "finish": 72, "41": 72, "suppos": 72, "green": 72, "int_l": 72, "thought": 72, "20": [72, 73, 74, 75, 76, 77, 78, 81, 82, 83, 84], "instead": 72, "mayb": 72, "word": 72, "42": [72, 74], "concept": 72, "43": [72, 74], "44": [72, 74, 80], "mu10": 72, "def": [14, 16, 17, 19, 72, 73, 74, 76, 78, 82, 83], "cumsum": [72, 73, 74], "flip": [72, 73, 74], "opposit": 72, "rh": 72, "oppos": 72, "multipli": [18, 21, 72, 81, 84], "57": 72, "object_10": 72, "projection_10": 72, "58": 72, "0x7f24c35a0d00": 72, "notic": [72, 74], "darker": 72, "loop": 72, "59": 72, "mu_i": [72, 73, 74], "60": [72, 73, 74, 75, 82], "50": [72, 73, 74, 75, 76, 83], "zip": [72, 73, 74, 75, 83], "show": [72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 84], "matter": 72, "thing": [72, 77, 81, 83, 84], "61": 72, "obj_bp_i": [72, 73], "red": 73, "closer": 73, "narrow": 73, "realist": [73, 84], "relationship": 73, "collimator_slop": [73, 74, 75], "collimator_intercept": [73, 74, 75], "get_sigma": [73, 74], "07": [73, 74], "1835": 73, "1625": 73, "1415": 73, "1205": 73, "0995": 73, "0785": 73, "0575": 73, "0365": 73, "0155": 73, "9945": 73, "9735": 73, "9525": 73, "9315": 73, "9105": 73, "8895": 73, "8685": 73, "8475": 73, "8265": 73, "8055": 73, "7845": 73, "7635": 73, "7425": 73, "7215": 73, "7005": 73, "6795": 73, "6585": 73, "6375": 73, "6165": 73, "5955": 73, "5745": 73, "5535": 73, "5325": 73, "5115": 73, "4905": 73, "4695": 73, "4485": 73, "4275": 73, "4065": 73, "3855": 73, "3645": 73, "3435": 73, "3225": 73, "3015": 73, "2805": 73, "2595": 73, "2385": 73, "2175": 73, "1965": 73, "1755": 73, "1545": 73, "1335": 73, "1125": 73, "0915": 73, "0705": 73, "0495": 73, "0285": 73, "0075": 73, "9865": 73, "9655": 73, "9445": 73, "9235": 73, "9025": 73, "8815": 73, "8605": 73, "8395": 73, "8185": 73, "7975": 73, "7765": 73, "7555": 73, "7345": 73, "7135": 73, "6925": 73, "6715": 73, "6505": 73, "6295": 73, "6085": 73, "5875": 73, "5665": 73, "5455": 73, "5245": 73, "5035": 73, "4825": 73, "4615": 73, "4405": 73, "4195": 73, "3985": 73, "3775": 73, "3565": 73, "3355": 73, "3145": 73, "2935": 73, "2725": 73, "2515": 73, "2305": 73, "2095": 73, "1885": 73, "1675": 73, "1465": 73, "1255": 73, "1045": 73, "0835": 73, "0625": 73, "0415": 73, "0205": 73, "9995": 73, "9785": 73, "9575": 73, "9365": 73, "9155": 73, "8945": 73, "8735": 73, "8525": 73, "8315": 73, "8105": 73, "7895": 73, "7685": 73, "7475": 73, "7265": 73, "7055": 73, "6845": 73, "6635": 73, "6425": 73, "6215": 73, "6005": 73, "5795": 73, "5585": 73, "5375": 73, "5165": 73, "rememb": 73, "padding_mod": [73, 74], "x_grid": [73, 74], "y_grid": [73, 74], "repeat": [73, 74, 76], "reshap": [73, 74, 83], "non": [11, 25, 30, 32, 35, 40, 41, 73, 78, 80], "detach": [73, 74], "13": [73, 76, 79, 80, 81, 82, 83, 84], "ve": [74, 84], "realli": 74, "been": [74, 79, 80], "notat": 74, "refram": 74, "sort": 74, "subspac": 74, "bigcup_": 74, "mathemat": 74, "partit": [40, 41, 44, 48, 74], "28": [74, 79], "past": 74, "47": 74, "stuff": 74, "48": [74, 79], "49": 74, "both": [74, 81, 82, 83, 84], "compartment": 74, "36": 74, "imagemeta": [74, 75], "psfmeta": [74, 75], "faster": [74, 75, 79], "image_meta": [74, 75], "att_transform": [74, 75, 76, 77, 78, 81, 82, 83, 84], "psf_transform": [74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84], "ran": [74, 79, 84], "quit": 74, "And": [74, 75, 77, 79, 80, 82], "46": 74, "71": 75, "05": 75, "03": 75, "83": 75, "previous": 75, "alon": 75, "tendenc": 75, "amplifi": 75, "later": [75, 81, 83], "coupl": 75, "88": 75, "object_predict": [2, 3, 75, 82], "divis": 75, "121": [75, 76, 80, 81, 82, 84], "vmax": [75, 80, 81, 82], "colorbar": [75, 76, 77, 78, 81, 82, 83, 84], "122": [75, 76, 80, 81, 82, 84], "profil": 75, "91": 75, "line2d": 75, "0x7f60ac4fcca0": 75, "introduct": [76, 78], "seed": 76, "slight": 76, "variat": 76, "manual_se": 76, "_c": 76, "0x7f785743ea70": [], "directori": [12, 76, 77, 78, 81, 84], "disk1": [76, 77, 78, 79, 80, 81, 83, 84], "pytomography_tutorial_data": [76, 77, 78, 80, 81, 83, 84], "simind_tutori": [76, 77, 78, 83, 84], "cell": [76, 77, 78, 79], "borrow": [12, 76, 77, 78], "comprehens": [76, 77, 78], "descript": [76, 77, 78], "bkg": [76, 77, 78, 83, 84], "l_lung": [76, 77, 78, 83, 84], "r_lung": [76, 77, 78, 83, 84], "l_kidnei": [76, 77, 78, 83, 84], "r_kidnei": [76, 77, 78, 83, 84], "salivari": [76, 77, 78, 83, 84], "bladder": [76, 77, 78, 83, 84], "2500": [76, 77, 78, 83, 84], "450": [76, 77, 78, 83, 84], "100": [76, 77, 78, 80, 83, 84], "mbq": [76, 77, 78, 83, 84], "join": [76, 77, 78, 79, 80, 81, 83, 84], "multi_project": [76, 77, 78, 83, 84], "h00": [76, 77, 78, 83, 84], "lowerscatt": [76, 77, 78, 83, 84], "upperscatt": [76, 77, 78, 83, 84], "cp": [76, 78, 84], "photopeak_poisson": [76, 78, 84], "scatter_poisson": [76, 78, 84], "mu208": [76, 77, 78, 83, 84], "hct": [76, 77, 78, 83, 84], "lot": 76, "hyperparamet": 76, "associ": 76, "bunch": 76, "prior_rdp": [76, 78, 80], "weight_top8anatomi": [76, 78], "prior_rdpap": 76, "logliklihoodcallback": 76, "track": 76, "logliklihood": 76, "cb": 76, "reconstruction_algorithm": [76, 77, 78, 81, 83, 84], "unrelax": 76, "minut": [18, 22, 76, 83], "tesla": 76, "v100": 76, "recon_unrelax": 76, "cb_unrelax": 76, "recon_relax": 76, "cb_relax": 76, "70": [76, 77, 78, 81, 84], "magma": [76, 77, 78, 79, 80, 81, 83, 84], "figur": [76, 81, 82, 83], "label": [76, 77, 81, 83, 84], "ylim": [], "00001": [], "fontsiz": [76, 83], "legend": 76, "larger": 76, "limit": [76, 80], "incur": 76, "necessarili": 76, "experi": 76, "tend": 76, "decreas": 76, "seen": [76, 82], "analysi": [76, 78], "recon_ap_unrelax": 76, "cb_ap_unrelax": 76, "recon_ap_relax": 76, "cb_ap_relax": 76, "packag": 77, "__future__": 77, "annot": 77, "recon_osem": 77, "nearli": 77, "k_": 77, "s_v": 77, "k_v": 77, "k_x": 77, "005": 77, "memori": [40, 41, 77], "ram": 77, "portion": 77, "put": 77, "much": [18, 21, 77, 79, 81], "longer": 77, "3x": 77, "kem_transform_top40": 77, "reconstruction_algorithm_kem": 77, "reconstruction_algorithm_kem_top40": 77, "env": 77, "pytomographytest": [], "lib": 77, "python3": 77, "site": 77, "py": [12, 77], "478": [], "userwarn": 77, "upcom": 77, "trigger": 77, "aten": 77, "src": 77, "nativ": 77, "tensorshap": 77, "cpp": 77, "2894": [], "_vf": 77, "ignor": [14, 77, 79], "attr": 77, "recon_kem": 77, "recon_kem_top40": 77, "im": [77, 84], "suggest": 78, "exercis": 78, "attempt": 78, "setup": [78, 80], "prior_quad": 78, "corner": 78, "down": 78, "front": 78, "scheme": 78, "closest": 78, "custom": 78, "weigh": 78, "ap": 78, "design": 78, "prior_quad_weighttop8": 78, "prior_rdp_weighttop8": 78, "four": 78, "recon_noprior": 78, "recon_quad": 78, "recon_rdp": 78, "recon_quad_weighttop8": 78, "recon_rdp_weighttop8": 78, "151": 78, "No": 78, "152": 78, "153": 78, "154": 78, "155": 78, "variabl": [14, 16, 17, 19, 81], "dicom_tutori": 81, "path_ct": 81, "ct_file": 81, "listdir": 81, "projection_data": 81, "informaiton": 81, "isn": 81, "third": [80, 81], "infom": 81, "180": 81, "height": 81, "compat": 81, "ai": 81, "nipy_spectr": [81, 83], "0x7f19c4d56450": [], "dicom_get_scattertew": 81, "peak": 81, "OR": 81, "easier": 81, "rescal": 81, "sample_slic": 81, "0x7f19c2c6f3d0": [], "uncom": 81, "208": 81, "03161992134409504": 81, "12485030464233879": [], "proper": 81, "14": [76, 79, 80, 81, 82, 84], "reconstructed_object": [81, 83, 84], "export": 81, "osem_4it10ss": 81, "vendor": [23, 80, 81], "ds_recon": 81, "read_fil": 81, "scanner_recon": 81, "recon_vendor": 81, "pixel_arrai": 81, "19": [79, 81, 84], "slice_pytomographi": 81, "slice_vendor": 81, "110": 81, "prevent": 81, "overwrit": 81, "itself": 81, "recon_ctslic": 81, "21": [81, 84], "viewer": 81, "rectangl": 82, "object_truth": 82, "0x7f18ba82fd30": 82, "accompani": [80, 82], "taken": [82, 83, 84], "angular": 82, "degre": 82, "acquisit": [18, 21, 68, 79, 82, 84], "15cm": 82, "ideal": 82, "character": 82, "complic": [79, 82], "neglect": 82, "perfect": 82, "unabl": 82, "account": [40, 41, 82], "without": [80, 82], "system_matrix_radon": 82, "140kev": 82, "approx": 82, "amap": [80, 82], "140": 82, "system_matrix_spect": 82, "proj_radon": 82, "proj_spect": 82, "proj_idx": 82, "set_titl": [82, 83, 84], "set_ylabel": 82, "blurrier": 82, "filtered_back_project": 82, "try": [14, 16, 17, 19, 82], "object_radon_fbp_predict": 82, "object_spect_fbp_predict": 82, "central_slice_radon": 82, "central_slice_spect": 82, "artifact": 82, "remov": [11, 79, 80, 82], "respect": [18, 22, 82], "filtered_back_projection_ham": 82, "02": [80, 82], "skimag": 83, "resiz": 83, "activity_dict": 83, "access": [79, 83], "384": 83, "signifi": 83, "756": 83, "mask_idx_dict": 83, "dictionari": 83, "kei": [14, 16, 17, 19, 83], "organ_vol_dict": 83, "volum": [11, 83], "ml": 83, "mask_vol_dict": 83, "gtfile": 83, "phantom_organ": 83, "_act_av": 83, "gt_shape": 83, "768": 83, "gt_space": 83, "075": 83, "gt_path": 83, "gti": 83, "fromfil": 83, "tranpos": 83, "astyp": 83, "prod": 83, "anti_alias": 83, "0x7fc97c448f50": [], "improv": 83, "comparetogroundtruth": 83, "avg_counts_per_ml": 83, "std_counts_per_ml": 83, "isnt": 83, "counts_per_ml": 83, "deviat": 83, "std": 83, "append": 83, "inject": 83, "clinic": [83, 84], "counts_to_mbq": 83, "visual": 83, "o1": 83, "0x7fc88413eed0": [], "plot_bvc": 83, "color": 83, "activity_mbq_per_ml": 83, "activity_noise_mbq_per_ml": 83, "true_activity_mbq_per_ml": 83, "activity_bias_pct": 83, "activity_noise_pct": 83, "marker": 83, "markers": 83, "lw": 83, "ravel": 83, "grid": 83, "tick_param": 83, "major": [80, 83], "labels": 83, "minor": 83, "add_subplot": 83, "111": 83, "frameon": 83, "labelcolor": 83, "assess": 83, "capabl": [80, 83], "commonli": 84, "background": 84, "lesion": 84, "ad": 84, "photopeak_path": 84, "upperscatter_path": 84, "lowerscatter_path": 84, "attenuation_path": 84, "single_project": 84, "body1": 84, "realiz": 84, "projection_tim": 84, "sample_project": 84, "sample_angl": 84, "0f": 84, "body1t2ew6_tot_w2": 84, "hdr": 84, "fed": [49, 51, 84], "come": 84, "post": 84, "1cm": 84, "post_smoothing_filt": 84, "reconstructed_object_filt": 84, "proportion": 84, "bodi": 84, "arbtrari": 84, "noteworthi": 84, "life": 84, "scenario": 84, "0x7f53c0e4e410": [], "decid": 84, "0x7f53c0e1e5d0": [], "noisi": [80, 84], "free": [68, 79, 84], "0x7f53c0f4e410": [], "earlier": 84, "quantit": 85, "prd": [0, 7, 12, 13, 26], "_binari": [0, 12, 17, 18, 26], "_dtype": [0, 12, 18, 26], "_ndjson": [0, 12, 18, 19, 26], "binari": [0, 12, 18, 26], "ndjson": [0, 12, 18, 26], "protocol": [0, 12, 14, 17, 18, 19, 21, 22, 26], "yardl_typ": [0, 12, 14, 16, 18, 21, 26], "petsird": [0, 7, 12, 26, 68, 85], "pet_tof_metadata": [0, 7, 30, 32, 35], "petlm_metadata": [0, 7, 30, 35], "petlm_system_matrix": [0, 7, 40, 44], "motion_correction_system_matrix": [0, 7, 44, 45], "motion": [0, 7, 53, 55], "correpsond": [2, 3, 11], "although": [2, 3], "listmod": [2, 3, 13, 30, 32, 35, 40, 41, 68, 79, 80], "_compute_callback": [2, 3], "_compute_normalization_factor": [2, 3], "n_subset_specif": [2, 3], "reimplement": [2, 3], "diprecon": [2, 3, 68, 85], "prior_network": [2, 3], "rho": [2, 3], "003": [2, 3], "8581448": [2, 3], "procedur": [2, 3], "precomput": [2, 3], "subit1": [2, 3], "n_subsets_osem": [2, 3], "subit2": [2, 3], "control": [2, 3], "maxit": [2, 3], "retrain": [2, 3], "get_projection_subset": [40, 41, 42, 43, 44, 48], "subset_indic": [], "compute_slice_thickness_ct": [9, 10], "thick": [9, 10], "sometim": [9, 10], "inconsist": [9, 10], "imagepositionpati": [9, 10], "get_aligned_attenuation_map": [11, 80], "get_scanner_lut": [11, 79], "init_volume_nam": 11, "crystal": [11, 23, 24, 30, 32, 35, 79, 80], "final_volume_nam": 11, "world": 11, "mean_interaction_depth": [11, 79], "return_info": 11, "lookup": [11, 13, 30, 32, 35, 40, 41, 68, 79, 80], "tabl": [11, 13, 30, 32, 35, 40, 41, 68, 79, 80], "id": [11, 13, 18, 21, 30, 32, 35, 40, 41, 79, 80], "mac": [11, 79], "geometri": [11, 68, 79], "fate": [], "lowest": 11, "level": 11, "highest": 11, "interact": [11, 79, 80], "get_n_compon": 11, "mac_fil": 11, "gantri": 11, "rsector": 11, "submodul": 11, "macro": [11, 68, 79], "get_detector_id": [11, 13, 79, 80], "tof": [11, 13, 18, 21, 30, 31, 32, 35, 79, 80], "tof_bin_edg": [11, 18, 21, 79], "substr": 11, "coincid": [11, 18, 21, 30, 32, 35, 79], "same_source_po": [11, 79], "root": [11, 68, 79], "get_radiu": 11, "detector_id": [11, 30, 32, 35, 79, 80], "scanner_lut": [11, 30, 32, 35, 79, 80], "get_tabl": 11, "det_id": 11, "crystal1id": 11, "crystal2id": 11, "submoduleid": 11, "moduleid": 11, "rsectorid": 11, "fo": 11, "symmetri": [11, 30, 31, 35], "eta": [11, 40, 41, 79, 80], "get_eta_cylinder_calibr": [11, 79], "cylinder_radiu": [11, 79], "calibr": [11, 79], "cylindr": [11, 79], "shell": [11, 79], "remove_events_out_of_bound": [11, 79, 80], "reconstruc": 11, "etsi": [12, 80], "earli": 12, "stage": 12, "offici": 12, "com": [12, 79], "etsin": [12, 80], "prddefinit": 12, "yardl": [12, 14], "read_prd": 12, "etsihack": 12, "lmsimrecon": 12, "petsird_fil": 13, "read_tof": [13, 80], "read_energi": [13, 80], "time_block_id": [13, 80], "return_head": [13, 80], "get_scanner_lut_from_head": [13, 80], "physic": 13, "get_tof_meta_from_head": [13, 80], "n_sigma": [13, 30, 31, 35, 54, 55, 79], "flight": [13, 30, 31, 32, 35, 40, 41, 68, 79, 80], "pettofmeta": [13, 30, 31, 32, 35, 79], "magic_byt": 14, "current_binary_format_vers": 14, "int8_min": [14, 16], "int8_max": [14, 16], "uint8_max": [14, 16], "int16_min": [14, 16], "int16_max": [14, 16], "uint16_max": [14, 16], "int32_min": [14, 16], "int32_max": [14, 16], "uint32_max": [14, 16], "int64_min": [14, 16], "int64_max": [14, 16], "uint64_max": [14, 16], "binaryprotocolwrit": [14, 17, 18], "stream": [14, 16, 17, 18, 19], "schema": [14, 16, 18, 20], "union": [14, 15, 16, 17, 18, 19, 22], "binaryio": [14, 17, 18], "close": [14, 16, 18, 20], "_end_stream": [14, 16, 18, 20], "binaryprotocolread": [14, 17, 18], "expected_schema": 14, "bufferedread": [14, 16, 17, 18, 19], "bytesio": [14, 17, 18], "codedoutputstream": [14, 17], "buffer_s": 14, "65536": 14, "ensure_capac": 14, "flush": 14, "formatt": 14, "arg": 14, "struct": 14, "write_byt": 14, "bytearrai": 14, "write_bytes_directli": 14, "memoryview": 14, "write_byte_no_check": 14, "write_unsigned_varint": 14, "uint8": [14, 16, 18, 22], "uint16": [14, 16, 18, 22], "uint32": [14, 16, 18, 21, 22], "uint64": [14, 16, 18, 22], "zigzag_encod": 14, "int8": [14, 16, 18, 22], "int16": [14, 16, 18, 22], "int32": [14, 16, 18, 22], "int64": [14, 16, 18, 22], "write_signed_varint": 14, "codedinputstream": [14, 17], "ellipsi": [14, 15, 16, 18], "read_byt": 14, "read_unsigned_varint": 14, "zigzag_decod": 14, "read_signed_varint": 14, "read_view": 14, "read_bytearrai": 14, "_fill_buff": 14, "min_count": 14, "t_np": [14, 16], "typeseri": 14, "declar": [14, 16, 17, 19], "parameter": [14, 16, 17, 19], "might": [14, 16, 17, 18, 19, 21], "kt": [14, 16, 17, 19], "vt": [14, 16, 17, 19], "__getitem__": [14, 16, 17, 19], "lookup_nam": [14, 16, 17, 19], "except": [14, 16, 17, 18, 19, 22], "keyerror": [14, 16, 17, 19], "dtypelik": [14, 16], "overall_dtyp": [14, 16], "struct_format_str": 14, "write_numpi": [14, 17], "read_numpi": 14, "is_trivially_serializ": 14, "structseri": 14, "numpy_typ": [14, 16], "format_str": 14, "boolseri": 14, "bool_": [14, 16], "bool_seri": 14, "int8seri": 14, "int8_seri": 14, "uint8seri": 14, "uint8_seri": 14, "int16seri": 14, "int16_seri": 14, "uint16seri": 14, "uint16_seri": 14, "int32seri": 14, "int32_seri": 14, "uint32seri": 14, "uint32_seri": 14, "int64seri": 14, "int64_seri": 14, "uint64seri": 14, "uint64_seri": 14, "sizeseri": 14, "size_seri": 14, "float32seri": 14, "float32_seri": 14, "float64seri": 14, "float64": [14, 16, 18, 22], "float64_seri": 14, "complex32seri": 14, "complexfloat": [14, 18, 22], "complex64": [14, 16], "complexfloat32_seri": 14, "complex64seri": 14, "complexdoubl": [14, 18, 22], "complex128": [14, 16], "complexfloat64_seri": 14, "stringseri": 14, "object_": [14, 16], "string_seri": 14, "epoch_ordinal_dai": 14, "datetime_days_dtyp": 14, "dateseri": 14, "datetim": [14, 16, 18, 21, 22], "datetime64": [14, 16, 18, 22], "date_seri": 14, "timedelta_nanoseconds_dtyp": 14, "timeseri": 14, "timedelta64": [14, 16, 18, 22], "time_seri": 14, "datetime_nanoseconds_dtyp": 14, "epoch_datetim": 14, "datetimeseri": 14, "datetime_seri": 14, "noneseri": 14, "none_seri": 14, "tenum": [14, 16], "enumseri": 14, "integer_seri": 14, "enum_typ": [14, 16], "optionalseri": 14, "element_seri": [14, 16], "void": [14, 16, 17, 19], "unioncaseprotocol": 14, "proto": 14, "meth": 14, "Such": 14, "static": [14, 16, 18, 22], "checker": 14, "recogn": 14, "structur": 14, "subtyp": 14, "duck": 14, "c": [14, 80], "func": 14, "pep": 14, "544": 14, "decor": 14, "runtime_check": 14, "act": 14, "mind": 14, "runtim": 14, "presenc": 14, "signatur": 14, "genproto": 14, "unionseri": 14, "union_typ": [14, 16], "streamseri": 14, "fixedvectorseri": 14, "vectorseri": 14, "tkei": [14, 16], "tkey_np": [14, 16], "tvalu": [14, 16], "tvalue_np": [14, 16], "mapseri": 14, "key_seri": 14, "value_seri": 14, "dict": [14, 15, 16], "ndarrayserializerbas": 14, "ndarrai": [14, 16, 18, 21], "_get_dtype_and_subarray_shap": [14, 16], "_write_data": 14, "_read_data": 14, "_is_current_array_trivially_serializ": 14, "dynamicndarrayseri": 14, "ndarrayseri": 14, "ndim": [14, 16], "fixedndarrayseri": 14, "recordseri": [14, 17], "field_seri": 14, "_write": 14, "_read": [14, 16], "int32_struct": 14, "write_fixed_int32": 14, "read_fixed_int32": 14, "make_get_dtype_func": 15, "dtype_map": 15, "genericalia": 15, "current_ndjson_format_vers": 16, "missing_sentinel": 16, "ndjsonprotocolwrit": [16, 18, 19], "textio": [16, 18, 19], "_write_json_lin": 16, "ndjsonprotocolread": [16, 18, 19], "_read_json_lin": 16, "stepnam": 16, "jsonconvert": [16, 19], "to_json": [16, 19], "numpy_to_json": [16, 19], "from_json": [16, 19], "json_object": [16, 19], "from_json_to_numpi": [16, 19], "supports_non": 16, "boolconvert": 16, "bool_convert": 16, "int8convert": 16, "int8_convert": 16, "uint8convert": 16, "uint8_convert": 16, "int16convert": 16, "int16_convert": 16, "uint16convert": 16, "uint16_convert": 16, "int32convert": 16, "int32_convert": 16, "uint32convert": 16, "uint32_convert": 16, "int64convert": 16, "int64_convert": 16, "uint64convert": 16, "uint64_convert": 16, "sizeconvert": 16, "size_convert": 16, "float32convert": 16, "float32_convert": 16, "float64convert": 16, "float64_convert": 16, "complex32convert": 16, "complex": 16, "complexfloat32_convert": 16, "complex64convert": 16, "complexfloat64_convert": 16, "stringconvert": 16, "string_convert": 16, "dateconvert": 16, "date_convert": 16, "timeconvert": 16, "time_convert": 16, "datetimeconvert": 16, "datetime_convert": 16, "enumconvert": 16, "name_to_valu": 16, "value_to_nam": 16, "tflag": 16, "flagsconvert": 16, "optionalconvert": 16, "element_convert": 16, "unionconvert": 16, "vectorconvert": 16, "fixedvectorconvert": 16, "mapconvert": 16, "key_convert": 16, "value_convert": 16, "ndarrayconverterbas": 16, "check_dtyp": 16, "input_dtyp": 16, "fixedndarrayconvert": 16, "dynamicndarrayconvert": 16, "ndarrayconvert": 16, "binaryprdexperimentwrit": [17, 18], "prdexperimentwriterbas": [17, 18, 19, 20], "writer": [17, 18, 19, 20], "prdexperi": [17, 18, 19, 20], "_write_head": [17, 18, 19, 20], "_write_time_block": [17, 18, 19, 20], "timeblock": [17, 18, 19, 20, 21], "binaryprdexperimentread": [17, 18], "prdexperimentreaderbas": [17, 18, 19, 20], "_read_head": [17, 18, 19, 20], "_read_time_block": [17, 18, 19, 20], "_coincidenceeventseri": 17, "coincidenceev": [17, 18, 19, 21], "_subjectseri": 17, "subject": [17, 18, 19, 21], "_institutionseri": 17, "institut": [17, 18, 19, 21], "_examinformationseri": 17, "examinform": [17, 18, 19, 21], "_detectorseri": 17, "_scannerinformationseri": 17, "scannerinform": [17, 18, 19, 21], "_headerseri": 17, "_timeblockseri": 17, "_timeintervalseri": 17, "timeinterv": [17, 18, 19, 21], "_timeframeinformationseri": 17, "timeframeinform": [17, 18, 19, 21], "_min_numpy_vers": 18, "_parse_vers": 18, "version": [18, 40, 41, 80], "protocolerror": [18, 22], "rais": [18, 22], "contract": [18, 22], "outofrangeenum": [18, 22], "enum": [18, 22], "classmethod": [18, 22], "_missing_": [18, 22], "__eq__": [18, 21, 22], "__hash__": [18, 22], "hash": [18, 22], "__str__": [18, 21, 22], "nanoseconds_from_epoch": [18, 22], "nanosecond": [18, 22], "precis": [18, 22], "utc": [18, 22], "properti": [18, 22], "numpy_valu": [18, 22], "to_datetim": [18, 22], "from_compon": [18, 22], "year": [18, 22], "month": [18, 22], "dai": [18, 22], "hour": [18, 22], "from_datetim": [18, 22], "pars": [18, 22, 79], "nanoseconds_since_midnight": [18, 22], "timezon": [18, 22], "awar": [18, 22], "meant": [18, 22], "wall": [18, 22], "_nanoseconds_per_dai": [18, 22], "from_tim": [18, 22], "structural_equ": [18, 22], "_t": [18, 22], "unioncas": [18, 22], "tag": [18, 22], "detector_1_id": [18, 21], "detector_2_id": [18, 21], "tof_idx": [18, 21], "energy_1_idx": [18, 21], "energy_2_idx": [18, 21], "todo": [18, 21], "too": [18, 21], "sampl": [18, 21, 68, 80], "start_of_acquisit": [18, 21], "exam": [18, 21], "incomplet": [18, 21], "address": [18, 21], "model_nam": [18, 21], "tof_resolut": [18, 21], "energy_bin_edg": [18, 21], "energy_resolution_at_511": [18, 21], "listmode_time_block_dur": [18, 21], "stretch": [18, 21], "incom": [18, 21], "durat": [18, 21], "number_of_detector": [18, 21], "number_of_tof_bin": [18, 21], "number_of_energy_bin": [18, 21], "prompt_ev": [18, 21], "delayed_ev": [18, 21], "listmodetimeblockdur": [18, 21], "startofacquisit": [18, 21], "prompt": [18, 21], "delai": [18, 21], "time_fram": [18, 21], "consecut": [18, 21], "number_of_time_fram": [18, 21], "stop": [18, 21], "millisecond": [18, 21], "get_dtyp": [18, 21], "reader": [18, 20], "__enter__": [18, 20], "__exit__": [18, 20], "exc_typ": [18, 20], "exc": [18, 20], "traceback": [18, 20], "baseexcept": [18, 20], "read_head": [18, 20], "ordin": [18, 20], "read_time_block": [18, 20], "copy_to": [18, 20], "_wrap_iter": [18, 20], "final_st": [18, 20], "_raise_unexpected_st": [18, 20], "actual": [18, 20, 30, 32, 35], "_state_to_method_nam": [18, 20], "state": [18, 20], "ti": [18, 20], "write_head": [18, 20], "write_time_block": [18, 20], "ndjsonprdexperimentread": [18, 19], "ndjsonprdexperimentwrit": [18, 19], "_coincidenceeventconvert": 19, "_subjectconvert": 19, "_institutionconvert": 19, "_examinformationconvert": 19, "_detectorconvert": 19, "_scannerinformationconvert": 19, "_headerconvert": 19, "_timeblockconvert": 19, "_timeintervalconvert": 19, "_timeframeinformationconvert": 19, "_mk_get_dtyp": 21, "intrinsic_resolut": [23, 24], "intrins": [23, 24], "scintil": [23, 24], "ct_output_shap": [23, 24], "apply_affin": [23, 24], "nm": [23, 24], "open_spect_fil": 23, "files_spect": 23, "corrfil": 25, "cor": 25, "get_header_valu": [28, 29], "split_substr": [28, 29], "split_idx": [28, 29], "return_al": [28, 29], "get_attenuation_map_interfil": [28, 29], "petlmprojmeta": [30, 32, 35, 40, 41, 79, 80], "tof_meta": [30, 32, 35, 79, 80], "detector_ids_sensit": [30, 32, 35], "weights_sensit": [30, 32, 35, 79, 80], "valid": [30, 32, 35, 40, 41, 79, 80], "aren": [30, 32, 35], "absenc": [30, 32, 35], "sensitivti": [30, 32, 35, 40, 41], "num_bin": [30, 31, 35], "bin_width": [30, 31, 35], "bin_typ": [30, 31, 35], "uncertainti": [30, 31, 35], "evenli": [30, 31, 35], "petlmsystemmatrix": [40, 41, 79, 80], "n_split": [40, 41, 79, 80], "approxim": [40, 41], "int_": [40, 41], "incorpor": [40, 41, 80], "joseph3d": [40, 41], "meadata": [40, 41], "regard": [40, 41], "split": [40, 41], "handl": [40, 41], "set_n_subset": [40, 41, 42, 43, 44, 48], "subset_idx": [40, 41, 42, 43, 44, 45, 46, 48], "subsampl": [40, 41, 42, 43], "lm": [40, 41, 80], "get_weighting_subset": [40, 41, 42, 43], "reduc": [40, 41, 42, 43], "_m": [40, 41], "compute_atteunation_probability_project": [40, 41], "idx": [40, 41], "compute_sens_factor": [40, 41], "compute_normalization_factor": [40, 41, 42, 43, 44, 45, 46, 48], "backproject": [40, 41], "trace": [40, 41, 79], "t_m": [42, 43, 45, 46], "extendedsystemmatrix": [44, 45, 47, 48], "system_matric": [44, 45, 47, 48], "sum_n": [44, 48], "v_n": [44, 48], "b_n": [44, 48], "h_n": [44, 48], "a_n": [44, 48], "n_gate": [44, 48], "motionsystemmatrix": [45, 47], "motion_transform": [45, 47], "assume_pad": [49, 51, 52], "compute_average_prob_matrix": [49, 51], "truncat": [54, 55], "rotationtransform": [55, 58], "dvfmotiontransform": [55, 57], "dvf_forward": [55, 57], "dvf_backward": [55, 57], "_get_vol_ratio": [55, 57], "dvf": [55, 57], "_get_old_coordin": [55, 57], "_get_new_coordin": [55, 57], "old_coordin": [55, 57], "old": [55, 57], "deform": [55, 57], "_apply_dvf": [55, 57], "vol_ratio": [55, 57], "mr": 68, "brain": 68, "mmr": 68, "550": [68, 79], "t1": 68, "contrast": 68, "million": 68, "4it20ss": 68, "35": 68, "80it": 68, "1ss": 68, "100it": 68, "0x7f0e4823aab0": 76, "pytomo_install_test": 77, "504": 77, "3526": 77, "gain": 79, "email": 79, "lukepolson": 79, "outlook": 79, "nibabel": [79, 80], "nib": [79, 80], "pet_mri_scan": 79, "slightli": [79, 80], "geomtric": 79, "everywher": 79, "thin": 79, "part": 79, "macro_path": 79, "normalization_path": 79, "normalization_scan": 79, "mmr_norm_": 79, "320": 79, "mmr_geometri": 79, "norm_factor_test": 79, "npy": [79, 80], "load": [79, 80], "acquir": 79, "awhil": 79, "speed_of_light": 79, "fwhm_tof_resolut": 79, "scanner_diamet": 79, "348": 79, "num_tof_bin": 79, "125": 79, "gate_simul": 79, "no_atten": 79, "96": 79, "tof_bin_width": 79, "recon_algorithm": 79, "nifit": 79, "ey": [79, 80], "recon_nib": 79, "nifti1imag": [79, 80], "petgate_example_recon": 79, "nii": [79, 80], "offer": 80, "advoc": 80, "goal": 80, "electr": 80, "canon": 80, "positrigo": 80, "synchropet": 80, "strongli": 80, "emphas": 80, "progress": 80, "continu": 80, "evolut": 80, "hackathon": 80, "demonstr": 80, "caveat": 80, "yet": 80, "formul": 80, "petsird_tutori": 80, "petsird_path": 80, "miec_etsipetscanner_1": 80, "eta_path": 80, "proj_meta_nontof": 80, "proj_meta_tof": 80, "home": 80, "gpuvmadm": 80, "notebook_test": 80, "etsipet_acmap_iec_10cmradiu": 80, "hv": 80, "4mm": 80, "system_matrix_nontof": 80, "system_matrix_tof": 80, "Of": 80, "observ": 80, "record": 80, "recon_algorithm_nontof": 80, "recon_algorithm_tof": 80, "recon_tof": 80, "recon_nontof": 80, "slc": 80, "29": 80, "nifti": 80, "recon_tof_nib": 80, "bsrem_nopsf_tof": 80, "recon_nontof_nib": 80, "bsrem_nopsf_nontof": 80, "skew": 80, "0x7f39df2a6150": 81, "0x7f39df1f9250": 81, "1248503046423388": 81, "comparison": 81, "0x7feea7bdead0": 83, "0x7feea5951e50": 83, "0x7f1eee6aa350": 84, "0x7f1eee6ed790": 84, "0x7f1eed56d790": 84, "instruct": 68, "parallelproj": 68, "_validate_projector": [2, 3], "em_algorithm": [2, 3], "check_if_class_contains_method": [61, 62], "method_nam": [61, 62], "discours": 68, "websit": [], "ask": 68, "feel": 68, "50it": 68, "8ss": 68}, "objects": {"": [[7, 0, 0, "-", "pytomography"]], "pytomography": [[7, 1, 1, "", "__version__"], [2, 0, 0, "-", "algorithms"], [5, 0, 0, "-", "callbacks"], [7, 1, 1, "", "delta"], [7, 1, 1, "", "device"], [7, 1, 1, "", "dtype"], [26, 0, 0, "-", "io"], [35, 0, 0, "-", "metadata"], [37, 0, 0, "-", "priors"], [44, 0, 0, "-", "projectors"], [7, 4, 1, "", "set_device"], [7, 4, 1, "", "set_dtype"], [7, 4, 1, "", "set_verbose"], [53, 0, 0, "-", "transforms"], [61, 0, 0, "-", "utils"], [7, 1, 1, "", "verbose"]], "pytomography.algorithms": [[2, 2, 1, "", "BSREM"], [2, 2, 1, "", "DIPRecon"], [2, 2, 1, "", "FilteredBackProjection"], [2, 2, 1, "", "KEM"], [2, 2, 1, "", "OSEM"], [2, 2, 1, "", "OSEMOSL"], [2, 2, 1, "", "StatisticalIterative"], [1, 0, 0, "-", "fbp"], [3, 0, 0, "-", "statistical_iterative"]], "pytomography.algorithms.BSREM": [[2, 3, 1, "", "__call__"], [2, 3, 1, "", "_compute_normalization_factors"], [2, 3, 1, "", "_scale_prior_gradient"], [2, 3, 1, "", "_set_recon_name"], [2, 3, 1, "", "_validate_projector"]], "pytomography.algorithms.DIPRecon": [[2, 3, 1, "", "__call__"], [2, 3, 1, "", "_validate_projector"]], "pytomography.algorithms.FilteredBackProjection": [[2, 3, 1, "", "__call__"]], "pytomography.algorithms.KEM": [[2, 3, 1, "", "__call__"], [2, 3, 1, "", "_compute_callback"]], "pytomography.algorithms.OSEM": [[2, 3, 1, "", "_validate_projector"]], "pytomography.algorithms.OSEMOSL": [[2, 3, 1, "", "__call__"], [2, 3, 1, "", "_compute_normalization_factors"], [2, 3, 1, "", "_set_recon_name"], [2, 3, 1, "", "_validate_projector"]], "pytomography.algorithms.StatisticalIterative": [[2, 3, 1, "", "__call__"], [2, 3, 1, "", "_compute_callback"], [2, 3, 1, "", "_validate_projector"]], "pytomography.algorithms.fbp": [[1, 2, 1, "", "FilteredBackProjection"]], "pytomography.algorithms.fbp.FilteredBackProjection": [[1, 3, 1, "", "__call__"]], "pytomography.algorithms.statistical_iterative": [[3, 2, 1, "", "BSREM"], [3, 2, 1, "", "DIPRecon"], [3, 2, 1, "", "KEM"], [3, 2, 1, "", "OSEM"], [3, 2, 1, "", "OSEMOSL"], [3, 2, 1, "", "StatisticalIterative"]], "pytomography.algorithms.statistical_iterative.BSREM": [[3, 3, 1, "", "__call__"], [3, 3, 1, "", "_compute_normalization_factors"], [3, 3, 1, "", "_scale_prior_gradient"], [3, 3, 1, "", "_set_recon_name"], [3, 3, 1, "", "_validate_projector"]], "pytomography.algorithms.statistical_iterative.DIPRecon": [[3, 3, 1, "", "__call__"], [3, 3, 1, "", "_validate_projector"]], "pytomography.algorithms.statistical_iterative.KEM": [[3, 3, 1, "", "__call__"], [3, 3, 1, "", "_compute_callback"]], "pytomography.algorithms.statistical_iterative.OSEM": [[3, 3, 1, "", "_validate_projector"]], "pytomography.algorithms.statistical_iterative.OSEMOSL": [[3, 3, 1, "", "__call__"], [3, 3, 1, "", "_compute_normalization_factors"], [3, 3, 1, "", "_set_recon_name"], [3, 3, 1, "", "_validate_projector"]], "pytomography.algorithms.statistical_iterative.StatisticalIterative": [[3, 3, 1, "", "__call__"], [3, 3, 1, "", "_compute_callback"], [3, 3, 1, "", "_validate_projector"]], "pytomography.callbacks": [[5, 2, 1, "", "Callback"], [5, 2, 1, "", "LogLikelihoodCallback"], [4, 0, 0, "-", "callback"], [6, 0, 0, "-", "likelihood"]], "pytomography.callbacks.Callback": [[5, 3, 1, "", "run"]], "pytomography.callbacks.LogLikelihoodCallback": [[5, 3, 1, "", "run"]], "pytomography.callbacks.callback": [[4, 2, 1, "", "Callback"]], "pytomography.callbacks.callback.Callback": [[4, 3, 1, "", "run"]], "pytomography.callbacks.likelihood": [[6, 2, 1, "", "LogLikelihoodCallback"]], "pytomography.callbacks.likelihood.LogLikelihoodCallback": [[6, 3, 1, "", "run"]], "pytomography.io": [[10, 0, 0, "-", "CT"], [12, 0, 0, "-", "PET"], [24, 0, 0, "-", "SPECT"], [28, 0, 0, "-", "shared"]], "pytomography.io.CT": [[8, 0, 0, "-", "attenuation_map"], [10, 4, 1, "", "compute_max_slice_loc_CT"], [10, 4, 1, "", "compute_slice_thickness_CT"], [9, 0, 0, "-", "dicom"], [10, 4, 1, "", "get_HU2mu_conversion"], [10, 4, 1, "", "open_CT_file"]], "pytomography.io.CT.attenuation_map": [[8, 1, 1, "", "DATADIR"], [8, 1, 1, "", "FILE_AIR"], [8, 1, 1, "", "FILE_CBONE"], [8, 1, 1, "", "FILE_WATER"], [8, 4, 1, "", "HU_to_mu"], [8, 4, 1, "", "bilinear_transform"], [8, 4, 1, "", "get_ECT_from_corticalbone_HU"], [8, 4, 1, "", "get_HU2mu_conversion"], [8, 4, 1, "", "get_HU_corticalbone"], [8, 4, 1, "", "get_HU_from_spectrum_interp"], [8, 4, 1, "", "get_HU_mu_curve"], [8, 1, 1, "", "module_path"]], "pytomography.io.CT.dicom": [[9, 4, 1, "", "compute_max_slice_loc_CT"], [9, 4, 1, "", "compute_slice_thickness_CT"], [9, 4, 1, "", "open_CT_file"]], "pytomography.io.PET": [[11, 0, 0, "-", "gate"], [13, 0, 0, "-", "petsird"], [18, 0, 0, "-", "prd"]], "pytomography.io.PET.gate": [[11, 4, 1, "", "get_N_components"], [11, 4, 1, "", "get_aligned_attenuation_map"], [11, 4, 1, "", "get_detector_ids"], [11, 4, 1, "", "get_eta_cylinder_calibration"], [11, 4, 1, "", "get_radius"], [11, 4, 1, "", "get_scanner_LUT"], [11, 4, 1, "", "get_table"], [11, 4, 1, "", "remove_events_out_of_bounds"]], "pytomography.io.PET.petsird": [[13, 4, 1, "", "get_TOF_meta_from_header"], [13, 4, 1, "", "get_detector_ids"], [13, 4, 1, "", "get_scanner_LUT_from_header"]], "pytomography.io.PET.prd": [[18, 2, 1, "", "BinaryPrdExperimentReader"], [18, 2, 1, "", "BinaryPrdExperimentWriter"], [18, 2, 1, "", "CoincidenceEvent"], [18, 1, 1, "", "ComplexDouble"], [18, 1, 1, "", "ComplexFloat"], [18, 2, 1, "", "DateTime"], [18, 2, 1, "", "Detector"], [18, 2, 1, "", "ExamInformation"], [18, 1, 1, "", "Float32"], [18, 1, 1, "", "Float64"], [18, 2, 1, "", "Header"], [18, 2, 1, "", "Institution"], [18, 1, 1, "", "Int16"], [18, 1, 1, "", "Int32"], [18, 1, 1, "", "Int64"], [18, 1, 1, "", "Int8"], [18, 2, 1, "", "NDJsonPrdExperimentReader"], [18, 2, 1, "", "NDJsonPrdExperimentWriter"], [18, 2, 1, "", "OutOfRangeEnum"], [18, 2, 1, "", "PrdExperimentReaderBase"], [18, 2, 1, "", "PrdExperimentWriterBase"], [18, 7, 1, "", "ProtocolError"], [18, 2, 1, "", "ScannerInformation"], [18, 1, 1, "", "Size"], [18, 2, 1, "", "Subject"], [18, 2, 1, "", "Time"], [18, 2, 1, "", "TimeBlock"], [18, 2, 1, "", "TimeFrameInformation"], [18, 2, 1, "", "TimeInterval"], [18, 1, 1, "", "UInt16"], [18, 1, 1, "", "UInt32"], [18, 1, 1, "", "UInt64"], [18, 1, 1, "", "UInt8"], [18, 2, 1, "", "UnionCase"], [18, 1, 1, "", "_MIN_NUMPY_VERSION"], [18, 1, 1, "", "_T"], [14, 0, 0, "-", "_binary"], [15, 0, 0, "-", "_dtypes"], [16, 0, 0, "-", "_ndjson"], [18, 4, 1, "", "_parse_version"], [17, 0, 0, "-", "binary"], [18, 1, 1, "", "get_dtype"], [19, 0, 0, "-", "ndjson"], [20, 0, 0, "-", "protocols"], [18, 4, 1, "", "structural_equal"], [21, 0, 0, "-", "types"], [22, 0, 0, "-", "yardl_types"]], "pytomography.io.PET.prd.BinaryPrdExperimentReader": [[18, 3, 1, "", "_read_header"], [18, 3, 1, "", "_read_time_blocks"]], "pytomography.io.PET.prd.BinaryPrdExperimentWriter": [[18, 3, 1, "", "_write_header"], [18, 3, 1, "", "_write_time_blocks"]], "pytomography.io.PET.prd.CoincidenceEvent": [[18, 3, 1, "", "__eq__"], [18, 3, 1, "", "__repr__"], [18, 3, 1, "", "__str__"], [18, 5, 1, "", "detector_1_id"], [18, 5, 1, "", "detector_2_id"], [18, 5, 1, "", "energy_1_idx"], [18, 5, 1, "", "energy_2_idx"], [18, 5, 1, "", "tof_idx"]], "pytomography.io.PET.prd.DateTime": [[18, 3, 1, "", "__eq__"], [18, 3, 1, "", "__hash__"], [18, 3, 1, "", "__repr__"], [18, 3, 1, "", "__str__"], [18, 3, 1, "", "from_components"], [18, 3, 1, "", "from_datetime"], [18, 3, 1, "", "now"], [18, 6, 1, "", "numpy_value"], [18, 3, 1, "", "parse"], [18, 3, 1, "", "to_datetime"]], "pytomography.io.PET.prd.Detector": [[18, 3, 1, "", "__eq__"], [18, 3, 1, "", "__repr__"], [18, 3, 1, "", "__str__"], [18, 5, 1, "", "id"], [18, 5, 1, "", "x"], [18, 5, 1, "", "y"], [18, 5, 1, "", "z"]], "pytomography.io.PET.prd.ExamInformation": [[18, 3, 1, "", "__eq__"], [18, 3, 1, "", "__repr__"], [18, 3, 1, "", "__str__"], [18, 5, 1, "", "institution"], [18, 5, 1, "", "protocol"], [18, 5, 1, "", "start_of_acquisition"], [18, 5, 1, "", "subject"]], "pytomography.io.PET.prd.Header": [[18, 3, 1, "", "__eq__"], [18, 3, 1, "", "__repr__"], [18, 3, 1, "", "__str__"], [18, 5, 1, "", "exam"], [18, 5, 1, "", "scanner"]], "pytomography.io.PET.prd.Institution": [[18, 3, 1, "", "__eq__"], [18, 3, 1, "", "__repr__"], [18, 3, 1, "", "__str__"], [18, 5, 1, "", "address"], [18, 5, 1, "", "name"]], "pytomography.io.PET.prd.NDJsonPrdExperimentReader": [[18, 3, 1, "", "_read_header"], [18, 3, 1, "", "_read_time_blocks"]], "pytomography.io.PET.prd.NDJsonPrdExperimentWriter": [[18, 3, 1, "", "_write_header"], [18, 3, 1, "", "_write_time_blocks"]], "pytomography.io.PET.prd.OutOfRangeEnum": [[18, 3, 1, "", "__eq__"], [18, 3, 1, "", "__hash__"], [18, 3, 1, "", "__repr__"], [18, 3, 1, "", "__str__"], [18, 3, 1, "", "_missing_"]], "pytomography.io.PET.prd.PrdExperimentReaderBase": [[18, 5, 1, "", "T"], [18, 3, 1, "", "__enter__"], [18, 3, 1, "", "__exit__"], [18, 3, 1, "", "_raise_unexpected_state"], [18, 3, 1, "", "_read_header"], [18, 3, 1, "", "_read_time_blocks"], [18, 3, 1, "", "_state_to_method_name"], [18, 3, 1, "", "_wrap_iterable"], [18, 3, 1, "", "close"], [18, 3, 1, "", "copy_to"], [18, 3, 1, "", "read_header"], [18, 3, 1, "", "read_time_blocks"], [18, 5, 1, "", "schema"]], "pytomography.io.PET.prd.PrdExperimentWriterBase": [[18, 3, 1, "", "__enter__"], [18, 3, 1, "", "__exit__"], [18, 3, 1, "", "_end_stream"], [18, 3, 1, "", "_raise_unexpected_state"], [18, 3, 1, "", "_state_to_method_name"], [18, 3, 1, "", "_write_header"], [18, 3, 1, "", "_write_time_blocks"], [18, 3, 1, "", "close"], [18, 5, 1, "", "schema"], [18, 3, 1, "", "write_header"], [18, 3, 1, "", "write_time_blocks"]], "pytomography.io.PET.prd.ScannerInformation": [[18, 3, 1, "", "__eq__"], [18, 3, 1, "", "__repr__"], [18, 3, 1, "", "__str__"], [18, 5, 1, "", "detectors"], [18, 5, 1, "", "energy_bin_edges"], [18, 5, 1, "", "energy_resolution_at_511"], [18, 5, 1, "", "listmode_time_block_duration"], [18, 5, 1, "", "model_name"], [18, 3, 1, "", "number_of_detectors"], [18, 3, 1, "", "number_of_energy_bins"], [18, 3, 1, "", "number_of_tof_bins"], [18, 5, 1, "", "tof_bin_edges"], [18, 5, 1, "", "tof_resolution"]], "pytomography.io.PET.prd.Subject": [[18, 3, 1, "", "__eq__"], [18, 3, 1, "", "__repr__"], [18, 3, 1, "", "__str__"], [18, 5, 1, "", "id"], [18, 5, 1, "", "name"]], "pytomography.io.PET.prd.Time": [[18, 5, 1, "", "_NANOSECONDS_PER_DAY"], [18, 3, 1, "", "__eq__"], [18, 3, 1, "", "__repr__"], [18, 3, 1, "", "__str__"], [18, 3, 1, "", "from_components"], [18, 3, 1, "", "from_time"], [18, 6, 1, "", "numpy_value"], [18, 3, 1, "", "parse"]], "pytomography.io.PET.prd.TimeBlock": [[18, 3, 1, "", "__eq__"], [18, 3, 1, "", "__repr__"], [18, 3, 1, "", "__str__"], [18, 5, 1, "", "delayed_events"], [18, 5, 1, "", "id"], [18, 5, 1, "", "prompt_events"]], "pytomography.io.PET.prd.TimeFrameInformation": [[18, 3, 1, "", "__eq__"], [18, 3, 1, "", "__repr__"], [18, 3, 1, "", "__str__"], [18, 3, 1, "", "number_of_time_frames"], [18, 5, 1, "", "time_frames"]], "pytomography.io.PET.prd.TimeInterval": [[18, 3, 1, "", "__eq__"], [18, 3, 1, "", "__repr__"], [18, 3, 1, "", "__str__"], [18, 5, 1, "", "start"], [18, 5, 1, "", "stop"]], "pytomography.io.PET.prd.UnionCase": [[18, 3, 1, "", "__eq__"], [18, 3, 1, "", "__repr__"], [18, 3, 1, "", "__str__"], [18, 5, 1, "", "index"], [18, 5, 1, "", "tag"]], "pytomography.io.PET.prd._binary": [[14, 2, 1, "", "BinaryProtocolReader"], [14, 2, 1, "", "BinaryProtocolWriter"], [14, 2, 1, "", "BoolSerializer"], [14, 1, 1, "", "CURRENT_BINARY_FORMAT_VERSION"], [14, 2, 1, "", "CodedInputStream"], [14, 2, 1, "", "CodedOutputStream"], [14, 2, 1, "", "Complex32Serializer"], [14, 2, 1, "", "Complex64Serializer"], [14, 1, 1, "", "DATETIME_DAYS_DTYPE"], [14, 1, 1, "", "DATETIME_NANOSECONDS_DTYPE"], [14, 2, 1, "", "DateSerializer"], [14, 2, 1, "", "DateTimeSerializer"], [14, 2, 1, "", "DynamicNDArraySerializer"], [14, 1, 1, "", "EPOCH_DATETIME"], [14, 1, 1, "", "EPOCH_ORDINAL_DAYS"], [14, 2, 1, "", "EnumSerializer"], [14, 2, 1, "", "FixedNDArraySerializer"], [14, 2, 1, "", "FixedVectorSerializer"], [14, 2, 1, "", "Float32Serializer"], [14, 2, 1, "", "Float64Serializer"], [14, 1, 1, "", "INT16_MAX"], [14, 1, 1, "", "INT16_MIN"], [14, 1, 1, "", "INT32_MAX"], [14, 1, 1, "", "INT32_MIN"], [14, 1, 1, "", "INT64_MAX"], [14, 1, 1, "", "INT64_MIN"], [14, 1, 1, "", "INT8_MAX"], [14, 1, 1, "", "INT8_MIN"], [14, 2, 1, "", "Int16Serializer"], [14, 2, 1, "", "Int32Serializer"], [14, 2, 1, "", "Int64Serializer"], [14, 2, 1, "", "Int8Serializer"], [14, 1, 1, "", "MAGIC_BYTES"], [14, 2, 1, "", "MapSerializer"], [14, 2, 1, "", "NDArraySerializer"], [14, 2, 1, "", "NDArraySerializerBase"], [14, 2, 1, "", "NoneSerializer"], [14, 2, 1, "", "OptionalSerializer"], [14, 2, 1, "", "RecordSerializer"], [14, 2, 1, "", "SizeSerializer"], [14, 2, 1, "", "StreamSerializer"], [14, 2, 1, "", "StringSerializer"], [14, 2, 1, "", "StructSerializer"], [14, 1, 1, "", "T"], [14, 1, 1, "", "TEnum"], [14, 1, 1, "", "TIMEDELTA_NANOSECONDS_DTYPE"], [14, 1, 1, "", "TKey"], [14, 1, 1, "", "TKey_NP"], [14, 1, 1, "", "TValue"], [14, 1, 1, "", "TValue_NP"], [14, 1, 1, "", "T_NP"], [14, 2, 1, "", "TimeSerializer"], [14, 2, 1, "", "TypeSerializer"], [14, 1, 1, "", "UINT16_MAX"], [14, 1, 1, "", "UINT32_MAX"], [14, 1, 1, "", "UINT64_MAX"], [14, 1, 1, "", "UINT8_MAX"], [14, 2, 1, "", "UInt16Serializer"], [14, 2, 1, "", "UInt32Serializer"], [14, 2, 1, "", "UInt64Serializer"], [14, 2, 1, "", "UInt8Serializer"], [14, 2, 1, "", "UnionCaseProtocol"], [14, 2, 1, "", "UnionSerializer"], [14, 2, 1, "", "VectorSerializer"], [14, 1, 1, "", "bool_serializer"], [14, 1, 1, "", "complexfloat32_serializer"], [14, 1, 1, "", "complexfloat64_serializer"], [14, 1, 1, "", "date_serializer"], [14, 1, 1, "", "datetime_serializer"], [14, 1, 1, "", "float32_serializer"], [14, 1, 1, "", "float64_serializer"], [14, 1, 1, "", "int16_serializer"], [14, 1, 1, "", "int32_serializer"], [14, 1, 1, "", "int32_struct"], [14, 1, 1, "", "int64_serializer"], [14, 1, 1, "", "int8_serializer"], [14, 1, 1, "", "none_serializer"], [14, 4, 1, "", "read_fixed_int32"], [14, 1, 1, "", "size_serializer"], [14, 1, 1, "", "string_serializer"], [14, 1, 1, "", "time_serializer"], [14, 1, 1, "", "uint16_serializer"], [14, 1, 1, "", "uint32_serializer"], [14, 1, 1, "", "uint64_serializer"], [14, 1, 1, "", "uint8_serializer"], [14, 4, 1, "", "write_fixed_int32"]], "pytomography.io.PET.prd._binary.BinaryProtocolReader": [[14, 3, 1, "", "close"]], "pytomography.io.PET.prd._binary.BinaryProtocolWriter": [[14, 3, 1, "", "_end_stream"], [14, 3, 1, "", "close"]], "pytomography.io.PET.prd._binary.BoolSerializer": [[14, 3, 1, "", "read"], [14, 3, 1, "", "read_numpy"]], "pytomography.io.PET.prd._binary.CodedInputStream": [[14, 3, 1, "", "_fill_buffer"], [14, 3, 1, "", "close"], [14, 3, 1, "", "read"], [14, 3, 1, "", "read_byte"], [14, 3, 1, "", "read_bytearray"], [14, 3, 1, "", "read_signed_varint"], [14, 3, 1, "", "read_unsigned_varint"], [14, 3, 1, "", "read_view"], [14, 3, 1, "", "zigzag_decode"]], "pytomography.io.PET.prd._binary.CodedOutputStream": [[14, 3, 1, "", "close"], [14, 3, 1, "", "ensure_capacity"], [14, 3, 1, "", "flush"], [14, 3, 1, "", "write"], [14, 3, 1, "", "write_byte_no_check"], [14, 3, 1, "", "write_bytes"], [14, 3, 1, "", "write_bytes_directly"], [14, 3, 1, "", "write_signed_varint"], [14, 3, 1, "", "write_unsigned_varint"], [14, 3, 1, "", "zigzag_encode"]], "pytomography.io.PET.prd._binary.Complex32Serializer": [[14, 3, 1, "", "is_trivially_serializable"], [14, 3, 1, "", "read"], [14, 3, 1, "", "read_numpy"], [14, 3, 1, "", "write"]], "pytomography.io.PET.prd._binary.Complex64Serializer": [[14, 3, 1, "", "is_trivially_serializable"], [14, 3, 1, "", "read"], [14, 3, 1, "", "read_numpy"], [14, 3, 1, "", "write"]], "pytomography.io.PET.prd._binary.DateSerializer": [[14, 3, 1, "", "read"], [14, 3, 1, "", "read_numpy"], [14, 3, 1, "", "write"], [14, 3, 1, "", "write_numpy"]], "pytomography.io.PET.prd._binary.DateTimeSerializer": [[14, 3, 1, "", "read"], [14, 3, 1, "", "read_numpy"], [14, 3, 1, "", "write"], [14, 3, 1, "", "write_numpy"]], "pytomography.io.PET.prd._binary.DynamicNDArraySerializer": [[14, 3, 1, "", "read"], [14, 3, 1, "", "read_numpy"], [14, 3, 1, "", "write"], [14, 3, 1, "", "write_numpy"]], "pytomography.io.PET.prd._binary.EnumSerializer": [[14, 3, 1, "", "is_trivially_serializable"], [14, 3, 1, "", "read"], [14, 3, 1, "", "read_numpy"], [14, 3, 1, "", "write"], [14, 3, 1, "", "write_numpy"]], "pytomography.io.PET.prd._binary.FixedNDArraySerializer": [[14, 3, 1, "", "is_trivially_serializable"], [14, 3, 1, "", "read"], [14, 3, 1, "", "read_numpy"], [14, 3, 1, "", "write"], [14, 3, 1, "", "write_numpy"]], "pytomography.io.PET.prd._binary.FixedVectorSerializer": [[14, 3, 1, "", "is_trivially_serializable"], [14, 3, 1, "", "read"], [14, 3, 1, "", "read_numpy"], [14, 3, 1, "", "write"], [14, 3, 1, "", "write_numpy"]], "pytomography.io.PET.prd._binary.Float32Serializer": [[14, 3, 1, "", "is_trivially_serializable"], [14, 3, 1, "", "read"]], "pytomography.io.PET.prd._binary.Float64Serializer": [[14, 3, 1, "", "is_trivially_serializable"], [14, 3, 1, "", "read"]], "pytomography.io.PET.prd._binary.Int16Serializer": [[14, 3, 1, "", "read"], [14, 3, 1, "", "read_numpy"], [14, 3, 1, "", "write"], [14, 3, 1, "", "write_numpy"]], "pytomography.io.PET.prd._binary.Int32Serializer": [[14, 3, 1, "", "read"], [14, 3, 1, "", "read_numpy"], [14, 3, 1, "", "write"], [14, 3, 1, "", "write_numpy"]], "pytomography.io.PET.prd._binary.Int64Serializer": [[14, 3, 1, "", "read"], [14, 3, 1, "", "read_numpy"], [14, 3, 1, "", "write"], [14, 3, 1, "", "write_numpy"]], "pytomography.io.PET.prd._binary.Int8Serializer": [[14, 3, 1, "", "is_trivially_serializable"], [14, 3, 1, "", "read"]], "pytomography.io.PET.prd._binary.MapSerializer": [[14, 3, 1, "", "read"], [14, 3, 1, "", "read_numpy"], [14, 3, 1, "", "write"], [14, 3, 1, "", "write_numpy"]], "pytomography.io.PET.prd._binary.NDArraySerializer": [[14, 3, 1, "", "read"], [14, 3, 1, "", "read_numpy"], [14, 3, 1, "", "write"], [14, 3, 1, "", "write_numpy"]], "pytomography.io.PET.prd._binary.NDArraySerializerBase": [[14, 3, 1, "", "_get_dtype_and_subarray_shape"], [14, 3, 1, "", "_is_current_array_trivially_serializable"], [14, 3, 1, "", "_read_data"], [14, 3, 1, "", "_write_data"]], "pytomography.io.PET.prd._binary.NoneSerializer": [[14, 3, 1, "", "read"], [14, 3, 1, "", "read_numpy"], [14, 3, 1, "", "write"], [14, 3, 1, "", "write_numpy"]], "pytomography.io.PET.prd._binary.OptionalSerializer": [[14, 3, 1, "", "is_trivially_serializable"], [14, 3, 1, "", "read"], [14, 3, 1, "", "read_numpy"], [14, 3, 1, "", "write"], [14, 3, 1, "", "write_numpy"]], "pytomography.io.PET.prd._binary.RecordSerializer": [[14, 3, 1, "", "_read"], [14, 3, 1, "", "_write"], [14, 3, 1, "", "is_trivially_serializable"], [14, 3, 1, "", "read_numpy"]], "pytomography.io.PET.prd._binary.SizeSerializer": [[14, 3, 1, "", "read"], [14, 3, 1, "", "read_numpy"], [14, 3, 1, "", "write"], [14, 3, 1, "", "write_numpy"]], "pytomography.io.PET.prd._binary.StreamSerializer": [[14, 3, 1, "", "read"], [14, 3, 1, "", "read_numpy"], [14, 3, 1, "", "write"], [14, 3, 1, "", "write_numpy"]], "pytomography.io.PET.prd._binary.StringSerializer": [[14, 3, 1, "", "read"], [14, 3, 1, "", "read_numpy"], [14, 3, 1, "", "write"], [14, 3, 1, "", "write_numpy"]], "pytomography.io.PET.prd._binary.StructSerializer": [[14, 3, 1, "", "read"], [14, 3, 1, "", "read_numpy"], [14, 3, 1, "", "struct_format_str"], [14, 3, 1, "", "write"], [14, 3, 1, "", "write_numpy"]], "pytomography.io.PET.prd._binary.TimeSerializer": [[14, 3, 1, "", "read"], [14, 3, 1, "", "read_numpy"], [14, 3, 1, "", "write"], [14, 3, 1, "", "write_numpy"]], "pytomography.io.PET.prd._binary.TypeSerializer": [[14, 3, 1, "", "is_trivially_serializable"], [14, 3, 1, "", "overall_dtype"], [14, 3, 1, "", "read"], [14, 3, 1, "", "read_numpy"], [14, 3, 1, "", "struct_format_str"], [14, 3, 1, "", "write"], [14, 3, 1, "", "write_numpy"]], "pytomography.io.PET.prd._binary.UInt16Serializer": [[14, 3, 1, "", "read"], [14, 3, 1, "", "read_numpy"], [14, 3, 1, "", "write"], [14, 3, 1, "", "write_numpy"]], "pytomography.io.PET.prd._binary.UInt32Serializer": [[14, 3, 1, "", "read"], [14, 3, 1, "", "read_numpy"], [14, 3, 1, "", "write"], [14, 3, 1, "", "write_numpy"]], "pytomography.io.PET.prd._binary.UInt64Serializer": [[14, 3, 1, "", "read"], [14, 3, 1, "", "read_numpy"], [14, 3, 1, "", "write"], [14, 3, 1, "", "write_numpy"]], "pytomography.io.PET.prd._binary.UInt8Serializer": [[14, 3, 1, "", "is_trivially_serializable"], [14, 3, 1, "", "read"]], "pytomography.io.PET.prd._binary.UnionCaseProtocol": [[14, 5, 1, "", "index"], [14, 5, 1, "", "value"]], "pytomography.io.PET.prd._binary.UnionSerializer": [[14, 3, 1, "", "read"], [14, 3, 1, "", "read_numpy"], [14, 3, 1, "", "write"], [14, 3, 1, "", "write_numpy"]], "pytomography.io.PET.prd._binary.VectorSerializer": [[14, 3, 1, "", "read"], [14, 3, 1, "", "read_numpy"], [14, 3, 1, "", "write"], [14, 3, 1, "", "write_numpy"]], "pytomography.io.PET.prd._dtypes": [[15, 4, 1, "", "make_get_dtype_func"]], "pytomography.io.PET.prd._ndjson": [[16, 2, 1, "", "BoolConverter"], [16, 1, 1, "", "CURRENT_NDJSON_FORMAT_VERSION"], [16, 2, 1, "", "Complex32Converter"], [16, 2, 1, "", "Complex64Converter"], [16, 2, 1, "", "DateConverter"], [16, 2, 1, "", "DateTimeConverter"], [16, 2, 1, "", "DynamicNDArrayConverter"], [16, 2, 1, "", "EnumConverter"], [16, 2, 1, "", "FixedNDArrayConverter"], [16, 2, 1, "", "FixedVectorConverter"], [16, 2, 1, "", "FlagsConverter"], [16, 2, 1, "", "Float32Converter"], [16, 2, 1, "", "Float64Converter"], [16, 1, 1, "", "INT16_MAX"], [16, 1, 1, "", "INT16_MIN"], [16, 1, 1, "", "INT32_MAX"], [16, 1, 1, "", "INT32_MIN"], [16, 1, 1, "", "INT64_MAX"], [16, 1, 1, "", "INT64_MIN"], [16, 1, 1, "", "INT8_MAX"], [16, 1, 1, "", "INT8_MIN"], [16, 2, 1, "", "Int16Converter"], [16, 2, 1, "", "Int32Converter"], [16, 2, 1, "", "Int64Converter"], [16, 2, 1, "", "Int8Converter"], [16, 2, 1, "", "JsonConverter"], [16, 1, 1, "", "MISSING_SENTINEL"], [16, 2, 1, "", "MapConverter"], [16, 2, 1, "", "NDArrayConverter"], [16, 2, 1, "", "NDArrayConverterBase"], [16, 2, 1, "", "NDJsonProtocolReader"], [16, 2, 1, "", "NDJsonProtocolWriter"], [16, 2, 1, "", "OptionalConverter"], [16, 2, 1, "", "SizeConverter"], [16, 2, 1, "", "StringConverter"], [16, 1, 1, "", "T"], [16, 1, 1, "", "TEnum"], [16, 1, 1, "", "TFlag"], [16, 1, 1, "", "TKey"], [16, 1, 1, "", "TKey_NP"], [16, 1, 1, "", "TValue"], [16, 1, 1, "", "TValue_NP"], [16, 1, 1, "", "T_NP"], [16, 2, 1, "", "TimeConverter"], [16, 1, 1, "", "UINT16_MAX"], [16, 1, 1, "", "UINT32_MAX"], [16, 1, 1, "", "UINT64_MAX"], [16, 1, 1, "", "UINT8_MAX"], [16, 2, 1, "", "UInt16Converter"], [16, 2, 1, "", "UInt32Converter"], [16, 2, 1, "", "UInt64Converter"], [16, 2, 1, "", "UInt8Converter"], [16, 2, 1, "", "UnionConverter"], [16, 2, 1, "", "VectorConverter"], [16, 1, 1, "", "bool_converter"], [16, 1, 1, "", "complexfloat32_converter"], [16, 1, 1, "", "complexfloat64_converter"], [16, 1, 1, "", "date_converter"], [16, 1, 1, "", "datetime_converter"], [16, 1, 1, "", "float32_converter"], [16, 1, 1, "", "float64_converter"], [16, 1, 1, "", "int16_converter"], [16, 1, 1, "", "int32_converter"], [16, 1, 1, "", "int64_converter"], [16, 1, 1, "", "int8_converter"], [16, 1, 1, "", "size_converter"], [16, 1, 1, "", "string_converter"], [16, 1, 1, "", "time_converter"], [16, 1, 1, "", "uint16_converter"], [16, 1, 1, "", "uint32_converter"], [16, 1, 1, "", "uint64_converter"], [16, 1, 1, "", "uint8_converter"]], "pytomography.io.PET.prd._ndjson.BoolConverter": [[16, 3, 1, "", "from_json"], [16, 3, 1, "", "from_json_to_numpy"], [16, 3, 1, "", "numpy_to_json"], [16, 3, 1, "", "to_json"]], "pytomography.io.PET.prd._ndjson.Complex32Converter": [[16, 3, 1, "", "from_json"], [16, 3, 1, "", "from_json_to_numpy"], [16, 3, 1, "", "numpy_to_json"], [16, 3, 1, "", "to_json"]], "pytomography.io.PET.prd._ndjson.Complex64Converter": [[16, 3, 1, "", "from_json"], [16, 3, 1, "", "from_json_to_numpy"], [16, 3, 1, "", "numpy_to_json"], [16, 3, 1, "", "to_json"]], "pytomography.io.PET.prd._ndjson.DateConverter": [[16, 3, 1, "", "from_json"], [16, 3, 1, "", "from_json_to_numpy"], [16, 3, 1, "", "numpy_to_json"], [16, 3, 1, "", "to_json"]], "pytomography.io.PET.prd._ndjson.DateTimeConverter": [[16, 3, 1, "", "from_json"], [16, 3, 1, "", "from_json_to_numpy"], [16, 3, 1, "", "numpy_to_json"], [16, 3, 1, "", "to_json"]], "pytomography.io.PET.prd._ndjson.DynamicNDArrayConverter": [[16, 3, 1, "", "from_json"], [16, 3, 1, "", "from_json_to_numpy"], [16, 3, 1, "", "numpy_to_json"], [16, 3, 1, "", "to_json"]], "pytomography.io.PET.prd._ndjson.EnumConverter": [[16, 3, 1, "", "from_json"], [16, 3, 1, "", "from_json_to_numpy"], [16, 3, 1, "", "numpy_to_json"], [16, 3, 1, "", "to_json"]], "pytomography.io.PET.prd._ndjson.FixedNDArrayConverter": [[16, 3, 1, "", "from_json"], [16, 3, 1, "", "from_json_to_numpy"], [16, 3, 1, "", "numpy_to_json"], [16, 3, 1, "", "to_json"]], "pytomography.io.PET.prd._ndjson.FixedVectorConverter": [[16, 3, 1, "", "from_json"], [16, 3, 1, "", "from_json_to_numpy"], [16, 3, 1, "", "numpy_to_json"], [16, 3, 1, "", "to_json"]], "pytomography.io.PET.prd._ndjson.FlagsConverter": [[16, 3, 1, "", "from_json"], [16, 3, 1, "", "from_json_to_numpy"], [16, 3, 1, "", "numpy_to_json"], [16, 3, 1, "", "to_json"]], "pytomography.io.PET.prd._ndjson.Float32Converter": [[16, 3, 1, "", "from_json"], [16, 3, 1, "", "from_json_to_numpy"], [16, 3, 1, "", "numpy_to_json"], [16, 3, 1, "", "to_json"]], "pytomography.io.PET.prd._ndjson.Float64Converter": [[16, 3, 1, "", "from_json"], [16, 3, 1, "", "from_json_to_numpy"], [16, 3, 1, "", "numpy_to_json"], [16, 3, 1, "", "to_json"]], "pytomography.io.PET.prd._ndjson.Int16Converter": [[16, 3, 1, "", "from_json"], [16, 3, 1, "", "from_json_to_numpy"], [16, 3, 1, "", "numpy_to_json"], [16, 3, 1, "", "to_json"]], "pytomography.io.PET.prd._ndjson.Int32Converter": [[16, 3, 1, "", "from_json"], [16, 3, 1, "", "from_json_to_numpy"], [16, 3, 1, "", "numpy_to_json"], [16, 3, 1, "", "to_json"]], "pytomography.io.PET.prd._ndjson.Int64Converter": [[16, 3, 1, "", "from_json"], [16, 3, 1, "", "from_json_to_numpy"], [16, 3, 1, "", "numpy_to_json"], [16, 3, 1, "", "to_json"]], "pytomography.io.PET.prd._ndjson.Int8Converter": [[16, 3, 1, "", "from_json"], [16, 3, 1, "", "from_json_to_numpy"], [16, 3, 1, "", "numpy_to_json"], [16, 3, 1, "", "to_json"]], "pytomography.io.PET.prd._ndjson.JsonConverter": [[16, 3, 1, "", "from_json"], [16, 3, 1, "", "from_json_to_numpy"], [16, 3, 1, "", "numpy_to_json"], [16, 3, 1, "", "overall_dtype"], [16, 3, 1, "", "supports_none"], [16, 3, 1, "", "to_json"]], "pytomography.io.PET.prd._ndjson.MapConverter": [[16, 3, 1, "", "from_json"], [16, 3, 1, "", "from_json_to_numpy"], [16, 3, 1, "", "numpy_to_json"], [16, 3, 1, "", "to_json"]], "pytomography.io.PET.prd._ndjson.NDArrayConverter": [[16, 3, 1, "", "from_json"], [16, 3, 1, "", "from_json_to_numpy"], [16, 3, 1, "", "numpy_to_json"], [16, 3, 1, "", "to_json"]], "pytomography.io.PET.prd._ndjson.NDArrayConverterBase": [[16, 3, 1, "", "_get_dtype_and_subarray_shape"], [16, 3, 1, "", "_read"], [16, 3, 1, "", "check_dtype"]], "pytomography.io.PET.prd._ndjson.NDJsonProtocolReader": [[16, 3, 1, "", "_read_json_line"], [16, 3, 1, "", "close"]], "pytomography.io.PET.prd._ndjson.NDJsonProtocolWriter": [[16, 3, 1, "", "_end_stream"], [16, 3, 1, "", "_write_json_line"], [16, 3, 1, "", "close"]], "pytomography.io.PET.prd._ndjson.OptionalConverter": [[16, 3, 1, "", "from_json"], [16, 3, 1, "", "from_json_to_numpy"], [16, 3, 1, "", "numpy_to_json"], [16, 3, 1, "", "supports_none"], [16, 3, 1, "", "to_json"]], "pytomography.io.PET.prd._ndjson.SizeConverter": [[16, 3, 1, "", "from_json"], [16, 3, 1, "", "from_json_to_numpy"], [16, 3, 1, "", "numpy_to_json"], [16, 3, 1, "", "to_json"]], "pytomography.io.PET.prd._ndjson.StringConverter": [[16, 3, 1, "", "from_json"], [16, 3, 1, "", "from_json_to_numpy"], [16, 3, 1, "", "numpy_to_json"], [16, 3, 1, "", "to_json"]], "pytomography.io.PET.prd._ndjson.TimeConverter": [[16, 3, 1, "", "from_json"], [16, 3, 1, "", "from_json_to_numpy"], [16, 3, 1, "", "numpy_to_json"], [16, 3, 1, "", "to_json"]], "pytomography.io.PET.prd._ndjson.UInt16Converter": [[16, 3, 1, "", "from_json"], [16, 3, 1, "", "from_json_to_numpy"], [16, 3, 1, "", "numpy_to_json"], [16, 3, 1, "", "to_json"]], "pytomography.io.PET.prd._ndjson.UInt32Converter": [[16, 3, 1, "", "from_json"], [16, 3, 1, "", "from_json_to_numpy"], [16, 3, 1, "", "numpy_to_json"], [16, 3, 1, "", "to_json"]], "pytomography.io.PET.prd._ndjson.UInt64Converter": [[16, 3, 1, "", "from_json"], [16, 3, 1, "", "from_json_to_numpy"], [16, 3, 1, "", "numpy_to_json"], [16, 3, 1, "", "to_json"]], "pytomography.io.PET.prd._ndjson.UInt8Converter": [[16, 3, 1, "", "from_json"], [16, 3, 1, "", "from_json_to_numpy"], [16, 3, 1, "", "numpy_to_json"], [16, 3, 1, "", "to_json"]], "pytomography.io.PET.prd._ndjson.UnionConverter": [[16, 3, 1, "", "from_json"], [16, 3, 1, "", "from_json_to_numpy"], [16, 3, 1, "", "numpy_to_json"], [16, 3, 1, "", "supports_none"], [16, 3, 1, "", "to_json"]], "pytomography.io.PET.prd._ndjson.VectorConverter": [[16, 3, 1, "", "from_json"], [16, 3, 1, "", "from_json_to_numpy"], [16, 3, 1, "", "numpy_to_json"], [16, 3, 1, "", "to_json"]], "pytomography.io.PET.prd.binary": [[17, 2, 1, "", "BinaryPrdExperimentReader"], [17, 2, 1, "", "BinaryPrdExperimentWriter"], [17, 2, 1, "", "_CoincidenceEventSerializer"], [17, 2, 1, "", "_DetectorSerializer"], [17, 2, 1, "", "_ExamInformationSerializer"], [17, 2, 1, "", "_HeaderSerializer"], [17, 2, 1, "", "_InstitutionSerializer"], [17, 2, 1, "", "_ScannerInformationSerializer"], [17, 2, 1, "", "_SubjectSerializer"], [17, 2, 1, "", "_TimeBlockSerializer"], [17, 2, 1, "", "_TimeFrameInformationSerializer"], [17, 2, 1, "", "_TimeIntervalSerializer"]], "pytomography.io.PET.prd.binary.BinaryPrdExperimentReader": [[17, 3, 1, "", "_read_header"], [17, 3, 1, "", "_read_time_blocks"]], "pytomography.io.PET.prd.binary.BinaryPrdExperimentWriter": [[17, 3, 1, "", "_write_header"], [17, 3, 1, "", "_write_time_blocks"]], "pytomography.io.PET.prd.binary._CoincidenceEventSerializer": [[17, 3, 1, "", "read"], [17, 3, 1, "", "write"], [17, 3, 1, "", "write_numpy"]], "pytomography.io.PET.prd.binary._DetectorSerializer": [[17, 3, 1, "", "read"], [17, 3, 1, "", "write"], [17, 3, 1, "", "write_numpy"]], "pytomography.io.PET.prd.binary._ExamInformationSerializer": [[17, 3, 1, "", "read"], [17, 3, 1, "", "write"], [17, 3, 1, "", "write_numpy"]], "pytomography.io.PET.prd.binary._HeaderSerializer": [[17, 3, 1, "", "read"], [17, 3, 1, "", "write"], [17, 3, 1, "", "write_numpy"]], "pytomography.io.PET.prd.binary._InstitutionSerializer": [[17, 3, 1, "", "read"], [17, 3, 1, "", "write"], [17, 3, 1, "", "write_numpy"]], "pytomography.io.PET.prd.binary._ScannerInformationSerializer": [[17, 3, 1, "", "read"], [17, 3, 1, "", "write"], [17, 3, 1, "", "write_numpy"]], "pytomography.io.PET.prd.binary._SubjectSerializer": [[17, 3, 1, "", "read"], [17, 3, 1, "", "write"], [17, 3, 1, "", "write_numpy"]], "pytomography.io.PET.prd.binary._TimeBlockSerializer": [[17, 3, 1, "", "read"], [17, 3, 1, "", "write"], [17, 3, 1, "", "write_numpy"]], "pytomography.io.PET.prd.binary._TimeFrameInformationSerializer": [[17, 3, 1, "", "read"], [17, 3, 1, "", "write"], [17, 3, 1, "", "write_numpy"]], "pytomography.io.PET.prd.binary._TimeIntervalSerializer": [[17, 3, 1, "", "read"], [17, 3, 1, "", "write"], [17, 3, 1, "", "write_numpy"]], "pytomography.io.PET.prd.ndjson": [[19, 2, 1, "", "NDJsonPrdExperimentReader"], [19, 2, 1, "", "NDJsonPrdExperimentWriter"], [19, 2, 1, "", "_CoincidenceEventConverter"], [19, 2, 1, "", "_DetectorConverter"], [19, 2, 1, "", "_ExamInformationConverter"], [19, 2, 1, "", "_HeaderConverter"], [19, 2, 1, "", "_InstitutionConverter"], [19, 2, 1, "", "_ScannerInformationConverter"], [19, 2, 1, "", "_SubjectConverter"], [19, 2, 1, "", "_TimeBlockConverter"], [19, 2, 1, "", "_TimeFrameInformationConverter"], [19, 2, 1, "", "_TimeIntervalConverter"]], "pytomography.io.PET.prd.ndjson.NDJsonPrdExperimentReader": [[19, 3, 1, "", "_read_header"], [19, 3, 1, "", "_read_time_blocks"]], "pytomography.io.PET.prd.ndjson.NDJsonPrdExperimentWriter": [[19, 3, 1, "", "_write_header"], [19, 3, 1, "", "_write_time_blocks"]], "pytomography.io.PET.prd.ndjson._CoincidenceEventConverter": [[19, 3, 1, "", "from_json"], [19, 3, 1, "", "from_json_to_numpy"], [19, 3, 1, "", "numpy_to_json"], [19, 3, 1, "", "to_json"]], "pytomography.io.PET.prd.ndjson._DetectorConverter": [[19, 3, 1, "", "from_json"], [19, 3, 1, "", "from_json_to_numpy"], [19, 3, 1, "", "numpy_to_json"], [19, 3, 1, "", "to_json"]], "pytomography.io.PET.prd.ndjson._ExamInformationConverter": [[19, 3, 1, "", "from_json"], [19, 3, 1, "", "from_json_to_numpy"], [19, 3, 1, "", "numpy_to_json"], [19, 3, 1, "", "to_json"]], "pytomography.io.PET.prd.ndjson._HeaderConverter": [[19, 3, 1, "", "from_json"], [19, 3, 1, "", "from_json_to_numpy"], [19, 3, 1, "", "numpy_to_json"], [19, 3, 1, "", "to_json"]], "pytomography.io.PET.prd.ndjson._InstitutionConverter": [[19, 3, 1, "", "from_json"], [19, 3, 1, "", "from_json_to_numpy"], [19, 3, 1, "", "numpy_to_json"], [19, 3, 1, "", "to_json"]], "pytomography.io.PET.prd.ndjson._ScannerInformationConverter": [[19, 3, 1, "", "from_json"], [19, 3, 1, "", "from_json_to_numpy"], [19, 3, 1, "", "numpy_to_json"], [19, 3, 1, "", "to_json"]], "pytomography.io.PET.prd.ndjson._SubjectConverter": [[19, 3, 1, "", "from_json"], [19, 3, 1, "", "from_json_to_numpy"], [19, 3, 1, "", "numpy_to_json"], [19, 3, 1, "", "to_json"]], "pytomography.io.PET.prd.ndjson._TimeBlockConverter": [[19, 3, 1, "", "from_json"], [19, 3, 1, "", "from_json_to_numpy"], [19, 3, 1, "", "numpy_to_json"], [19, 3, 1, "", "to_json"]], "pytomography.io.PET.prd.ndjson._TimeFrameInformationConverter": [[19, 3, 1, "", "from_json"], [19, 3, 1, "", "from_json_to_numpy"], [19, 3, 1, "", "numpy_to_json"], [19, 3, 1, "", "to_json"]], "pytomography.io.PET.prd.ndjson._TimeIntervalConverter": [[19, 3, 1, "", "from_json"], [19, 3, 1, "", "from_json_to_numpy"], [19, 3, 1, "", "numpy_to_json"], [19, 3, 1, "", "to_json"]], "pytomography.io.PET.prd.protocols": [[20, 2, 1, "", "PrdExperimentReaderBase"], [20, 2, 1, "", "PrdExperimentWriterBase"]], "pytomography.io.PET.prd.protocols.PrdExperimentReaderBase": [[20, 5, 1, "", "T"], [20, 3, 1, "", "__enter__"], [20, 3, 1, "", "__exit__"], [20, 3, 1, "", "_raise_unexpected_state"], [20, 3, 1, "", "_read_header"], [20, 3, 1, "", "_read_time_blocks"], [20, 3, 1, "", "_state_to_method_name"], [20, 3, 1, "", "_wrap_iterable"], [20, 3, 1, "", "close"], [20, 3, 1, "", "copy_to"], [20, 3, 1, "", "read_header"], [20, 3, 1, "", "read_time_blocks"], [20, 5, 1, "", "schema"]], "pytomography.io.PET.prd.protocols.PrdExperimentWriterBase": [[20, 3, 1, "", "__enter__"], [20, 3, 1, "", "__exit__"], [20, 3, 1, "", "_end_stream"], [20, 3, 1, "", "_raise_unexpected_state"], [20, 3, 1, "", "_state_to_method_name"], [20, 3, 1, "", "_write_header"], [20, 3, 1, "", "_write_time_blocks"], [20, 3, 1, "", "close"], [20, 5, 1, "", "schema"], [20, 3, 1, "", "write_header"], [20, 3, 1, "", "write_time_blocks"]], "pytomography.io.PET.prd.types": [[21, 2, 1, "", "CoincidenceEvent"], [21, 2, 1, "", "Detector"], [21, 2, 1, "", "ExamInformation"], [21, 2, 1, "", "Header"], [21, 2, 1, "", "Institution"], [21, 2, 1, "", "ScannerInformation"], [21, 2, 1, "", "Subject"], [21, 2, 1, "", "TimeBlock"], [21, 2, 1, "", "TimeFrameInformation"], [21, 2, 1, "", "TimeInterval"], [21, 4, 1, "", "_mk_get_dtype"], [21, 1, 1, "", "get_dtype"]], "pytomography.io.PET.prd.types.CoincidenceEvent": [[21, 3, 1, "", "__eq__"], [21, 3, 1, "", "__repr__"], [21, 3, 1, "", "__str__"], [21, 5, 1, "", "detector_1_id"], [21, 5, 1, "", "detector_2_id"], [21, 5, 1, "", "energy_1_idx"], [21, 5, 1, "", "energy_2_idx"], [21, 5, 1, "", "tof_idx"]], "pytomography.io.PET.prd.types.Detector": [[21, 3, 1, "", "__eq__"], [21, 3, 1, "", "__repr__"], [21, 3, 1, "", "__str__"], [21, 5, 1, "", "id"], [21, 5, 1, "", "x"], [21, 5, 1, "", "y"], [21, 5, 1, "", "z"]], "pytomography.io.PET.prd.types.ExamInformation": [[21, 3, 1, "", "__eq__"], [21, 3, 1, "", "__repr__"], [21, 3, 1, "", "__str__"], [21, 5, 1, "", "institution"], [21, 5, 1, "", "protocol"], [21, 5, 1, "", "start_of_acquisition"], [21, 5, 1, "", "subject"]], "pytomography.io.PET.prd.types.Header": [[21, 3, 1, "", "__eq__"], [21, 3, 1, "", "__repr__"], [21, 3, 1, "", "__str__"], [21, 5, 1, "", "exam"], [21, 5, 1, "", "scanner"]], "pytomography.io.PET.prd.types.Institution": [[21, 3, 1, "", "__eq__"], [21, 3, 1, "", "__repr__"], [21, 3, 1, "", "__str__"], [21, 5, 1, "", "address"], [21, 5, 1, "", "name"]], "pytomography.io.PET.prd.types.ScannerInformation": [[21, 3, 1, "", "__eq__"], [21, 3, 1, "", "__repr__"], [21, 3, 1, "", "__str__"], [21, 5, 1, "", "detectors"], [21, 5, 1, "", "energy_bin_edges"], [21, 5, 1, "", "energy_resolution_at_511"], [21, 5, 1, "", "listmode_time_block_duration"], [21, 5, 1, "", "model_name"], [21, 3, 1, "", "number_of_detectors"], [21, 3, 1, "", "number_of_energy_bins"], [21, 3, 1, "", "number_of_tof_bins"], [21, 5, 1, "", "tof_bin_edges"], [21, 5, 1, "", "tof_resolution"]], "pytomography.io.PET.prd.types.Subject": [[21, 3, 1, "", "__eq__"], [21, 3, 1, "", "__repr__"], [21, 3, 1, "", "__str__"], [21, 5, 1, "", "id"], [21, 5, 1, "", "name"]], "pytomography.io.PET.prd.types.TimeBlock": [[21, 3, 1, "", "__eq__"], [21, 3, 1, "", "__repr__"], [21, 3, 1, "", "__str__"], [21, 5, 1, "", "delayed_events"], [21, 5, 1, "", "id"], [21, 5, 1, "", "prompt_events"]], "pytomography.io.PET.prd.types.TimeFrameInformation": [[21, 3, 1, "", "__eq__"], [21, 3, 1, "", "__repr__"], [21, 3, 1, "", "__str__"], [21, 3, 1, "", "number_of_time_frames"], [21, 5, 1, "", "time_frames"]], "pytomography.io.PET.prd.types.TimeInterval": [[21, 3, 1, "", "__eq__"], [21, 3, 1, "", "__repr__"], [21, 3, 1, "", "__str__"], [21, 5, 1, "", "start"], [21, 5, 1, "", "stop"]], "pytomography.io.PET.prd.yardl_types": [[22, 1, 1, "", "ComplexDouble"], [22, 1, 1, "", "ComplexFloat"], [22, 2, 1, "", "DateTime"], [22, 1, 1, "", "Float32"], [22, 1, 1, "", "Float64"], [22, 1, 1, "", "Int16"], [22, 1, 1, "", "Int32"], [22, 1, 1, "", "Int64"], [22, 1, 1, "", "Int8"], [22, 2, 1, "", "OutOfRangeEnum"], [22, 7, 1, "", "ProtocolError"], [22, 1, 1, "", "Size"], [22, 2, 1, "", "Time"], [22, 1, 1, "", "UInt16"], [22, 1, 1, "", "UInt32"], [22, 1, 1, "", "UInt64"], [22, 1, 1, "", "UInt8"], [22, 2, 1, "", "UnionCase"], [22, 1, 1, "", "_T"], [22, 4, 1, "", "structural_equal"]], "pytomography.io.PET.prd.yardl_types.DateTime": [[22, 3, 1, "", "__eq__"], [22, 3, 1, "", "__hash__"], [22, 3, 1, "", "__repr__"], [22, 3, 1, "", "__str__"], [22, 3, 1, "", "from_components"], [22, 3, 1, "", "from_datetime"], [22, 3, 1, "", "now"], [22, 6, 1, "", "numpy_value"], [22, 3, 1, "", "parse"], [22, 3, 1, "", "to_datetime"]], "pytomography.io.PET.prd.yardl_types.OutOfRangeEnum": [[22, 3, 1, "", "__eq__"], [22, 3, 1, "", "__hash__"], [22, 3, 1, "", "__repr__"], [22, 3, 1, "", "__str__"], [22, 3, 1, "", "_missing_"]], "pytomography.io.PET.prd.yardl_types.Time": [[22, 5, 1, "", "_NANOSECONDS_PER_DAY"], [22, 3, 1, "", "__eq__"], [22, 3, 1, "", "__repr__"], [22, 3, 1, "", "__str__"], [22, 3, 1, "", "from_components"], [22, 3, 1, "", "from_time"], [22, 6, 1, "", "numpy_value"], [22, 3, 1, "", "parse"]], "pytomography.io.PET.prd.yardl_types.UnionCase": [[22, 3, 1, "", "__eq__"], [22, 3, 1, "", "__repr__"], [22, 3, 1, "", "__str__"], [22, 5, 1, "", "index"], [22, 5, 1, "", "tag"]], "pytomography.io.SPECT": [[24, 4, 1, "", "CT_to_mumap"], [23, 0, 0, "-", "dicom"], [24, 4, 1, "", "get_attenuation_map"], [24, 4, 1, "", "get_attenuation_map_from_CT_slices"], [24, 4, 1, "", "get_attenuation_map_from_file"], [24, 4, 1, "", "get_projections"], [24, 4, 1, "", "get_psfmeta_from_scanner_params"], [24, 4, 1, "", "get_scatter_from_TEW"], [24, 4, 1, "", "open_CT_file"], [25, 0, 0, "-", "simind"]], "pytomography.io.SPECT.dicom": [[23, 4, 1, "", "CT_to_mumap"], [23, 4, 1, "", "_get_affine_CT"], [23, 4, 1, "", "_get_affine_spect_projections"], [23, 4, 1, "", "get_attenuation_map_from_CT_slices"], [23, 4, 1, "", "get_attenuation_map_from_file"], [23, 4, 1, "", "get_metadata"], [23, 4, 1, "", "get_projections"], [23, 4, 1, "", "get_psfmeta_from_scanner_params"], [23, 4, 1, "", "get_scatter_from_TEW"], [23, 4, 1, "", "get_window_width"], [23, 4, 1, "", "open_SPECT_file"], [23, 4, 1, "", "parse_projection_dataset"], [23, 4, 1, "", "save_dcm"], [23, 4, 1, "", "stitch_multibed"]], "pytomography.io.SPECT.simind": [[25, 4, 1, "", "combine_projection_data"], [25, 4, 1, "", "combine_scatter_data_TEW"], [25, 4, 1, "", "get_attenuation_map"], [25, 4, 1, "", "get_metadata"], [25, 4, 1, "", "get_projections"], [25, 4, 1, "", "get_psfmeta_from_header"], [25, 4, 1, "", "get_scatter_from_TEW"], [25, 1, 1, "", "relation_dict"]], "pytomography.io.shared": [[28, 4, 1, "", "create_ds"], [27, 0, 0, "-", "dicom_creation"], [28, 4, 1, "", "get_attenuation_map_interfile"], [28, 4, 1, "", "get_header_value"], [29, 0, 0, "-", "interfile"]], "pytomography.io.shared.dicom_creation": [[27, 4, 1, "", "add_patient_information"], [27, 4, 1, "", "add_required_elements_to_ds"], [27, 4, 1, "", "add_study_and_series_information"], [27, 4, 1, "", "create_ds"], [27, 4, 1, "", "generate_base_dataset"], [27, 4, 1, "", "get_file_meta"]], "pytomography.io.shared.interfile": [[29, 4, 1, "", "get_attenuation_map_interfile"], [29, 4, 1, "", "get_header_value"]], "pytomography.metadata": [[35, 2, 1, "", "ObjectMeta"], [30, 0, 0, "-", "PET"], [35, 2, 1, "", "PETLMProjMeta"], [35, 2, 1, "", "PETTOFMeta"], [35, 2, 1, "", "ProjMeta"], [33, 0, 0, "-", "SPECT"], [35, 2, 1, "", "SPECTObjectMeta"], [35, 2, 1, "", "SPECTPSFMeta"], [35, 2, 1, "", "SPECTProjMeta"], [36, 0, 0, "-", "metadata"]], "pytomography.metadata.ObjectMeta": [[35, 3, 1, "", "__repr__"]], "pytomography.metadata.PET": [[30, 2, 1, "", "PETLMProjMeta"], [30, 2, 1, "", "PETTOFMeta"], [31, 0, 0, "-", "pet_tof_metadata"], [32, 0, 0, "-", "petlm_metadata"]], "pytomography.metadata.PET.pet_tof_metadata": [[31, 2, 1, "", "PETTOFMeta"]], "pytomography.metadata.PET.petlm_metadata": [[32, 2, 1, "", "PETLMProjMeta"]], "pytomography.metadata.ProjMeta": [[35, 3, 1, "", "__repr__"]], "pytomography.metadata.SPECT": [[33, 2, 1, "", "SPECTObjectMeta"], [33, 2, 1, "", "SPECTPSFMeta"], [33, 2, 1, "", "SPECTProjMeta"], [34, 0, 0, "-", "spect_metadata"]], "pytomography.metadata.SPECT.SPECTObjectMeta": [[33, 3, 1, "", "compute_padded_shape"]], "pytomography.metadata.SPECT.SPECTPSFMeta": [[33, 3, 1, "", "__repr__"]], "pytomography.metadata.SPECT.SPECTProjMeta": [[33, 3, 1, "", "compute_padded_shape"]], "pytomography.metadata.SPECT.spect_metadata": [[34, 2, 1, "", "SPECTObjectMeta"], [34, 2, 1, "", "SPECTPSFMeta"], [34, 2, 1, "", "SPECTProjMeta"]], "pytomography.metadata.SPECT.spect_metadata.SPECTObjectMeta": [[34, 3, 1, "", "compute_padded_shape"]], "pytomography.metadata.SPECT.spect_metadata.SPECTPSFMeta": [[34, 3, 1, "", "__repr__"]], "pytomography.metadata.SPECT.spect_metadata.SPECTProjMeta": [[34, 3, 1, "", "compute_padded_shape"]], "pytomography.metadata.SPECTObjectMeta": [[35, 3, 1, "", "compute_padded_shape"]], "pytomography.metadata.SPECTPSFMeta": [[35, 3, 1, "", "__repr__"]], "pytomography.metadata.SPECTProjMeta": [[35, 3, 1, "", "compute_padded_shape"]], "pytomography.metadata.metadata": [[36, 2, 1, "", "ObjectMeta"], [36, 2, 1, "", "ProjMeta"]], "pytomography.metadata.metadata.ObjectMeta": [[36, 3, 1, "", "__repr__"]], "pytomography.metadata.metadata.ProjMeta": [[36, 3, 1, "", "__repr__"]], "pytomography.priors": [[37, 2, 1, "", "AnatomyNeighbourWeight"], [37, 2, 1, "", "EuclideanNeighbourWeight"], [37, 2, 1, "", "LogCoshPrior"], [37, 2, 1, "", "NearestNeighbourPrior"], [37, 2, 1, "", "NeighbourWeight"], [37, 2, 1, "", "Prior"], [37, 2, 1, "", "QuadraticPrior"], [37, 2, 1, "", "RelativeDifferencePrior"], [37, 2, 1, "", "TopNAnatomyNeighbourWeight"], [38, 0, 0, "-", "nearest_neighbour"], [39, 0, 0, "-", "prior"]], "pytomography.priors.AnatomyNeighbourWeight": [[37, 3, 1, "", "__call__"], [37, 3, 1, "", "set_object_meta"]], "pytomography.priors.EuclideanNeighbourWeight": [[37, 3, 1, "", "__call__"]], "pytomography.priors.NearestNeighbourPrior": [[37, 3, 1, "", "compute_gradient"], [37, 3, 1, "", "compute_prior"], [37, 3, 1, "", "set_object_meta"]], "pytomography.priors.NeighbourWeight": [[37, 3, 1, "", "__call__"], [37, 3, 1, "", "set_object_meta"]], "pytomography.priors.Prior": [[37, 3, 1, "", "compute_gradient"], [37, 3, 1, "", "set_beta_scale"], [37, 3, 1, "", "set_object"], [37, 3, 1, "", "set_object_meta"]], "pytomography.priors.TopNAnatomyNeighbourWeight": [[37, 3, 1, "", "__call__"], [37, 3, 1, "", "compute_inclusion_tensor"], [37, 3, 1, "", "set_object_meta"]], "pytomography.priors.nearest_neighbour": [[38, 2, 1, "", "AnatomyNeighbourWeight"], [38, 2, 1, "", "EuclideanNeighbourWeight"], [38, 2, 1, "", "LogCoshPrior"], [38, 2, 1, "", "NearestNeighbourPrior"], [38, 2, 1, "", "NeighbourWeight"], [38, 2, 1, "", "QuadraticPrior"], [38, 2, 1, "", "RelativeDifferencePrior"], [38, 2, 1, "", "TopNAnatomyNeighbourWeight"]], "pytomography.priors.nearest_neighbour.AnatomyNeighbourWeight": [[38, 3, 1, "", "__call__"], [38, 3, 1, "", "set_object_meta"]], "pytomography.priors.nearest_neighbour.EuclideanNeighbourWeight": [[38, 3, 1, "", "__call__"]], "pytomography.priors.nearest_neighbour.NearestNeighbourPrior": [[38, 3, 1, "", "compute_gradient"], [38, 3, 1, "", "compute_prior"], [38, 3, 1, "", "set_object_meta"]], "pytomography.priors.nearest_neighbour.NeighbourWeight": [[38, 3, 1, "", "__call__"], [38, 3, 1, "", "set_object_meta"]], "pytomography.priors.nearest_neighbour.TopNAnatomyNeighbourWeight": [[38, 3, 1, "", "__call__"], [38, 3, 1, "", "compute_inclusion_tensor"], [38, 3, 1, "", "set_object_meta"]], "pytomography.priors.prior": [[39, 2, 1, "", "Prior"]], "pytomography.priors.prior.Prior": [[39, 3, 1, "", "compute_gradient"], [39, 3, 1, "", "set_beta_scale"], [39, 3, 1, "", "set_object"], [39, 3, 1, "", "set_object_meta"]], "pytomography.projectors": [[44, 2, 1, "", "ExtendedSystemMatrix"], [40, 0, 0, "-", "PET"], [42, 0, 0, "-", "SPECT"], [44, 2, 1, "", "SystemMatrix"], [45, 0, 0, "-", "shared"], [48, 0, 0, "-", "system_matrix"]], "pytomography.projectors.ExtendedSystemMatrix": [[44, 3, 1, "", "backward"], [44, 3, 1, "", "compute_normalization_factor"], [44, 3, 1, "", "forward"], [44, 3, 1, "", "get_projection_subset"], [44, 3, 1, "", "set_n_subsets"]], "pytomography.projectors.PET": [[40, 2, 1, "", "PETLMSystemMatrix"], [41, 0, 0, "-", "petlm_system_matrix"]], "pytomography.projectors.PET.PETLMSystemMatrix": [[40, 3, 1, "", "backward"], [40, 3, 1, "", "compute_atteunation_probability_projection"], [40, 3, 1, "", "compute_normalization_factor"], [40, 3, 1, "", "compute_sens_factor"], [40, 3, 1, "", "forward"], [40, 3, 1, "", "get_projection_subset"], [40, 3, 1, "", "get_weighting_subset"], [40, 3, 1, "", "set_n_subsets"]], "pytomography.projectors.PET.petlm_system_matrix": [[41, 2, 1, "", "PETLMSystemMatrix"]], "pytomography.projectors.PET.petlm_system_matrix.PETLMSystemMatrix": [[41, 3, 1, "", "backward"], [41, 3, 1, "", "compute_atteunation_probability_projection"], [41, 3, 1, "", "compute_normalization_factor"], [41, 3, 1, "", "compute_sens_factor"], [41, 3, 1, "", "forward"], [41, 3, 1, "", "get_projection_subset"], [41, 3, 1, "", "get_weighting_subset"], [41, 3, 1, "", "set_n_subsets"]], "pytomography.projectors.SPECT": [[42, 2, 1, "", "SPECTSystemMatrix"], [42, 2, 1, "", "SPECTSystemMatrixMaskedSegments"], [43, 0, 0, "-", "spect_system_matrix"]], "pytomography.projectors.SPECT.SPECTSystemMatrix": [[42, 3, 1, "", "backward"], [42, 3, 1, "", "compute_normalization_factor"], [42, 3, 1, "", "forward"], [42, 3, 1, "", "get_projection_subset"], [42, 3, 1, "", "get_weighting_subset"], [42, 3, 1, "", "set_n_subsets"]], "pytomography.projectors.SPECT.SPECTSystemMatrixMaskedSegments": [[42, 3, 1, "", "backward"], [42, 3, 1, "", "forward"]], "pytomography.projectors.SPECT.spect_system_matrix": [[43, 2, 1, "", "SPECTSystemMatrix"], [43, 2, 1, "", "SPECTSystemMatrixMaskedSegments"]], "pytomography.projectors.SPECT.spect_system_matrix.SPECTSystemMatrix": [[43, 3, 1, "", "backward"], [43, 3, 1, "", "compute_normalization_factor"], [43, 3, 1, "", "forward"], [43, 3, 1, "", "get_projection_subset"], [43, 3, 1, "", "get_weighting_subset"], [43, 3, 1, "", "set_n_subsets"]], "pytomography.projectors.SPECT.spect_system_matrix.SPECTSystemMatrixMaskedSegments": [[43, 3, 1, "", "backward"], [43, 3, 1, "", "forward"]], "pytomography.projectors.SystemMatrix": [[44, 3, 1, "", "backward"], [44, 3, 1, "", "forward"], [44, 3, 1, "", "get_subset_splits"], [44, 3, 1, "", "initialize_transforms"]], "pytomography.projectors.shared": [[45, 2, 1, "", "KEMSystemMatrix"], [45, 2, 1, "", "MotionSystemMatrix"], [46, 0, 0, "-", "kem_system_matrix"], [47, 0, 0, "-", "motion_correction_system_matrix"]], "pytomography.projectors.shared.KEMSystemMatrix": [[45, 3, 1, "", "backward"], [45, 3, 1, "", "compute_normalization_factor"], [45, 3, 1, "", "forward"]], "pytomography.projectors.shared.kem_system_matrix": [[46, 2, 1, "", "KEMSystemMatrix"]], "pytomography.projectors.shared.kem_system_matrix.KEMSystemMatrix": [[46, 3, 1, "", "backward"], [46, 3, 1, "", "compute_normalization_factor"], [46, 3, 1, "", "forward"]], "pytomography.projectors.shared.motion_correction_system_matrix": [[47, 2, 1, "", "MotionSystemMatrix"]], "pytomography.projectors.system_matrix": [[48, 2, 1, "", "ExtendedSystemMatrix"], [48, 2, 1, "", "SystemMatrix"]], "pytomography.projectors.system_matrix.ExtendedSystemMatrix": [[48, 3, 1, "", "backward"], [48, 3, 1, "", "compute_normalization_factor"], [48, 3, 1, "", "forward"], [48, 3, 1, "", "get_projection_subset"], [48, 3, 1, "", "set_n_subsets"]], "pytomography.projectors.system_matrix.SystemMatrix": [[48, 3, 1, "", "backward"], [48, 3, 1, "", "forward"], [48, 3, 1, "", "get_subset_splits"], [48, 3, 1, "", "initialize_transforms"]], "pytomography.transforms": [[51, 0, 0, "-", "SPECT"], [53, 2, 1, "", "Transform"], [55, 0, 0, "-", "shared"], [59, 0, 0, "-", "transform"]], "pytomography.transforms.SPECT": [[51, 2, 1, "", "CutOffTransform"], [51, 2, 1, "", "SPECTAttenuationTransform"], [51, 2, 1, "", "SPECTPSFTransform"], [49, 0, 0, "-", "attenuation"], [50, 0, 0, "-", "cutoff"], [52, 0, 0, "-", "psf"]], "pytomography.transforms.SPECT.CutOffTransform": [[51, 3, 1, "", "backward"], [51, 3, 1, "", "forward"]], "pytomography.transforms.SPECT.SPECTAttenuationTransform": [[51, 3, 1, "", "backward"], [51, 3, 1, "", "compute_average_prob_matrix"], [51, 3, 1, "", "configure"], [51, 3, 1, "", "forward"]], "pytomography.transforms.SPECT.SPECTPSFTransform": [[51, 3, 1, "", "_apply_psf"], [51, 3, 1, "", "_compute_kernel_size"], [51, 3, 1, "", "_configure_gaussian_model"], [51, 3, 1, "", "_configure_kernel_model"], [51, 3, 1, "", "_configure_manual_net"], [51, 3, 1, "", "_get_sigma"], [51, 3, 1, "", "backward"], [51, 3, 1, "", "configure"], [51, 3, 1, "", "forward"]], "pytomography.transforms.SPECT.attenuation": [[49, 2, 1, "", "SPECTAttenuationTransform"], [49, 4, 1, "", "get_prob_of_detection_matrix"]], "pytomography.transforms.SPECT.attenuation.SPECTAttenuationTransform": [[49, 3, 1, "", "backward"], [49, 3, 1, "", "compute_average_prob_matrix"], [49, 3, 1, "", "configure"], [49, 3, 1, "", "forward"]], "pytomography.transforms.SPECT.cutoff": [[50, 2, 1, "", "CutOffTransform"]], "pytomography.transforms.SPECT.cutoff.CutOffTransform": [[50, 3, 1, "", "backward"], [50, 3, 1, "", "forward"]], "pytomography.transforms.SPECT.psf": [[52, 2, 1, "", "ArbitraryPSFNet"], [52, 2, 1, "", "GaussianBlurNet"], [52, 2, 1, "", "SPECTPSFTransform"], [52, 4, 1, "", "get_1D_PSF_layer"]], "pytomography.transforms.SPECT.psf.ArbitraryPSFNet": [[52, 3, 1, "", "forward"]], "pytomography.transforms.SPECT.psf.GaussianBlurNet": [[52, 3, 1, "", "forward"]], "pytomography.transforms.SPECT.psf.SPECTPSFTransform": [[52, 3, 1, "", "_apply_psf"], [52, 3, 1, "", "_compute_kernel_size"], [52, 3, 1, "", "_configure_gaussian_model"], [52, 3, 1, "", "_configure_kernel_model"], [52, 3, 1, "", "_configure_manual_net"], [52, 3, 1, "", "_get_sigma"], [52, 3, 1, "", "backward"], [52, 3, 1, "", "configure"], [52, 3, 1, "", "forward"]], "pytomography.transforms.Transform": [[53, 3, 1, "", "backward"], [53, 3, 1, "", "configure"], [53, 3, 1, "", "forward"]], "pytomography.transforms.shared": [[55, 2, 1, "", "DVFMotionTransform"], [55, 2, 1, "", "GaussianFilter"], [55, 2, 1, "", "KEMTransform"], [55, 2, 1, "", "RotationTransform"], [54, 0, 0, "-", "filters"], [56, 0, 0, "-", "kem"], [57, 0, 0, "-", "motion"], [58, 0, 0, "-", "spatial"]], "pytomography.transforms.shared.DVFMotionTransform": [[55, 3, 1, "", "_apply_dvf"], [55, 3, 1, "", "_get_new_coordinates"], [55, 3, 1, "", "_get_old_coordinates"], [55, 3, 1, "", "_get_vol_ratio"], [55, 3, 1, "", "backward"], [55, 3, 1, "", "forward"]], "pytomography.transforms.shared.GaussianFilter": [[55, 3, 1, "", "__call__"], [55, 3, 1, "", "_get_kernels"], [55, 3, 1, "", "backward"], [55, 3, 1, "", "configure"], [55, 3, 1, "", "forward"]], "pytomography.transforms.shared.KEMTransform": [[55, 3, 1, "", "backward"], [55, 3, 1, "", "compute_kernel"], [55, 3, 1, "", "configure"], [55, 3, 1, "", "forward"]], "pytomography.transforms.shared.RotationTransform": [[55, 3, 1, "", "backward"], [55, 3, 1, "", "forward"]], "pytomography.transforms.shared.filters": [[54, 2, 1, "", "GaussianFilter"]], "pytomography.transforms.shared.filters.GaussianFilter": [[54, 3, 1, "", "__call__"], [54, 3, 1, "", "_get_kernels"], [54, 3, 1, "", "backward"], [54, 3, 1, "", "configure"], [54, 3, 1, "", "forward"]], "pytomography.transforms.shared.kem": [[56, 2, 1, "", "KEMTransform"]], "pytomography.transforms.shared.kem.KEMTransform": [[56, 3, 1, "", "backward"], [56, 3, 1, "", "compute_kernel"], [56, 3, 1, "", "configure"], [56, 3, 1, "", "forward"]], "pytomography.transforms.shared.motion": [[57, 2, 1, "", "DVFMotionTransform"]], "pytomography.transforms.shared.motion.DVFMotionTransform": [[57, 3, 1, "", "_apply_dvf"], [57, 3, 1, "", "_get_new_coordinates"], [57, 3, 1, "", "_get_old_coordinates"], [57, 3, 1, "", "_get_vol_ratio"], [57, 3, 1, "", "backward"], [57, 3, 1, "", "forward"]], "pytomography.transforms.shared.spatial": [[58, 2, 1, "", "RotationTransform"]], "pytomography.transforms.shared.spatial.RotationTransform": [[58, 3, 1, "", "backward"], [58, 3, 1, "", "forward"]], "pytomography.transforms.transform": [[59, 2, 1, "", "Transform"]], "pytomography.transforms.transform.Transform": [[59, 3, 1, "", "backward"], [59, 3, 1, "", "configure"], [59, 3, 1, "", "forward"]], "pytomography.utils": [[61, 2, 1, "", "HammingFilter"], [61, 2, 1, "", "RampFilter"], [61, 4, 1, "", "check_if_class_contains_method"], [61, 4, 1, "", "compute_TEW"], [61, 4, 1, "", "compute_pad_size"], [61, 4, 1, "", "dual_sqrt_exponential"], [60, 0, 0, "-", "fourier_filters"], [61, 4, 1, "", "get_E_mu_data_from_datasheet"], [61, 4, 1, "", "get_blank_below_above"], [61, 4, 1, "", "get_distance"], [61, 4, 1, "", "get_mu_from_spectrum_interp"], [61, 4, 1, "", "get_object_nearest_neighbour"], [62, 0, 0, "-", "misc"], [63, 0, 0, "-", "nist_data"], [61, 4, 1, "", "pad_object"], [61, 4, 1, "", "pad_object_z"], [61, 4, 1, "", "pad_proj"], [61, 4, 1, "", "print_collimator_parameters"], [61, 4, 1, "", "rev_cumsum"], [61, 4, 1, "", "rotate_detector_z"], [64, 0, 0, "-", "scatter"], [65, 0, 0, "-", "spatial"], [61, 4, 1, "", "unpad_object"], [61, 4, 1, "", "unpad_object_z"], [61, 4, 1, "", "unpad_proj"]], "pytomography.utils.HammingFilter": [[61, 3, 1, "", "__call__"]], "pytomography.utils.RampFilter": [[61, 3, 1, "", "__call__"]], "pytomography.utils.fourier_filters": [[60, 2, 1, "", "HammingFilter"], [60, 2, 1, "", "RampFilter"]], "pytomography.utils.fourier_filters.HammingFilter": [[60, 3, 1, "", "__call__"]], "pytomography.utils.fourier_filters.RampFilter": [[60, 3, 1, "", "__call__"]], "pytomography.utils.misc": [[62, 4, 1, "", "check_if_class_contains_method"], [62, 4, 1, "", "get_blank_below_above"], [62, 4, 1, "", "get_distance"], [62, 4, 1, "", "get_object_nearest_neighbour"], [62, 4, 1, "", "print_collimator_parameters"], [62, 4, 1, "", "rev_cumsum"]], "pytomography.utils.nist_data": [[63, 4, 1, "", "dual_sqrt_exponential"], [63, 4, 1, "", "get_E_mu_data_from_datasheet"], [63, 4, 1, "", "get_mu_from_spectrum_interp"]], "pytomography.utils.scatter": [[64, 4, 1, "", "compute_TEW"]], "pytomography.utils.spatial": [[65, 4, 1, "", "compute_pad_size"], [65, 4, 1, "", "compute_pad_size_padded"], [65, 4, 1, "", "pad_object"], [65, 4, 1, "", "pad_object_z"], [65, 4, 1, "", "pad_proj"], [65, 4, 1, "", "rotate_detector_z"], [65, 4, 1, "", "unpad_object"], [65, 4, 1, "", "unpad_object_z"], [65, 4, 1, "", "unpad_proj"]]}, "objtypes": {"0": "py:module", "1": "py:data", "2": "py:class", "3": "py:method", "4": "py:function", "5": "py:attribute", "6": "py:property", "7": "py:exception"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "data", "Python data"], "2": ["py", "class", "Python class"], "3": ["py", "method", "Python method"], "4": ["py", "function", "Python function"], "5": ["py", "attribute", "Python attribute"], "6": ["py", "property", "Python property"], "7": ["py", "exception", "Python exception"]}, "titleterms": {"api": 0, "refer": 0, "pytomographi": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 68], "algorithm": [1, 2, 3, 69, 76], "fbp": 1, "modul": [1, 3, 4, 6, 8, 9, 11, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 25, 27, 29, 31, 32, 34, 36, 38, 39, 41, 43, 46, 47, 48, 49, 50, 52, 54, 56, 57, 58, 59, 60, 62, 63, 64, 65], "content": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 68], "class": [1, 2, 3, 4, 5, 6, 14, 16, 17, 18, 19, 20, 21, 22, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61], "submodul": [2, 5, 10, 12, 18, 24, 28, 30, 33, 35, 37, 40, 42, 44, 45, 51, 53, 55, 61], "packag": [2, 5, 7, 10, 18, 24, 28, 30, 33, 35, 37, 40, 42, 44, 45, 51, 53, 55, 61], "statistical_it": 3, "callback": [4, 5, 6], "likelihood": 6, "subpackag": [7, 12, 26, 35, 44, 53], "function": [7, 8, 9, 10, 11, 13, 14, 15, 18, 21, 22, 23, 24, 25, 27, 28, 29, 49, 52, 61, 62, 63, 64, 65, 70], "attribut": [7, 8, 14, 16, 18, 21, 22, 25], "io": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29], "ct": [8, 9, 10], "attenuation_map": 8, "dicom": [9, 23, 81], "spect": [23, 24, 25, 33, 34, 42, 43, 49, 50, 51, 52, 67, 69, 83, 85], "simind": [25, 84], "share": [27, 28, 29, 45, 46, 47, 54, 55, 56, 57, 58], "dicom_cr": 27, "metadata": [30, 31, 32, 33, 34, 35, 36], "spect_metadata": 34, "prior": [37, 38, 39, 69], "nearest_neighbour": 38, "projector": [40, 41, 42, 43, 44, 45, 46, 47, 48], "spect_system_matrix": 43, "kem_system_matrix": 46, "system_matrix": 48, "transform": [49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 69, 81], "pet": [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 30, 31, 32, 40, 41, 85], "attenu": [49, 81], "psf": [52, 81], "cutoff": 50, "filter": [54, 82], "kem": [56, 77], "util": [60, 61, 62, 63, 64, 65], "fourier_filt": 60, "misc": [62, 85], "nist_data": 63, "scatter": [64, 69], "spatial": [58, 65], "develop": 66, "": 66, "guid": 66, "extern": 67, "data": [67, 79, 80, 81, 82, 83, 84], "nist": 67, "collim": 67, "featur": 68, "instal": 68, "exampl": [68, 83], "manual": 69, "coordin": 69, "planar": 69, "head": 69, "imag": [69, 82], "datatyp": 69, "object": [69, 81, 82], "project": [69, 82, 83, 84], "mathemat": 69, "notat": 69, "reconstruct": [69, 79, 80, 81, 82, 83, 84], "fundament": 70, "oper": 70, "idea": 70, "The": [70, 76, 82], "rotat": 70, "last": [71, 72, 73, 75], "time": [71, 72, 73, 75], "thi": [71, 72, 73, 75], "evalu": 72, "p": 72, "x": 72, "y": 72, "z": 72, "theta": 72, "bsrem": 76, "preliminari": [76, 77], "osemosl": 78, "part": [81, 83], "1": [81, 82, 83, 84], "open": [81, 83], "2": [81, 82, 83, 84], "model": [81, 82], "system": [81, 82], "matrix": 81, "save": 81, "back": 82, "creat": 82, "case": [82, 84], "obtain": [82, 83], "addit": 82, "quantit": 83, "organ": 83, "mask": 83, "3": 83, "singl": 84, "file": 84, "multipl": 84, "region": 84, "tutori": [68, 85], "gate": [11, 79], "petsird": [13, 80], "prd": [14, 15, 16, 17, 18, 19, 20, 21, 22], "_binari": 14, "_dtype": 15, "_ndjson": 16, "binari": 17, "ndjson": 19, "protocol": 20, "type": 21, "yardl_typ": 22, "interfil": 29, "pet_tof_metadata": 31, "petlm_metadata": 32, "petlm_system_matrix": 41, "motion_correction_system_matrix": 47, "motion": 57, "normal": 79, "comput": 79, "phantom": 79, "listmod": 85, "user": 68, "forum": 68}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.viewcode": 1, "nbsphinx": 4, "sphinx": 57}, "alltitles": {"Developer\u2019s Guide": [[66, "developer-s-guide"]], "External Data": [[67, "external-data"]], "NIST": [[67, "nist"]], "SPECT Collimator Data": [[67, "spect-collimator-data"]], "Manual": [[69, "Manual"]], "Coordinates": [[69, "Coordinates"]], "SPECT Planar Head Imaging": [[69, "SPECT-Planar-Head-Imaging"]], "Datatypes": [[69, "Datatypes"]], "Objects/Projections": [[69, "Objects/Projections"]], "Mathematical Notation": [[69, "Mathematical-Notation"]], "Projections": [[69, "Projections"]], "Transforms": [[69, "Transforms"]], "Reconstruction Algorithms": [[69, "Reconstruction-Algorithms"]], "Scatter": [[69, "Scatter"]], "Priors": [[69, "Priors"]], "Fundamental Operations": [[70, "Fundamental-Operations"]], "Idea": [[70, "Idea"]], "The Rotate Function": [[70, "The-Rotate-Function"]], "Last Time": [[71, "Last-Time"], [72, "Last-Time"], [73, "Last-Time"], [75, "Last-Time"]], "This Time": [[71, "This-Time"], [72, "This-Time"], [73, "This-Time"], [75, "This-Time"]], "Evaluating p(x,y,z,\\theta)": [[72, "Evaluating-p(x,y,z,\\theta)"]], "BSREM": [[76, "BSREM"]], "Preliminaries": [[76, "Preliminaries"], [77, "Preliminaries"]], "The Algorithm": [[76, "The-Algorithm"]], "KEM": [[77, "KEM"]], "OSEMOSL": [[78, "OSEMOSL"]], "Reconstructing GATE Data": [[79, "Reconstructing-GATE-Data"]], "Normalization Computation": [[79, "Normalization-Computation"]], "Phantom Reconstruction": [[79, "Phantom-Reconstruction"]], "Reconstructing PETSIRD Data": [[80, "Reconstructing-PETSIRD-Data"]], "Reconstructing DICOM Data": [[81, "Reconstructing-DICOM-Data"]], "Part 1: Opening Data": [[81, "Part-1:-Opening-Data"]], "Part 2: Modeling": [[81, "Part-2:-Modeling"]], "Attenuation Transform": [[81, "Attenuation-Transform"]], "PSF Modeling": [[81, "PSF-Modeling"]], "System Matrix": [[81, "System-Matrix"]], "Reconstruct the object": [[81, "Reconstruct-the-object"]], "Saving Data": [[81, "Saving-Data"]], "Filtered Back Projection": [[82, "Filtered-Back-Projection"]], "Creating The Object": [[82, "Creating-The-Object"]], "Modeling the Imaging System": [[82, "Modeling-the-Imaging-System"]], "Case 1:": [[82, "Case-1:"]], "Case 2:": [[82, "Case-2:"]], "Obtaining Imaging Data": [[82, "Obtaining-Imaging-Data"]], "Reconstruction": [[82, "Reconstruction"]], "Additional Filtering": [[82, "Additional-Filtering"]], "Quantitative Example": [[83, "Quantitative-Example"]], "Part 1: Open Projection Data": [[83, "Part-1:-Open-Projection-Data"]], "2. Obtain Organ Masks": [[83, "2.-Obtain-Organ-Masks"]], "Part 3: Reconstructing SPECT Data": [[83, "Part-3:-Reconstructing-SPECT-Data"]], "Reconstructing SIMIND Data": [[84, "Reconstructing-SIMIND-Data"]], "Case 1: Single Projection File": [[84, "Case-1:-Single-Projection-File"]], "Case 2: Multiple Regions": [[84, "Case-2:-Multiple-Regions"]], "Tutorials": [[85, "tutorials"], [68, "tutorials"]], "SPECT": [[85, "spect"]], "PET (Listmode)": [[85, "pet-listmode"]], "Misc": [[85, "misc"]], "API Reference": [[0, "api-reference"]], "pytomography.algorithms.fbp": [[1, "module-pytomography.algorithms.fbp"]], "Module Contents": [[1, "module-contents"], [3, "module-contents"], [4, "module-contents"], [6, "module-contents"], [8, "module-contents"], [9, "module-contents"], [11, "module-contents"], [13, "module-contents"], [14, "module-contents"], [15, "module-contents"], [16, "module-contents"], [17, "module-contents"], [19, "module-contents"], [20, "module-contents"], [21, "module-contents"], [22, "module-contents"], [23, "module-contents"], [25, "module-contents"], [27, "module-contents"], [29, "module-contents"], [31, "module-contents"], [32, "module-contents"], [34, "module-contents"], [36, "module-contents"], [38, "module-contents"], [39, "module-contents"], [41, "module-contents"], [43, "module-contents"], [46, "module-contents"], [47, "module-contents"], [48, "module-contents"], [49, "module-contents"], [50, "module-contents"], [52, "module-contents"], [54, "module-contents"], [56, "module-contents"], [57, "module-contents"], [58, "module-contents"], [59, "module-contents"], [60, "module-contents"], [62, "module-contents"], [63, "module-contents"], [64, "module-contents"], [65, "module-contents"]], "Classes": [[1, "classes"], [2, "classes"], [3, "classes"], [4, "classes"], [5, "classes"], [6, "classes"], [14, "classes"], [16, "classes"], [17, "classes"], [18, "classes"], [19, "classes"], [20, "classes"], [21, "classes"], [22, "classes"], [30, "classes"], [31, "classes"], [32, "classes"], [33, "classes"], [34, "classes"], [35, "classes"], [36, "classes"], [37, "classes"], [38, "classes"], [39, "classes"], [40, "classes"], [41, "classes"], [42, "classes"], [43, "classes"], [44, "classes"], [45, "classes"], [46, "classes"], [47, "classes"], [48, "classes"], [49, "classes"], [50, "classes"], [51, "classes"], [52, "classes"], [53, "classes"], [54, "classes"], [55, "classes"], [56, "classes"], [57, "classes"], [58, "classes"], [59, "classes"], [60, "classes"], [61, "classes"]], "pytomography.algorithms": [[2, "module-pytomography.algorithms"]], "Submodules": [[2, "submodules"], [5, "submodules"], [10, "submodules"], [12, "submodules"], [18, "submodules"], [24, "submodules"], [28, "submodules"], [30, "submodules"], [33, "submodules"], [35, "submodules"], [37, "submodules"], [40, "submodules"], [42, "submodules"], [44, "submodules"], [45, "submodules"], [51, "submodules"], [53, "submodules"], [55, "submodules"], [61, "submodules"]], "Package Contents": [[2, "package-contents"], [5, "package-contents"], [7, "package-contents"], [10, "package-contents"], [18, "package-contents"], [24, "package-contents"], [28, "package-contents"], [30, "package-contents"], [33, "package-contents"], [35, "package-contents"], [37, "package-contents"], [40, "package-contents"], [42, "package-contents"], [44, "package-contents"], [45, "package-contents"], [51, "package-contents"], [53, "package-contents"], [55, "package-contents"], [61, "package-contents"]], "pytomography.algorithms.statistical_iterative": [[3, "module-pytomography.algorithms.statistical_iterative"]], "pytomography.callbacks.callback": [[4, "module-pytomography.callbacks.callback"]], "pytomography.callbacks": [[5, "module-pytomography.callbacks"]], "pytomography.callbacks.likelihood": [[6, "module-pytomography.callbacks.likelihood"]], "pytomography": [[7, "module-pytomography"]], "Subpackages": [[7, "subpackages"], [12, "subpackages"], [26, "subpackages"], [35, "subpackages"], [44, "subpackages"], [53, "subpackages"]], "Functions": [[7, "functions"], [8, "functions"], [9, "functions"], [10, "functions"], [11, "functions"], [13, "functions"], [14, "functions"], [15, "functions"], [18, "functions"], [21, "functions"], [22, "functions"], [23, "functions"], [24, "functions"], [25, "functions"], [27, "functions"], [28, "functions"], [29, "functions"], [49, "functions"], [52, "functions"], [61, "functions"], [62, "functions"], [63, "functions"], [64, "functions"], [65, "functions"]], "Attributes": [[7, "attributes"], [8, "attributes"], [14, "attributes"], [16, "attributes"], [18, "attributes"], [21, "attributes"], [22, "attributes"], [25, "attributes"]], "pytomography.io.CT.attenuation_map": [[8, "module-pytomography.io.CT.attenuation_map"]], "pytomography.io.CT.dicom": [[9, "module-pytomography.io.CT.dicom"]], "pytomography.io.CT": [[10, "module-pytomography.io.CT"]], "pytomography.io.PET.gate": [[11, "module-pytomography.io.PET.gate"]], "pytomography.io.PET": [[12, "module-pytomography.io.PET"]], "pytomography.io.PET.petsird": [[13, "module-pytomography.io.PET.petsird"]], "pytomography.io.PET.prd._binary": [[14, "module-pytomography.io.PET.prd._binary"]], "pytomography.io.PET.prd._dtypes": [[15, "module-pytomography.io.PET.prd._dtypes"]], "pytomography.io.PET.prd._ndjson": [[16, "module-pytomography.io.PET.prd._ndjson"]], "pytomography.io.PET.prd.binary": [[17, "module-pytomography.io.PET.prd.binary"]], "pytomography.io.PET.prd": [[18, "module-pytomography.io.PET.prd"]], "pytomography.io.PET.prd.ndjson": [[19, "module-pytomography.io.PET.prd.ndjson"]], "pytomography.io.PET.prd.protocols": [[20, "module-pytomography.io.PET.prd.protocols"]], "pytomography.io.PET.prd.types": [[21, "module-pytomography.io.PET.prd.types"]], "pytomography.io.PET.prd.yardl_types": [[22, "module-pytomography.io.PET.prd.yardl_types"]], "pytomography.io.SPECT.dicom": [[23, "module-pytomography.io.SPECT.dicom"]], "pytomography.io.SPECT": [[24, "module-pytomography.io.SPECT"]], "pytomography.io.SPECT.simind": [[25, "module-pytomography.io.SPECT.simind"]], "pytomography.io": [[26, "module-pytomography.io"]], "pytomography.io.shared.dicom_creation": [[27, "module-pytomography.io.shared.dicom_creation"]], "pytomography.io.shared": [[28, "module-pytomography.io.shared"]], "pytomography.io.shared.interfile": [[29, "module-pytomography.io.shared.interfile"]], "pytomography.metadata.PET": [[30, "module-pytomography.metadata.PET"]], "pytomography.metadata.PET.pet_tof_metadata": [[31, "module-pytomography.metadata.PET.pet_tof_metadata"]], "pytomography.metadata.PET.petlm_metadata": [[32, "module-pytomography.metadata.PET.petlm_metadata"]], "pytomography.metadata.SPECT": [[33, "module-pytomography.metadata.SPECT"]], "pytomography.metadata.SPECT.spect_metadata": [[34, "module-pytomography.metadata.SPECT.spect_metadata"]], "pytomography.metadata": [[35, "module-pytomography.metadata"]], "pytomography.metadata.metadata": [[36, "module-pytomography.metadata.metadata"]], "pytomography.priors": [[37, "module-pytomography.priors"]], "pytomography.priors.nearest_neighbour": [[38, "module-pytomography.priors.nearest_neighbour"]], "pytomography.priors.prior": [[39, "module-pytomography.priors.prior"]], "pytomography.projectors.PET": [[40, "module-pytomography.projectors.PET"]], "pytomography.projectors.PET.petlm_system_matrix": [[41, "module-pytomography.projectors.PET.petlm_system_matrix"]], "pytomography.projectors.SPECT": [[42, "module-pytomography.projectors.SPECT"]], "pytomography.projectors.SPECT.spect_system_matrix": [[43, "module-pytomography.projectors.SPECT.spect_system_matrix"]], "pytomography.projectors": [[44, "module-pytomography.projectors"]], "pytomography.projectors.shared": [[45, "module-pytomography.projectors.shared"]], "pytomography.projectors.shared.kem_system_matrix": [[46, "module-pytomography.projectors.shared.kem_system_matrix"]], "pytomography.projectors.shared.motion_correction_system_matrix": [[47, "module-pytomography.projectors.shared.motion_correction_system_matrix"]], "pytomography.projectors.system_matrix": [[48, "module-pytomography.projectors.system_matrix"]], "pytomography.transforms.SPECT.attenuation": [[49, "module-pytomography.transforms.SPECT.attenuation"]], "pytomography.transforms.SPECT.cutoff": [[50, "module-pytomography.transforms.SPECT.cutoff"]], "pytomography.transforms.SPECT": [[51, "module-pytomography.transforms.SPECT"]], "pytomography.transforms.SPECT.psf": [[52, "module-pytomography.transforms.SPECT.psf"]], "pytomography.transforms": [[53, "module-pytomography.transforms"]], "pytomography.transforms.shared.filters": [[54, "module-pytomography.transforms.shared.filters"]], "pytomography.transforms.shared": [[55, "module-pytomography.transforms.shared"]], "pytomography.transforms.shared.kem": [[56, "module-pytomography.transforms.shared.kem"]], "pytomography.transforms.shared.motion": [[57, "module-pytomography.transforms.shared.motion"]], "pytomography.transforms.shared.spatial": [[58, "module-pytomography.transforms.shared.spatial"]], "pytomography.transforms.transform": [[59, "module-pytomography.transforms.transform"]], "pytomography.utils.fourier_filters": [[60, "module-pytomography.utils.fourier_filters"]], "pytomography.utils": [[61, "module-pytomography.utils"]], "pytomography.utils.misc": [[62, "module-pytomography.utils.misc"]], "pytomography.utils.nist_data": [[63, "module-pytomography.utils.nist_data"]], "pytomography.utils.scatter": [[64, "module-pytomography.utils.scatter"]], "pytomography.utils.spatial": [[65, "module-pytomography.utils.spatial"]], "PyTomography": [[68, "pytomography"]], "Features": [[68, "features"]], "Installation": [[68, "installation"]], "User Forum": [[68, "user-forum"]], "Examples": [[68, "examples"]], "Contents": [[68, "contents"]]}, "indexentries": {"filteredbackprojection (class in pytomography.algorithms.fbp)": [[1, "pytomography.algorithms.fbp.FilteredBackProjection"]], "__call__() (pytomography.algorithms.fbp.filteredbackprojection method)": [[1, "pytomography.algorithms.fbp.FilteredBackProjection.__call__"]], "module": [[1, "module-pytomography.algorithms.fbp"], [2, "module-pytomography.algorithms"], [3, "module-pytomography.algorithms.statistical_iterative"], [4, "module-pytomography.callbacks.callback"], [5, "module-pytomography.callbacks"], [6, "module-pytomography.callbacks.likelihood"], [7, "module-pytomography"], [8, "module-pytomography.io.CT.attenuation_map"], [9, "module-pytomography.io.CT.dicom"], [10, "module-pytomography.io.CT"], [11, "module-pytomography.io.PET.gate"], [12, "module-pytomography.io.PET"], [13, "module-pytomography.io.PET.petsird"], [14, "module-pytomography.io.PET.prd._binary"], [15, "module-pytomography.io.PET.prd._dtypes"], [16, "module-pytomography.io.PET.prd._ndjson"], [17, "module-pytomography.io.PET.prd.binary"], [18, "module-pytomography.io.PET.prd"], [19, "module-pytomography.io.PET.prd.ndjson"], [20, "module-pytomography.io.PET.prd.protocols"], [21, "module-pytomography.io.PET.prd.types"], [22, "module-pytomography.io.PET.prd.yardl_types"], [23, "module-pytomography.io.SPECT.dicom"], [24, "module-pytomography.io.SPECT"], [25, "module-pytomography.io.SPECT.simind"], [26, "module-pytomography.io"], [27, "module-pytomography.io.shared.dicom_creation"], [28, "module-pytomography.io.shared"], [29, "module-pytomography.io.shared.interfile"], [30, "module-pytomography.metadata.PET"], [31, "module-pytomography.metadata.PET.pet_tof_metadata"], [32, "module-pytomography.metadata.PET.petlm_metadata"], [33, "module-pytomography.metadata.SPECT"], [34, "module-pytomography.metadata.SPECT.spect_metadata"], [35, "module-pytomography.metadata"], [36, "module-pytomography.metadata.metadata"], [37, "module-pytomography.priors"], [38, "module-pytomography.priors.nearest_neighbour"], [39, "module-pytomography.priors.prior"], [40, "module-pytomography.projectors.PET"], [41, "module-pytomography.projectors.PET.petlm_system_matrix"], [42, "module-pytomography.projectors.SPECT"], [43, "module-pytomography.projectors.SPECT.spect_system_matrix"], [44, "module-pytomography.projectors"], [45, "module-pytomography.projectors.shared"], [46, "module-pytomography.projectors.shared.kem_system_matrix"], [47, "module-pytomography.projectors.shared.motion_correction_system_matrix"], [48, "module-pytomography.projectors.system_matrix"], [49, "module-pytomography.transforms.SPECT.attenuation"], [50, "module-pytomography.transforms.SPECT.cutoff"], [51, "module-pytomography.transforms.SPECT"], [52, "module-pytomography.transforms.SPECT.psf"], [53, "module-pytomography.transforms"], [54, "module-pytomography.transforms.shared.filters"], [55, "module-pytomography.transforms.shared"], [56, "module-pytomography.transforms.shared.kem"], [57, "module-pytomography.transforms.shared.motion"], [58, "module-pytomography.transforms.shared.spatial"], [59, "module-pytomography.transforms.transform"], [60, "module-pytomography.utils.fourier_filters"], [61, "module-pytomography.utils"], [62, "module-pytomography.utils.misc"], [63, "module-pytomography.utils.nist_data"], [64, "module-pytomography.utils.scatter"], [65, "module-pytomography.utils.spatial"]], "pytomography.algorithms.fbp": [[1, "module-pytomography.algorithms.fbp"]], "bsrem (class in pytomography.algorithms)": [[2, "pytomography.algorithms.BSREM"]], "diprecon (class in pytomography.algorithms)": [[2, "pytomography.algorithms.DIPRecon"]], "filteredbackprojection (class in pytomography.algorithms)": [[2, "pytomography.algorithms.FilteredBackProjection"]], "kem (class in pytomography.algorithms)": [[2, "pytomography.algorithms.KEM"]], "osem (class in pytomography.algorithms)": [[2, "pytomography.algorithms.OSEM"]], "osemosl (class in pytomography.algorithms)": [[2, "pytomography.algorithms.OSEMOSL"]], "statisticaliterative (class in pytomography.algorithms)": [[2, "pytomography.algorithms.StatisticalIterative"]], "__call__() (pytomography.algorithms.bsrem method)": [[2, "pytomography.algorithms.BSREM.__call__"]], "__call__() (pytomography.algorithms.diprecon method)": [[2, "pytomography.algorithms.DIPRecon.__call__"]], "__call__() (pytomography.algorithms.filteredbackprojection method)": [[2, "pytomography.algorithms.FilteredBackProjection.__call__"]], "__call__() (pytomography.algorithms.kem method)": [[2, "pytomography.algorithms.KEM.__call__"]], "__call__() (pytomography.algorithms.osemosl method)": [[2, "pytomography.algorithms.OSEMOSL.__call__"]], "__call__() (pytomography.algorithms.statisticaliterative method)": [[2, "pytomography.algorithms.StatisticalIterative.__call__"]], "_compute_callback() (pytomography.algorithms.kem method)": [[2, "pytomography.algorithms.KEM._compute_callback"]], "_compute_callback() (pytomography.algorithms.statisticaliterative method)": [[2, "pytomography.algorithms.StatisticalIterative._compute_callback"]], "_compute_normalization_factors() (pytomography.algorithms.bsrem method)": [[2, "pytomography.algorithms.BSREM._compute_normalization_factors"]], "_compute_normalization_factors() (pytomography.algorithms.osemosl method)": [[2, "pytomography.algorithms.OSEMOSL._compute_normalization_factors"]], "_scale_prior_gradient() (pytomography.algorithms.bsrem method)": [[2, "pytomography.algorithms.BSREM._scale_prior_gradient"]], "_set_recon_name() (pytomography.algorithms.bsrem method)": [[2, "pytomography.algorithms.BSREM._set_recon_name"]], "_set_recon_name() (pytomography.algorithms.osemosl method)": [[2, "pytomography.algorithms.OSEMOSL._set_recon_name"]], "_validate_projector() (pytomography.algorithms.bsrem method)": [[2, "pytomography.algorithms.BSREM._validate_projector"]], "_validate_projector() (pytomography.algorithms.diprecon method)": [[2, "pytomography.algorithms.DIPRecon._validate_projector"]], "_validate_projector() (pytomography.algorithms.osem method)": [[2, "pytomography.algorithms.OSEM._validate_projector"]], "_validate_projector() (pytomography.algorithms.osemosl method)": [[2, "pytomography.algorithms.OSEMOSL._validate_projector"]], "_validate_projector() (pytomography.algorithms.statisticaliterative method)": [[2, "pytomography.algorithms.StatisticalIterative._validate_projector"]], "pytomography.algorithms": [[2, "module-pytomography.algorithms"]], "bsrem (class in pytomography.algorithms.statistical_iterative)": [[3, "pytomography.algorithms.statistical_iterative.BSREM"]], "diprecon (class in pytomography.algorithms.statistical_iterative)": [[3, "pytomography.algorithms.statistical_iterative.DIPRecon"]], "kem (class in pytomography.algorithms.statistical_iterative)": [[3, "pytomography.algorithms.statistical_iterative.KEM"]], "osem (class in pytomography.algorithms.statistical_iterative)": [[3, "pytomography.algorithms.statistical_iterative.OSEM"]], "osemosl (class in pytomography.algorithms.statistical_iterative)": [[3, "pytomography.algorithms.statistical_iterative.OSEMOSL"]], "statisticaliterative (class in pytomography.algorithms.statistical_iterative)": [[3, "pytomography.algorithms.statistical_iterative.StatisticalIterative"]], "__call__() (pytomography.algorithms.statistical_iterative.bsrem method)": [[3, "pytomography.algorithms.statistical_iterative.BSREM.__call__"]], "__call__() (pytomography.algorithms.statistical_iterative.diprecon method)": [[3, "pytomography.algorithms.statistical_iterative.DIPRecon.__call__"]], "__call__() (pytomography.algorithms.statistical_iterative.kem method)": [[3, "pytomography.algorithms.statistical_iterative.KEM.__call__"]], "__call__() (pytomography.algorithms.statistical_iterative.osemosl method)": [[3, "pytomography.algorithms.statistical_iterative.OSEMOSL.__call__"]], "__call__() (pytomography.algorithms.statistical_iterative.statisticaliterative method)": [[3, "pytomography.algorithms.statistical_iterative.StatisticalIterative.__call__"]], "_compute_callback() (pytomography.algorithms.statistical_iterative.kem method)": [[3, "pytomography.algorithms.statistical_iterative.KEM._compute_callback"]], "_compute_callback() (pytomography.algorithms.statistical_iterative.statisticaliterative method)": [[3, "pytomography.algorithms.statistical_iterative.StatisticalIterative._compute_callback"]], "_compute_normalization_factors() (pytomography.algorithms.statistical_iterative.bsrem method)": [[3, "pytomography.algorithms.statistical_iterative.BSREM._compute_normalization_factors"]], "_compute_normalization_factors() (pytomography.algorithms.statistical_iterative.osemosl method)": [[3, "pytomography.algorithms.statistical_iterative.OSEMOSL._compute_normalization_factors"]], "_scale_prior_gradient() (pytomography.algorithms.statistical_iterative.bsrem method)": [[3, "pytomography.algorithms.statistical_iterative.BSREM._scale_prior_gradient"]], "_set_recon_name() (pytomography.algorithms.statistical_iterative.bsrem method)": [[3, "pytomography.algorithms.statistical_iterative.BSREM._set_recon_name"]], "_set_recon_name() (pytomography.algorithms.statistical_iterative.osemosl method)": [[3, "pytomography.algorithms.statistical_iterative.OSEMOSL._set_recon_name"]], "_validate_projector() (pytomography.algorithms.statistical_iterative.bsrem method)": [[3, "pytomography.algorithms.statistical_iterative.BSREM._validate_projector"]], "_validate_projector() (pytomography.algorithms.statistical_iterative.diprecon method)": [[3, "pytomography.algorithms.statistical_iterative.DIPRecon._validate_projector"]], "_validate_projector() (pytomography.algorithms.statistical_iterative.osem method)": [[3, "pytomography.algorithms.statistical_iterative.OSEM._validate_projector"]], "_validate_projector() (pytomography.algorithms.statistical_iterative.osemosl method)": [[3, "pytomography.algorithms.statistical_iterative.OSEMOSL._validate_projector"]], "_validate_projector() (pytomography.algorithms.statistical_iterative.statisticaliterative method)": [[3, "pytomography.algorithms.statistical_iterative.StatisticalIterative._validate_projector"]], "pytomography.algorithms.statistical_iterative": [[3, "module-pytomography.algorithms.statistical_iterative"]], "callback (class in pytomography.callbacks.callback)": [[4, "pytomography.callbacks.callback.Callback"]], "pytomography.callbacks.callback": [[4, "module-pytomography.callbacks.callback"]], "run() (pytomography.callbacks.callback.callback method)": [[4, "pytomography.callbacks.callback.Callback.run"]], "callback (class in pytomography.callbacks)": [[5, "pytomography.callbacks.Callback"]], "loglikelihoodcallback (class in pytomography.callbacks)": [[5, "pytomography.callbacks.LogLikelihoodCallback"]], "pytomography.callbacks": [[5, "module-pytomography.callbacks"]], "run() (pytomography.callbacks.callback method)": [[5, "pytomography.callbacks.Callback.run"]], "run() (pytomography.callbacks.loglikelihoodcallback method)": [[5, "pytomography.callbacks.LogLikelihoodCallback.run"]], "loglikelihoodcallback (class in pytomography.callbacks.likelihood)": [[6, "pytomography.callbacks.likelihood.LogLikelihoodCallback"]], "pytomography.callbacks.likelihood": [[6, "module-pytomography.callbacks.likelihood"]], "run() (pytomography.callbacks.likelihood.loglikelihoodcallback method)": [[6, "pytomography.callbacks.likelihood.LogLikelihoodCallback.run"]], "__version__ (in module pytomography)": [[7, "pytomography.__version__"]], "delta (in module pytomography)": [[7, "pytomography.delta"]], "device (in module pytomography)": [[7, "pytomography.device"]], "dtype (in module pytomography)": [[7, "pytomography.dtype"]], "pytomography": [[7, "module-pytomography"]], "set_device() (in module pytomography)": [[7, "pytomography.set_device"]], "set_dtype() (in module pytomography)": [[7, "pytomography.set_dtype"]], "set_verbose() (in module pytomography)": [[7, "pytomography.set_verbose"]], "verbose (in module pytomography)": [[7, "pytomography.verbose"]], "datadir (in module pytomography.io.ct.attenuation_map)": [[8, "pytomography.io.CT.attenuation_map.DATADIR"]], "file_air (in module pytomography.io.ct.attenuation_map)": [[8, "pytomography.io.CT.attenuation_map.FILE_AIR"]], "file_cbone (in module pytomography.io.ct.attenuation_map)": [[8, "pytomography.io.CT.attenuation_map.FILE_CBONE"]], "file_water (in module pytomography.io.ct.attenuation_map)": [[8, "pytomography.io.CT.attenuation_map.FILE_WATER"]], "hu_to_mu() (in module pytomography.io.ct.attenuation_map)": [[8, "pytomography.io.CT.attenuation_map.HU_to_mu"]], "bilinear_transform() (in module pytomography.io.ct.attenuation_map)": [[8, "pytomography.io.CT.attenuation_map.bilinear_transform"]], "get_ect_from_corticalbone_hu() (in module pytomography.io.ct.attenuation_map)": [[8, "pytomography.io.CT.attenuation_map.get_ECT_from_corticalbone_HU"]], "get_hu2mu_conversion() (in module pytomography.io.ct.attenuation_map)": [[8, "pytomography.io.CT.attenuation_map.get_HU2mu_conversion"]], "get_hu_corticalbone() (in module pytomography.io.ct.attenuation_map)": [[8, "pytomography.io.CT.attenuation_map.get_HU_corticalbone"]], "get_hu_from_spectrum_interp() (in module pytomography.io.ct.attenuation_map)": [[8, "pytomography.io.CT.attenuation_map.get_HU_from_spectrum_interp"]], "get_hu_mu_curve() (in module pytomography.io.ct.attenuation_map)": [[8, "pytomography.io.CT.attenuation_map.get_HU_mu_curve"]], "module_path (in module pytomography.io.ct.attenuation_map)": [[8, "pytomography.io.CT.attenuation_map.module_path"]], "pytomography.io.ct.attenuation_map": [[8, "module-pytomography.io.CT.attenuation_map"]], "compute_max_slice_loc_ct() (in module pytomography.io.ct.dicom)": [[9, "pytomography.io.CT.dicom.compute_max_slice_loc_CT"]], "compute_slice_thickness_ct() (in module pytomography.io.ct.dicom)": [[9, "pytomography.io.CT.dicom.compute_slice_thickness_CT"]], "open_ct_file() (in module pytomography.io.ct.dicom)": [[9, "pytomography.io.CT.dicom.open_CT_file"]], "pytomography.io.ct.dicom": [[9, "module-pytomography.io.CT.dicom"]], "compute_max_slice_loc_ct() (in module pytomography.io.ct)": [[10, "pytomography.io.CT.compute_max_slice_loc_CT"]], "compute_slice_thickness_ct() (in module pytomography.io.ct)": [[10, "pytomography.io.CT.compute_slice_thickness_CT"]], "get_hu2mu_conversion() (in module pytomography.io.ct)": [[10, "pytomography.io.CT.get_HU2mu_conversion"]], "open_ct_file() (in module pytomography.io.ct)": [[10, "pytomography.io.CT.open_CT_file"]], "pytomography.io.ct": [[10, "module-pytomography.io.CT"]], "get_n_components() (in module pytomography.io.pet.gate)": [[11, "pytomography.io.PET.gate.get_N_components"]], "get_aligned_attenuation_map() (in module pytomography.io.pet.gate)": [[11, "pytomography.io.PET.gate.get_aligned_attenuation_map"]], "get_detector_ids() (in module pytomography.io.pet.gate)": [[11, "pytomography.io.PET.gate.get_detector_ids"]], "get_eta_cylinder_calibration() (in module pytomography.io.pet.gate)": [[11, "pytomography.io.PET.gate.get_eta_cylinder_calibration"]], "get_radius() (in module pytomography.io.pet.gate)": [[11, "pytomography.io.PET.gate.get_radius"]], "get_scanner_lut() (in module pytomography.io.pet.gate)": [[11, "pytomography.io.PET.gate.get_scanner_LUT"]], "get_table() (in module pytomography.io.pet.gate)": [[11, "pytomography.io.PET.gate.get_table"]], "pytomography.io.pet.gate": [[11, "module-pytomography.io.PET.gate"]], "remove_events_out_of_bounds() (in module pytomography.io.pet.gate)": [[11, "pytomography.io.PET.gate.remove_events_out_of_bounds"]], "pytomography.io.pet": [[12, "module-pytomography.io.PET"]], "get_tof_meta_from_header() (in module pytomography.io.pet.petsird)": [[13, "pytomography.io.PET.petsird.get_TOF_meta_from_header"]], "get_detector_ids() (in module pytomography.io.pet.petsird)": [[13, "pytomography.io.PET.petsird.get_detector_ids"]], "get_scanner_lut_from_header() (in module pytomography.io.pet.petsird)": [[13, "pytomography.io.PET.petsird.get_scanner_LUT_from_header"]], "pytomography.io.pet.petsird": [[13, "module-pytomography.io.PET.petsird"]], "binaryprotocolreader (class in pytomography.io.pet.prd._binary)": [[14, "pytomography.io.PET.prd._binary.BinaryProtocolReader"]], "binaryprotocolwriter (class in pytomography.io.pet.prd._binary)": [[14, "pytomography.io.PET.prd._binary.BinaryProtocolWriter"]], "boolserializer (class in pytomography.io.pet.prd._binary)": [[14, "pytomography.io.PET.prd._binary.BoolSerializer"]], "current_binary_format_version (in module pytomography.io.pet.prd._binary)": [[14, "pytomography.io.PET.prd._binary.CURRENT_BINARY_FORMAT_VERSION"]], "codedinputstream (class in pytomography.io.pet.prd._binary)": [[14, "pytomography.io.PET.prd._binary.CodedInputStream"]], "codedoutputstream (class in pytomography.io.pet.prd._binary)": [[14, "pytomography.io.PET.prd._binary.CodedOutputStream"]], "complex32serializer (class in pytomography.io.pet.prd._binary)": [[14, "pytomography.io.PET.prd._binary.Complex32Serializer"]], "complex64serializer (class in pytomography.io.pet.prd._binary)": [[14, "pytomography.io.PET.prd._binary.Complex64Serializer"]], "datetime_days_dtype (in module pytomography.io.pet.prd._binary)": [[14, "pytomography.io.PET.prd._binary.DATETIME_DAYS_DTYPE"]], "datetime_nanoseconds_dtype (in module pytomography.io.pet.prd._binary)": [[14, "pytomography.io.PET.prd._binary.DATETIME_NANOSECONDS_DTYPE"]], "dateserializer (class in pytomography.io.pet.prd._binary)": [[14, "pytomography.io.PET.prd._binary.DateSerializer"]], "datetimeserializer (class in pytomography.io.pet.prd._binary)": [[14, "pytomography.io.PET.prd._binary.DateTimeSerializer"]], "dynamicndarrayserializer (class in pytomography.io.pet.prd._binary)": [[14, "pytomography.io.PET.prd._binary.DynamicNDArraySerializer"]], "epoch_datetime (in module pytomography.io.pet.prd._binary)": [[14, "pytomography.io.PET.prd._binary.EPOCH_DATETIME"]], "epoch_ordinal_days (in module pytomography.io.pet.prd._binary)": [[14, "pytomography.io.PET.prd._binary.EPOCH_ORDINAL_DAYS"]], "enumserializer (class in pytomography.io.pet.prd._binary)": [[14, "pytomography.io.PET.prd._binary.EnumSerializer"]], "fixedndarrayserializer (class in pytomography.io.pet.prd._binary)": [[14, "pytomography.io.PET.prd._binary.FixedNDArraySerializer"]], "fixedvectorserializer (class in pytomography.io.pet.prd._binary)": [[14, "pytomography.io.PET.prd._binary.FixedVectorSerializer"]], "float32serializer (class in pytomography.io.pet.prd._binary)": [[14, "pytomography.io.PET.prd._binary.Float32Serializer"]], "float64serializer (class in pytomography.io.pet.prd._binary)": [[14, "pytomography.io.PET.prd._binary.Float64Serializer"]], "int16_max (in module pytomography.io.pet.prd._binary)": [[14, "pytomography.io.PET.prd._binary.INT16_MAX"]], "int16_min (in module pytomography.io.pet.prd._binary)": [[14, "pytomography.io.PET.prd._binary.INT16_MIN"]], "int32_max (in module pytomography.io.pet.prd._binary)": [[14, "pytomography.io.PET.prd._binary.INT32_MAX"]], "int32_min (in module pytomography.io.pet.prd._binary)": [[14, "pytomography.io.PET.prd._binary.INT32_MIN"]], "int64_max (in module pytomography.io.pet.prd._binary)": [[14, "pytomography.io.PET.prd._binary.INT64_MAX"]], "int64_min (in module pytomography.io.pet.prd._binary)": [[14, "pytomography.io.PET.prd._binary.INT64_MIN"]], "int8_max (in module pytomography.io.pet.prd._binary)": [[14, "pytomography.io.PET.prd._binary.INT8_MAX"]], "int8_min (in module pytomography.io.pet.prd._binary)": [[14, "pytomography.io.PET.prd._binary.INT8_MIN"]], "int16serializer (class in pytomography.io.pet.prd._binary)": [[14, "pytomography.io.PET.prd._binary.Int16Serializer"]], "int32serializer (class in pytomography.io.pet.prd._binary)": [[14, "pytomography.io.PET.prd._binary.Int32Serializer"]], "int64serializer (class in pytomography.io.pet.prd._binary)": [[14, "pytomography.io.PET.prd._binary.Int64Serializer"]], "int8serializer (class in pytomography.io.pet.prd._binary)": [[14, "pytomography.io.PET.prd._binary.Int8Serializer"]], "magic_bytes (in module pytomography.io.pet.prd._binary)": [[14, "pytomography.io.PET.prd._binary.MAGIC_BYTES"]], "mapserializer (class in pytomography.io.pet.prd._binary)": [[14, "pytomography.io.PET.prd._binary.MapSerializer"]], "ndarrayserializer (class in pytomography.io.pet.prd._binary)": [[14, "pytomography.io.PET.prd._binary.NDArraySerializer"]], "ndarrayserializerbase (class in pytomography.io.pet.prd._binary)": [[14, "pytomography.io.PET.prd._binary.NDArraySerializerBase"]], "noneserializer (class in pytomography.io.pet.prd._binary)": [[14, "pytomography.io.PET.prd._binary.NoneSerializer"]], "optionalserializer (class in pytomography.io.pet.prd._binary)": [[14, "pytomography.io.PET.prd._binary.OptionalSerializer"]], "recordserializer (class in pytomography.io.pet.prd._binary)": [[14, "pytomography.io.PET.prd._binary.RecordSerializer"]], "sizeserializer (class in pytomography.io.pet.prd._binary)": [[14, "pytomography.io.PET.prd._binary.SizeSerializer"]], "streamserializer (class in pytomography.io.pet.prd._binary)": [[14, "pytomography.io.PET.prd._binary.StreamSerializer"]], "stringserializer (class in pytomography.io.pet.prd._binary)": [[14, "pytomography.io.PET.prd._binary.StringSerializer"]], "structserializer (class in pytomography.io.pet.prd._binary)": [[14, "pytomography.io.PET.prd._binary.StructSerializer"]], "t (in module pytomography.io.pet.prd._binary)": [[14, "pytomography.io.PET.prd._binary.T"]], "tenum (in module pytomography.io.pet.prd._binary)": [[14, "pytomography.io.PET.prd._binary.TEnum"]], "timedelta_nanoseconds_dtype (in module pytomography.io.pet.prd._binary)": [[14, "pytomography.io.PET.prd._binary.TIMEDELTA_NANOSECONDS_DTYPE"]], "tkey (in module pytomography.io.pet.prd._binary)": [[14, "pytomography.io.PET.prd._binary.TKey"]], "tkey_np (in module pytomography.io.pet.prd._binary)": [[14, "pytomography.io.PET.prd._binary.TKey_NP"]], "tvalue (in module pytomography.io.pet.prd._binary)": [[14, "pytomography.io.PET.prd._binary.TValue"]], "tvalue_np (in module pytomography.io.pet.prd._binary)": [[14, "pytomography.io.PET.prd._binary.TValue_NP"]], "t_np (in module pytomography.io.pet.prd._binary)": [[14, "pytomography.io.PET.prd._binary.T_NP"]], "timeserializer (class in pytomography.io.pet.prd._binary)": [[14, "pytomography.io.PET.prd._binary.TimeSerializer"]], "typeserializer (class in pytomography.io.pet.prd._binary)": [[14, "pytomography.io.PET.prd._binary.TypeSerializer"]], "uint16_max (in module pytomography.io.pet.prd._binary)": [[14, "pytomography.io.PET.prd._binary.UINT16_MAX"]], "uint32_max (in module pytomography.io.pet.prd._binary)": [[14, "pytomography.io.PET.prd._binary.UINT32_MAX"]], "uint64_max (in module pytomography.io.pet.prd._binary)": [[14, "pytomography.io.PET.prd._binary.UINT64_MAX"]], "uint8_max (in module pytomography.io.pet.prd._binary)": [[14, "pytomography.io.PET.prd._binary.UINT8_MAX"]], "uint16serializer (class in pytomography.io.pet.prd._binary)": [[14, "pytomography.io.PET.prd._binary.UInt16Serializer"]], "uint32serializer (class in pytomography.io.pet.prd._binary)": [[14, "pytomography.io.PET.prd._binary.UInt32Serializer"]], "uint64serializer (class in pytomography.io.pet.prd._binary)": [[14, "pytomography.io.PET.prd._binary.UInt64Serializer"]], "uint8serializer (class in pytomography.io.pet.prd._binary)": [[14, "pytomography.io.PET.prd._binary.UInt8Serializer"]], "unioncaseprotocol (class in pytomography.io.pet.prd._binary)": [[14, "pytomography.io.PET.prd._binary.UnionCaseProtocol"]], "unionserializer (class in pytomography.io.pet.prd._binary)": [[14, "pytomography.io.PET.prd._binary.UnionSerializer"]], "vectorserializer (class in pytomography.io.pet.prd._binary)": [[14, "pytomography.io.PET.prd._binary.VectorSerializer"]], "_end_stream() (pytomography.io.pet.prd._binary.binaryprotocolwriter method)": [[14, "pytomography.io.PET.prd._binary.BinaryProtocolWriter._end_stream"]], "_fill_buffer() (pytomography.io.pet.prd._binary.codedinputstream method)": [[14, "pytomography.io.PET.prd._binary.CodedInputStream._fill_buffer"]], "_get_dtype_and_subarray_shape() (pytomography.io.pet.prd._binary.ndarrayserializerbase static method)": [[14, "pytomography.io.PET.prd._binary.NDArraySerializerBase._get_dtype_and_subarray_shape"]], "_is_current_array_trivially_serializable() (pytomography.io.pet.prd._binary.ndarrayserializerbase method)": [[14, "pytomography.io.PET.prd._binary.NDArraySerializerBase._is_current_array_trivially_serializable"]], "_read() (pytomography.io.pet.prd._binary.recordserializer method)": [[14, "pytomography.io.PET.prd._binary.RecordSerializer._read"]], "_read_data() (pytomography.io.pet.prd._binary.ndarrayserializerbase method)": [[14, "pytomography.io.PET.prd._binary.NDArraySerializerBase._read_data"]], "_write() (pytomography.io.pet.prd._binary.recordserializer method)": [[14, "pytomography.io.PET.prd._binary.RecordSerializer._write"]], "_write_data() (pytomography.io.pet.prd._binary.ndarrayserializerbase method)": [[14, "pytomography.io.PET.prd._binary.NDArraySerializerBase._write_data"]], "bool_serializer (in module pytomography.io.pet.prd._binary)": [[14, "pytomography.io.PET.prd._binary.bool_serializer"]], "close() (pytomography.io.pet.prd._binary.binaryprotocolreader method)": [[14, "pytomography.io.PET.prd._binary.BinaryProtocolReader.close"]], "close() (pytomography.io.pet.prd._binary.binaryprotocolwriter method)": [[14, "pytomography.io.PET.prd._binary.BinaryProtocolWriter.close"]], "close() (pytomography.io.pet.prd._binary.codedinputstream method)": [[14, "pytomography.io.PET.prd._binary.CodedInputStream.close"]], "close() (pytomography.io.pet.prd._binary.codedoutputstream method)": [[14, "pytomography.io.PET.prd._binary.CodedOutputStream.close"]], "complexfloat32_serializer (in module pytomography.io.pet.prd._binary)": [[14, "pytomography.io.PET.prd._binary.complexfloat32_serializer"]], "complexfloat64_serializer (in module pytomography.io.pet.prd._binary)": [[14, "pytomography.io.PET.prd._binary.complexfloat64_serializer"]], "date_serializer (in module pytomography.io.pet.prd._binary)": [[14, "pytomography.io.PET.prd._binary.date_serializer"]], "datetime_serializer (in module pytomography.io.pet.prd._binary)": [[14, "pytomography.io.PET.prd._binary.datetime_serializer"]], "ensure_capacity() (pytomography.io.pet.prd._binary.codedoutputstream method)": [[14, "pytomography.io.PET.prd._binary.CodedOutputStream.ensure_capacity"]], "float32_serializer (in module pytomography.io.pet.prd._binary)": [[14, "pytomography.io.PET.prd._binary.float32_serializer"]], "float64_serializer (in module pytomography.io.pet.prd._binary)": [[14, "pytomography.io.PET.prd._binary.float64_serializer"]], "flush() (pytomography.io.pet.prd._binary.codedoutputstream method)": [[14, "pytomography.io.PET.prd._binary.CodedOutputStream.flush"]], "index (pytomography.io.pet.prd._binary.unioncaseprotocol attribute)": [[14, "pytomography.io.PET.prd._binary.UnionCaseProtocol.index"]], "int16_serializer (in module pytomography.io.pet.prd._binary)": [[14, "pytomography.io.PET.prd._binary.int16_serializer"]], "int32_serializer (in module pytomography.io.pet.prd._binary)": [[14, "pytomography.io.PET.prd._binary.int32_serializer"]], "int32_struct (in module pytomography.io.pet.prd._binary)": [[14, "pytomography.io.PET.prd._binary.int32_struct"]], "int64_serializer (in module pytomography.io.pet.prd._binary)": [[14, "pytomography.io.PET.prd._binary.int64_serializer"]], "int8_serializer (in module pytomography.io.pet.prd._binary)": [[14, "pytomography.io.PET.prd._binary.int8_serializer"]], "is_trivially_serializable() (pytomography.io.pet.prd._binary.complex32serializer method)": [[14, "pytomography.io.PET.prd._binary.Complex32Serializer.is_trivially_serializable"]], "is_trivially_serializable() (pytomography.io.pet.prd._binary.complex64serializer method)": [[14, "pytomography.io.PET.prd._binary.Complex64Serializer.is_trivially_serializable"]], "is_trivially_serializable() (pytomography.io.pet.prd._binary.enumserializer method)": [[14, "pytomography.io.PET.prd._binary.EnumSerializer.is_trivially_serializable"]], "is_trivially_serializable() (pytomography.io.pet.prd._binary.fixedndarrayserializer method)": [[14, "pytomography.io.PET.prd._binary.FixedNDArraySerializer.is_trivially_serializable"]], "is_trivially_serializable() (pytomography.io.pet.prd._binary.fixedvectorserializer method)": [[14, "pytomography.io.PET.prd._binary.FixedVectorSerializer.is_trivially_serializable"]], "is_trivially_serializable() (pytomography.io.pet.prd._binary.float32serializer method)": [[14, "pytomography.io.PET.prd._binary.Float32Serializer.is_trivially_serializable"]], "is_trivially_serializable() (pytomography.io.pet.prd._binary.float64serializer method)": [[14, "pytomography.io.PET.prd._binary.Float64Serializer.is_trivially_serializable"]], "is_trivially_serializable() (pytomography.io.pet.prd._binary.int8serializer method)": [[14, "pytomography.io.PET.prd._binary.Int8Serializer.is_trivially_serializable"]], "is_trivially_serializable() (pytomography.io.pet.prd._binary.optionalserializer method)": [[14, "pytomography.io.PET.prd._binary.OptionalSerializer.is_trivially_serializable"]], "is_trivially_serializable() (pytomography.io.pet.prd._binary.recordserializer method)": [[14, "pytomography.io.PET.prd._binary.RecordSerializer.is_trivially_serializable"]], "is_trivially_serializable() (pytomography.io.pet.prd._binary.typeserializer method)": [[14, "pytomography.io.PET.prd._binary.TypeSerializer.is_trivially_serializable"]], "is_trivially_serializable() (pytomography.io.pet.prd._binary.uint8serializer method)": [[14, "pytomography.io.PET.prd._binary.UInt8Serializer.is_trivially_serializable"]], "none_serializer (in module pytomography.io.pet.prd._binary)": [[14, "pytomography.io.PET.prd._binary.none_serializer"]], "overall_dtype() (pytomography.io.pet.prd._binary.typeserializer method)": [[14, "pytomography.io.PET.prd._binary.TypeSerializer.overall_dtype"]], "pytomography.io.pet.prd._binary": [[14, "module-pytomography.io.PET.prd._binary"]], "read() (pytomography.io.pet.prd._binary.boolserializer method)": [[14, "pytomography.io.PET.prd._binary.BoolSerializer.read"]], "read() (pytomography.io.pet.prd._binary.codedinputstream method)": [[14, "pytomography.io.PET.prd._binary.CodedInputStream.read"]], "read() (pytomography.io.pet.prd._binary.complex32serializer method)": [[14, "pytomography.io.PET.prd._binary.Complex32Serializer.read"]], "read() (pytomography.io.pet.prd._binary.complex64serializer method)": [[14, "pytomography.io.PET.prd._binary.Complex64Serializer.read"]], "read() (pytomography.io.pet.prd._binary.dateserializer method)": [[14, "pytomography.io.PET.prd._binary.DateSerializer.read"]], "read() (pytomography.io.pet.prd._binary.datetimeserializer method)": [[14, "pytomography.io.PET.prd._binary.DateTimeSerializer.read"]], "read() (pytomography.io.pet.prd._binary.dynamicndarrayserializer method)": [[14, "pytomography.io.PET.prd._binary.DynamicNDArraySerializer.read"]], "read() (pytomography.io.pet.prd._binary.enumserializer method)": [[14, "pytomography.io.PET.prd._binary.EnumSerializer.read"]], "read() (pytomography.io.pet.prd._binary.fixedndarrayserializer method)": [[14, "pytomography.io.PET.prd._binary.FixedNDArraySerializer.read"]], "read() (pytomography.io.pet.prd._binary.fixedvectorserializer method)": [[14, "pytomography.io.PET.prd._binary.FixedVectorSerializer.read"]], "read() (pytomography.io.pet.prd._binary.float32serializer method)": [[14, "pytomography.io.PET.prd._binary.Float32Serializer.read"]], "read() (pytomography.io.pet.prd._binary.float64serializer method)": [[14, "pytomography.io.PET.prd._binary.Float64Serializer.read"]], "read() (pytomography.io.pet.prd._binary.int16serializer method)": [[14, "pytomography.io.PET.prd._binary.Int16Serializer.read"]], "read() (pytomography.io.pet.prd._binary.int32serializer method)": [[14, "pytomography.io.PET.prd._binary.Int32Serializer.read"]], "read() (pytomography.io.pet.prd._binary.int64serializer method)": [[14, "pytomography.io.PET.prd._binary.Int64Serializer.read"]], "read() (pytomography.io.pet.prd._binary.int8serializer method)": [[14, "pytomography.io.PET.prd._binary.Int8Serializer.read"]], "read() (pytomography.io.pet.prd._binary.mapserializer method)": [[14, "pytomography.io.PET.prd._binary.MapSerializer.read"]], "read() (pytomography.io.pet.prd._binary.ndarrayserializer method)": [[14, "pytomography.io.PET.prd._binary.NDArraySerializer.read"]], "read() (pytomography.io.pet.prd._binary.noneserializer method)": [[14, "pytomography.io.PET.prd._binary.NoneSerializer.read"]], "read() (pytomography.io.pet.prd._binary.optionalserializer method)": [[14, "pytomography.io.PET.prd._binary.OptionalSerializer.read"]], "read() (pytomography.io.pet.prd._binary.sizeserializer method)": [[14, "pytomography.io.PET.prd._binary.SizeSerializer.read"]], "read() (pytomography.io.pet.prd._binary.streamserializer method)": [[14, "pytomography.io.PET.prd._binary.StreamSerializer.read"]], "read() (pytomography.io.pet.prd._binary.stringserializer method)": [[14, "pytomography.io.PET.prd._binary.StringSerializer.read"]], "read() (pytomography.io.pet.prd._binary.structserializer method)": [[14, "pytomography.io.PET.prd._binary.StructSerializer.read"]], "read() (pytomography.io.pet.prd._binary.timeserializer method)": [[14, "pytomography.io.PET.prd._binary.TimeSerializer.read"]], "read() (pytomography.io.pet.prd._binary.typeserializer method)": [[14, "pytomography.io.PET.prd._binary.TypeSerializer.read"]], "read() (pytomography.io.pet.prd._binary.uint16serializer method)": [[14, "pytomography.io.PET.prd._binary.UInt16Serializer.read"]], "read() (pytomography.io.pet.prd._binary.uint32serializer method)": [[14, "pytomography.io.PET.prd._binary.UInt32Serializer.read"]], "read() (pytomography.io.pet.prd._binary.uint64serializer method)": [[14, "pytomography.io.PET.prd._binary.UInt64Serializer.read"]], "read() (pytomography.io.pet.prd._binary.uint8serializer method)": [[14, "pytomography.io.PET.prd._binary.UInt8Serializer.read"]], "read() (pytomography.io.pet.prd._binary.unionserializer method)": [[14, "pytomography.io.PET.prd._binary.UnionSerializer.read"]], "read() (pytomography.io.pet.prd._binary.vectorserializer method)": [[14, "pytomography.io.PET.prd._binary.VectorSerializer.read"]], "read_byte() (pytomography.io.pet.prd._binary.codedinputstream method)": [[14, "pytomography.io.PET.prd._binary.CodedInputStream.read_byte"]], "read_bytearray() (pytomography.io.pet.prd._binary.codedinputstream method)": [[14, "pytomography.io.PET.prd._binary.CodedInputStream.read_bytearray"]], "read_fixed_int32() (in module pytomography.io.pet.prd._binary)": [[14, "pytomography.io.PET.prd._binary.read_fixed_int32"]], "read_numpy() (pytomography.io.pet.prd._binary.boolserializer method)": [[14, "pytomography.io.PET.prd._binary.BoolSerializer.read_numpy"]], "read_numpy() (pytomography.io.pet.prd._binary.complex32serializer method)": [[14, "pytomography.io.PET.prd._binary.Complex32Serializer.read_numpy"]], "read_numpy() (pytomography.io.pet.prd._binary.complex64serializer method)": [[14, "pytomography.io.PET.prd._binary.Complex64Serializer.read_numpy"]], "read_numpy() (pytomography.io.pet.prd._binary.dateserializer method)": [[14, "pytomography.io.PET.prd._binary.DateSerializer.read_numpy"]], "read_numpy() (pytomography.io.pet.prd._binary.datetimeserializer method)": [[14, "pytomography.io.PET.prd._binary.DateTimeSerializer.read_numpy"]], "read_numpy() (pytomography.io.pet.prd._binary.dynamicndarrayserializer method)": [[14, "pytomography.io.PET.prd._binary.DynamicNDArraySerializer.read_numpy"]], "read_numpy() (pytomography.io.pet.prd._binary.enumserializer method)": [[14, "pytomography.io.PET.prd._binary.EnumSerializer.read_numpy"]], "read_numpy() (pytomography.io.pet.prd._binary.fixedndarrayserializer method)": [[14, "pytomography.io.PET.prd._binary.FixedNDArraySerializer.read_numpy"]], "read_numpy() (pytomography.io.pet.prd._binary.fixedvectorserializer method)": [[14, "pytomography.io.PET.prd._binary.FixedVectorSerializer.read_numpy"]], "read_numpy() (pytomography.io.pet.prd._binary.int16serializer method)": [[14, "pytomography.io.PET.prd._binary.Int16Serializer.read_numpy"]], "read_numpy() (pytomography.io.pet.prd._binary.int32serializer method)": [[14, "pytomography.io.PET.prd._binary.Int32Serializer.read_numpy"]], "read_numpy() (pytomography.io.pet.prd._binary.int64serializer method)": [[14, "pytomography.io.PET.prd._binary.Int64Serializer.read_numpy"]], "read_numpy() (pytomography.io.pet.prd._binary.mapserializer method)": [[14, "pytomography.io.PET.prd._binary.MapSerializer.read_numpy"]], "read_numpy() (pytomography.io.pet.prd._binary.ndarrayserializer method)": [[14, "pytomography.io.PET.prd._binary.NDArraySerializer.read_numpy"]], "read_numpy() (pytomography.io.pet.prd._binary.noneserializer method)": [[14, "pytomography.io.PET.prd._binary.NoneSerializer.read_numpy"]], "read_numpy() (pytomography.io.pet.prd._binary.optionalserializer method)": [[14, "pytomography.io.PET.prd._binary.OptionalSerializer.read_numpy"]], "read_numpy() (pytomography.io.pet.prd._binary.recordserializer method)": [[14, "pytomography.io.PET.prd._binary.RecordSerializer.read_numpy"]], "read_numpy() (pytomography.io.pet.prd._binary.sizeserializer method)": [[14, "pytomography.io.PET.prd._binary.SizeSerializer.read_numpy"]], "read_numpy() (pytomography.io.pet.prd._binary.streamserializer method)": [[14, "pytomography.io.PET.prd._binary.StreamSerializer.read_numpy"]], "read_numpy() (pytomography.io.pet.prd._binary.stringserializer method)": [[14, "pytomography.io.PET.prd._binary.StringSerializer.read_numpy"]], "read_numpy() (pytomography.io.pet.prd._binary.structserializer method)": [[14, "pytomography.io.PET.prd._binary.StructSerializer.read_numpy"]], "read_numpy() (pytomography.io.pet.prd._binary.timeserializer method)": [[14, "pytomography.io.PET.prd._binary.TimeSerializer.read_numpy"]], "read_numpy() (pytomography.io.pet.prd._binary.typeserializer method)": [[14, "pytomography.io.PET.prd._binary.TypeSerializer.read_numpy"]], "read_numpy() (pytomography.io.pet.prd._binary.uint16serializer method)": [[14, "pytomography.io.PET.prd._binary.UInt16Serializer.read_numpy"]], "read_numpy() (pytomography.io.pet.prd._binary.uint32serializer method)": [[14, "pytomography.io.PET.prd._binary.UInt32Serializer.read_numpy"]], "read_numpy() (pytomography.io.pet.prd._binary.uint64serializer method)": [[14, "pytomography.io.PET.prd._binary.UInt64Serializer.read_numpy"]], "read_numpy() (pytomography.io.pet.prd._binary.unionserializer method)": [[14, "pytomography.io.PET.prd._binary.UnionSerializer.read_numpy"]], "read_numpy() (pytomography.io.pet.prd._binary.vectorserializer method)": [[14, "pytomography.io.PET.prd._binary.VectorSerializer.read_numpy"]], "read_signed_varint() (pytomography.io.pet.prd._binary.codedinputstream method)": [[14, "pytomography.io.PET.prd._binary.CodedInputStream.read_signed_varint"]], "read_unsigned_varint() (pytomography.io.pet.prd._binary.codedinputstream method)": [[14, "pytomography.io.PET.prd._binary.CodedInputStream.read_unsigned_varint"]], "read_view() (pytomography.io.pet.prd._binary.codedinputstream method)": [[14, "pytomography.io.PET.prd._binary.CodedInputStream.read_view"]], "size_serializer (in module pytomography.io.pet.prd._binary)": [[14, "pytomography.io.PET.prd._binary.size_serializer"]], "string_serializer (in module pytomography.io.pet.prd._binary)": [[14, "pytomography.io.PET.prd._binary.string_serializer"]], "struct_format_str() (pytomography.io.pet.prd._binary.structserializer method)": [[14, "pytomography.io.PET.prd._binary.StructSerializer.struct_format_str"]], "struct_format_str() (pytomography.io.pet.prd._binary.typeserializer method)": [[14, "pytomography.io.PET.prd._binary.TypeSerializer.struct_format_str"]], "time_serializer (in module pytomography.io.pet.prd._binary)": [[14, "pytomography.io.PET.prd._binary.time_serializer"]], "uint16_serializer (in module pytomography.io.pet.prd._binary)": [[14, "pytomography.io.PET.prd._binary.uint16_serializer"]], "uint32_serializer (in module pytomography.io.pet.prd._binary)": [[14, "pytomography.io.PET.prd._binary.uint32_serializer"]], "uint64_serializer (in module pytomography.io.pet.prd._binary)": [[14, "pytomography.io.PET.prd._binary.uint64_serializer"]], "uint8_serializer (in module pytomography.io.pet.prd._binary)": [[14, "pytomography.io.PET.prd._binary.uint8_serializer"]], "value (pytomography.io.pet.prd._binary.unioncaseprotocol attribute)": [[14, "pytomography.io.PET.prd._binary.UnionCaseProtocol.value"]], "write() (pytomography.io.pet.prd._binary.codedoutputstream method)": [[14, "pytomography.io.PET.prd._binary.CodedOutputStream.write"]], "write() (pytomography.io.pet.prd._binary.complex32serializer method)": [[14, "pytomography.io.PET.prd._binary.Complex32Serializer.write"]], "write() (pytomography.io.pet.prd._binary.complex64serializer method)": [[14, "pytomography.io.PET.prd._binary.Complex64Serializer.write"]], "write() (pytomography.io.pet.prd._binary.dateserializer method)": [[14, "pytomography.io.PET.prd._binary.DateSerializer.write"]], "write() (pytomography.io.pet.prd._binary.datetimeserializer method)": [[14, "pytomography.io.PET.prd._binary.DateTimeSerializer.write"]], "write() (pytomography.io.pet.prd._binary.dynamicndarrayserializer method)": [[14, "pytomography.io.PET.prd._binary.DynamicNDArraySerializer.write"]], "write() (pytomography.io.pet.prd._binary.enumserializer method)": [[14, "pytomography.io.PET.prd._binary.EnumSerializer.write"]], "write() (pytomography.io.pet.prd._binary.fixedndarrayserializer method)": [[14, "pytomography.io.PET.prd._binary.FixedNDArraySerializer.write"]], "write() (pytomography.io.pet.prd._binary.fixedvectorserializer method)": [[14, "pytomography.io.PET.prd._binary.FixedVectorSerializer.write"]], "write() (pytomography.io.pet.prd._binary.int16serializer method)": [[14, "pytomography.io.PET.prd._binary.Int16Serializer.write"]], "write() (pytomography.io.pet.prd._binary.int32serializer method)": [[14, "pytomography.io.PET.prd._binary.Int32Serializer.write"]], "write() (pytomography.io.pet.prd._binary.int64serializer method)": [[14, "pytomography.io.PET.prd._binary.Int64Serializer.write"]], "write() (pytomography.io.pet.prd._binary.mapserializer method)": [[14, "pytomography.io.PET.prd._binary.MapSerializer.write"]], "write() (pytomography.io.pet.prd._binary.ndarrayserializer method)": [[14, "pytomography.io.PET.prd._binary.NDArraySerializer.write"]], "write() (pytomography.io.pet.prd._binary.noneserializer method)": [[14, "pytomography.io.PET.prd._binary.NoneSerializer.write"]], "write() (pytomography.io.pet.prd._binary.optionalserializer method)": [[14, "pytomography.io.PET.prd._binary.OptionalSerializer.write"]], "write() (pytomography.io.pet.prd._binary.sizeserializer method)": [[14, "pytomography.io.PET.prd._binary.SizeSerializer.write"]], "write() (pytomography.io.pet.prd._binary.streamserializer method)": [[14, "pytomography.io.PET.prd._binary.StreamSerializer.write"]], "write() (pytomography.io.pet.prd._binary.stringserializer method)": [[14, "pytomography.io.PET.prd._binary.StringSerializer.write"]], "write() (pytomography.io.pet.prd._binary.structserializer method)": [[14, "pytomography.io.PET.prd._binary.StructSerializer.write"]], "write() (pytomography.io.pet.prd._binary.timeserializer method)": [[14, "pytomography.io.PET.prd._binary.TimeSerializer.write"]], "write() (pytomography.io.pet.prd._binary.typeserializer method)": [[14, "pytomography.io.PET.prd._binary.TypeSerializer.write"]], "write() (pytomography.io.pet.prd._binary.uint16serializer method)": [[14, "pytomography.io.PET.prd._binary.UInt16Serializer.write"]], "write() (pytomography.io.pet.prd._binary.uint32serializer method)": [[14, "pytomography.io.PET.prd._binary.UInt32Serializer.write"]], "write() (pytomography.io.pet.prd._binary.uint64serializer method)": [[14, "pytomography.io.PET.prd._binary.UInt64Serializer.write"]], "write() (pytomography.io.pet.prd._binary.unionserializer method)": [[14, "pytomography.io.PET.prd._binary.UnionSerializer.write"]], "write() (pytomography.io.pet.prd._binary.vectorserializer method)": [[14, "pytomography.io.PET.prd._binary.VectorSerializer.write"]], "write_byte_no_check() (pytomography.io.pet.prd._binary.codedoutputstream method)": [[14, "pytomography.io.PET.prd._binary.CodedOutputStream.write_byte_no_check"]], "write_bytes() (pytomography.io.pet.prd._binary.codedoutputstream method)": [[14, "pytomography.io.PET.prd._binary.CodedOutputStream.write_bytes"]], "write_bytes_directly() (pytomography.io.pet.prd._binary.codedoutputstream method)": [[14, "pytomography.io.PET.prd._binary.CodedOutputStream.write_bytes_directly"]], "write_fixed_int32() (in module pytomography.io.pet.prd._binary)": [[14, "pytomography.io.PET.prd._binary.write_fixed_int32"]], "write_numpy() (pytomography.io.pet.prd._binary.dateserializer method)": [[14, "pytomography.io.PET.prd._binary.DateSerializer.write_numpy"]], "write_numpy() (pytomography.io.pet.prd._binary.datetimeserializer method)": [[14, "pytomography.io.PET.prd._binary.DateTimeSerializer.write_numpy"]], "write_numpy() (pytomography.io.pet.prd._binary.dynamicndarrayserializer method)": [[14, "pytomography.io.PET.prd._binary.DynamicNDArraySerializer.write_numpy"]], "write_numpy() (pytomography.io.pet.prd._binary.enumserializer method)": [[14, "pytomography.io.PET.prd._binary.EnumSerializer.write_numpy"]], "write_numpy() (pytomography.io.pet.prd._binary.fixedndarrayserializer method)": [[14, "pytomography.io.PET.prd._binary.FixedNDArraySerializer.write_numpy"]], "write_numpy() (pytomography.io.pet.prd._binary.fixedvectorserializer method)": [[14, "pytomography.io.PET.prd._binary.FixedVectorSerializer.write_numpy"]], "write_numpy() (pytomography.io.pet.prd._binary.int16serializer method)": [[14, "pytomography.io.PET.prd._binary.Int16Serializer.write_numpy"]], "write_numpy() (pytomography.io.pet.prd._binary.int32serializer method)": [[14, "pytomography.io.PET.prd._binary.Int32Serializer.write_numpy"]], "write_numpy() (pytomography.io.pet.prd._binary.int64serializer method)": [[14, "pytomography.io.PET.prd._binary.Int64Serializer.write_numpy"]], "write_numpy() (pytomography.io.pet.prd._binary.mapserializer method)": [[14, "pytomography.io.PET.prd._binary.MapSerializer.write_numpy"]], "write_numpy() (pytomography.io.pet.prd._binary.ndarrayserializer method)": [[14, "pytomography.io.PET.prd._binary.NDArraySerializer.write_numpy"]], "write_numpy() (pytomography.io.pet.prd._binary.noneserializer method)": [[14, "pytomography.io.PET.prd._binary.NoneSerializer.write_numpy"]], "write_numpy() (pytomography.io.pet.prd._binary.optionalserializer method)": [[14, "pytomography.io.PET.prd._binary.OptionalSerializer.write_numpy"]], "write_numpy() (pytomography.io.pet.prd._binary.sizeserializer method)": [[14, "pytomography.io.PET.prd._binary.SizeSerializer.write_numpy"]], "write_numpy() (pytomography.io.pet.prd._binary.streamserializer method)": [[14, "pytomography.io.PET.prd._binary.StreamSerializer.write_numpy"]], "write_numpy() (pytomography.io.pet.prd._binary.stringserializer method)": [[14, "pytomography.io.PET.prd._binary.StringSerializer.write_numpy"]], "write_numpy() (pytomography.io.pet.prd._binary.structserializer method)": [[14, "pytomography.io.PET.prd._binary.StructSerializer.write_numpy"]], "write_numpy() (pytomography.io.pet.prd._binary.timeserializer method)": [[14, "pytomography.io.PET.prd._binary.TimeSerializer.write_numpy"]], "write_numpy() (pytomography.io.pet.prd._binary.typeserializer method)": [[14, "pytomography.io.PET.prd._binary.TypeSerializer.write_numpy"]], "write_numpy() (pytomography.io.pet.prd._binary.uint16serializer method)": [[14, "pytomography.io.PET.prd._binary.UInt16Serializer.write_numpy"]], "write_numpy() (pytomography.io.pet.prd._binary.uint32serializer method)": [[14, "pytomography.io.PET.prd._binary.UInt32Serializer.write_numpy"]], "write_numpy() (pytomography.io.pet.prd._binary.uint64serializer method)": [[14, "pytomography.io.PET.prd._binary.UInt64Serializer.write_numpy"]], "write_numpy() (pytomography.io.pet.prd._binary.unionserializer method)": [[14, "pytomography.io.PET.prd._binary.UnionSerializer.write_numpy"]], "write_numpy() (pytomography.io.pet.prd._binary.vectorserializer method)": [[14, "pytomography.io.PET.prd._binary.VectorSerializer.write_numpy"]], "write_signed_varint() (pytomography.io.pet.prd._binary.codedoutputstream method)": [[14, "pytomography.io.PET.prd._binary.CodedOutputStream.write_signed_varint"]], "write_unsigned_varint() (pytomography.io.pet.prd._binary.codedoutputstream method)": [[14, "pytomography.io.PET.prd._binary.CodedOutputStream.write_unsigned_varint"]], "zigzag_decode() (pytomography.io.pet.prd._binary.codedinputstream method)": [[14, "pytomography.io.PET.prd._binary.CodedInputStream.zigzag_decode"]], "zigzag_encode() (pytomography.io.pet.prd._binary.codedoutputstream method)": [[14, "pytomography.io.PET.prd._binary.CodedOutputStream.zigzag_encode"]], "make_get_dtype_func() (in module pytomography.io.pet.prd._dtypes)": [[15, "pytomography.io.PET.prd._dtypes.make_get_dtype_func"]], "pytomography.io.pet.prd._dtypes": [[15, "module-pytomography.io.PET.prd._dtypes"]], "boolconverter (class in pytomography.io.pet.prd._ndjson)": [[16, "pytomography.io.PET.prd._ndjson.BoolConverter"]], "current_ndjson_format_version (in module pytomography.io.pet.prd._ndjson)": [[16, "pytomography.io.PET.prd._ndjson.CURRENT_NDJSON_FORMAT_VERSION"]], "complex32converter (class in pytomography.io.pet.prd._ndjson)": [[16, "pytomography.io.PET.prd._ndjson.Complex32Converter"]], "complex64converter (class in pytomography.io.pet.prd._ndjson)": [[16, "pytomography.io.PET.prd._ndjson.Complex64Converter"]], "dateconverter (class in pytomography.io.pet.prd._ndjson)": [[16, "pytomography.io.PET.prd._ndjson.DateConverter"]], "datetimeconverter (class in pytomography.io.pet.prd._ndjson)": [[16, "pytomography.io.PET.prd._ndjson.DateTimeConverter"]], "dynamicndarrayconverter (class in pytomography.io.pet.prd._ndjson)": [[16, "pytomography.io.PET.prd._ndjson.DynamicNDArrayConverter"]], "enumconverter (class in pytomography.io.pet.prd._ndjson)": [[16, "pytomography.io.PET.prd._ndjson.EnumConverter"]], "fixedndarrayconverter (class in pytomography.io.pet.prd._ndjson)": [[16, "pytomography.io.PET.prd._ndjson.FixedNDArrayConverter"]], "fixedvectorconverter (class in pytomography.io.pet.prd._ndjson)": [[16, "pytomography.io.PET.prd._ndjson.FixedVectorConverter"]], "flagsconverter (class in pytomography.io.pet.prd._ndjson)": [[16, "pytomography.io.PET.prd._ndjson.FlagsConverter"]], "float32converter (class in pytomography.io.pet.prd._ndjson)": [[16, "pytomography.io.PET.prd._ndjson.Float32Converter"]], "float64converter (class in pytomography.io.pet.prd._ndjson)": [[16, "pytomography.io.PET.prd._ndjson.Float64Converter"]], "int16_max (in module pytomography.io.pet.prd._ndjson)": [[16, "pytomography.io.PET.prd._ndjson.INT16_MAX"]], "int16_min (in module pytomography.io.pet.prd._ndjson)": [[16, "pytomography.io.PET.prd._ndjson.INT16_MIN"]], "int32_max (in module pytomography.io.pet.prd._ndjson)": [[16, "pytomography.io.PET.prd._ndjson.INT32_MAX"]], "int32_min (in module pytomography.io.pet.prd._ndjson)": [[16, "pytomography.io.PET.prd._ndjson.INT32_MIN"]], "int64_max (in module pytomography.io.pet.prd._ndjson)": [[16, "pytomography.io.PET.prd._ndjson.INT64_MAX"]], "int64_min (in module pytomography.io.pet.prd._ndjson)": [[16, "pytomography.io.PET.prd._ndjson.INT64_MIN"]], "int8_max (in module pytomography.io.pet.prd._ndjson)": [[16, "pytomography.io.PET.prd._ndjson.INT8_MAX"]], "int8_min (in module pytomography.io.pet.prd._ndjson)": [[16, "pytomography.io.PET.prd._ndjson.INT8_MIN"]], "int16converter (class in pytomography.io.pet.prd._ndjson)": [[16, "pytomography.io.PET.prd._ndjson.Int16Converter"]], "int32converter (class in pytomography.io.pet.prd._ndjson)": [[16, "pytomography.io.PET.prd._ndjson.Int32Converter"]], "int64converter (class in pytomography.io.pet.prd._ndjson)": [[16, "pytomography.io.PET.prd._ndjson.Int64Converter"]], "int8converter (class in pytomography.io.pet.prd._ndjson)": [[16, "pytomography.io.PET.prd._ndjson.Int8Converter"]], "jsonconverter (class in pytomography.io.pet.prd._ndjson)": [[16, "pytomography.io.PET.prd._ndjson.JsonConverter"]], "missing_sentinel (in module pytomography.io.pet.prd._ndjson)": [[16, "pytomography.io.PET.prd._ndjson.MISSING_SENTINEL"]], "mapconverter (class in pytomography.io.pet.prd._ndjson)": [[16, "pytomography.io.PET.prd._ndjson.MapConverter"]], "ndarrayconverter (class in pytomography.io.pet.prd._ndjson)": [[16, "pytomography.io.PET.prd._ndjson.NDArrayConverter"]], "ndarrayconverterbase (class in pytomography.io.pet.prd._ndjson)": [[16, "pytomography.io.PET.prd._ndjson.NDArrayConverterBase"]], "ndjsonprotocolreader (class in pytomography.io.pet.prd._ndjson)": [[16, "pytomography.io.PET.prd._ndjson.NDJsonProtocolReader"]], "ndjsonprotocolwriter (class in pytomography.io.pet.prd._ndjson)": [[16, "pytomography.io.PET.prd._ndjson.NDJsonProtocolWriter"]], "optionalconverter (class in pytomography.io.pet.prd._ndjson)": [[16, "pytomography.io.PET.prd._ndjson.OptionalConverter"]], "sizeconverter (class in pytomography.io.pet.prd._ndjson)": [[16, "pytomography.io.PET.prd._ndjson.SizeConverter"]], "stringconverter (class in pytomography.io.pet.prd._ndjson)": [[16, "pytomography.io.PET.prd._ndjson.StringConverter"]], "t (in module pytomography.io.pet.prd._ndjson)": [[16, "pytomography.io.PET.prd._ndjson.T"]], "tenum (in module pytomography.io.pet.prd._ndjson)": [[16, "pytomography.io.PET.prd._ndjson.TEnum"]], "tflag (in module pytomography.io.pet.prd._ndjson)": [[16, "pytomography.io.PET.prd._ndjson.TFlag"]], "tkey (in module pytomography.io.pet.prd._ndjson)": [[16, "pytomography.io.PET.prd._ndjson.TKey"]], "tkey_np (in module pytomography.io.pet.prd._ndjson)": [[16, "pytomography.io.PET.prd._ndjson.TKey_NP"]], "tvalue (in module pytomography.io.pet.prd._ndjson)": [[16, "pytomography.io.PET.prd._ndjson.TValue"]], "tvalue_np (in module pytomography.io.pet.prd._ndjson)": [[16, "pytomography.io.PET.prd._ndjson.TValue_NP"]], "t_np (in module pytomography.io.pet.prd._ndjson)": [[16, "pytomography.io.PET.prd._ndjson.T_NP"]], "timeconverter (class in pytomography.io.pet.prd._ndjson)": [[16, "pytomography.io.PET.prd._ndjson.TimeConverter"]], "uint16_max (in module pytomography.io.pet.prd._ndjson)": [[16, "pytomography.io.PET.prd._ndjson.UINT16_MAX"]], "uint32_max (in module pytomography.io.pet.prd._ndjson)": [[16, "pytomography.io.PET.prd._ndjson.UINT32_MAX"]], "uint64_max (in module pytomography.io.pet.prd._ndjson)": [[16, "pytomography.io.PET.prd._ndjson.UINT64_MAX"]], "uint8_max (in module pytomography.io.pet.prd._ndjson)": [[16, "pytomography.io.PET.prd._ndjson.UINT8_MAX"]], "uint16converter (class in pytomography.io.pet.prd._ndjson)": [[16, "pytomography.io.PET.prd._ndjson.UInt16Converter"]], "uint32converter (class in pytomography.io.pet.prd._ndjson)": [[16, "pytomography.io.PET.prd._ndjson.UInt32Converter"]], "uint64converter (class in pytomography.io.pet.prd._ndjson)": [[16, "pytomography.io.PET.prd._ndjson.UInt64Converter"]], "uint8converter (class in pytomography.io.pet.prd._ndjson)": [[16, "pytomography.io.PET.prd._ndjson.UInt8Converter"]], "unionconverter (class in pytomography.io.pet.prd._ndjson)": [[16, "pytomography.io.PET.prd._ndjson.UnionConverter"]], "vectorconverter (class in pytomography.io.pet.prd._ndjson)": [[16, "pytomography.io.PET.prd._ndjson.VectorConverter"]], "_end_stream() (pytomography.io.pet.prd._ndjson.ndjsonprotocolwriter method)": [[16, "pytomography.io.PET.prd._ndjson.NDJsonProtocolWriter._end_stream"]], "_get_dtype_and_subarray_shape() (pytomography.io.pet.prd._ndjson.ndarrayconverterbase static method)": [[16, "pytomography.io.PET.prd._ndjson.NDArrayConverterBase._get_dtype_and_subarray_shape"]], "_read() (pytomography.io.pet.prd._ndjson.ndarrayconverterbase method)": [[16, "pytomography.io.PET.prd._ndjson.NDArrayConverterBase._read"]], "_read_json_line() (pytomography.io.pet.prd._ndjson.ndjsonprotocolreader method)": [[16, "pytomography.io.PET.prd._ndjson.NDJsonProtocolReader._read_json_line"]], "_write_json_line() (pytomography.io.pet.prd._ndjson.ndjsonprotocolwriter method)": [[16, "pytomography.io.PET.prd._ndjson.NDJsonProtocolWriter._write_json_line"]], "bool_converter (in module pytomography.io.pet.prd._ndjson)": [[16, "pytomography.io.PET.prd._ndjson.bool_converter"]], "check_dtype() (pytomography.io.pet.prd._ndjson.ndarrayconverterbase method)": [[16, "pytomography.io.PET.prd._ndjson.NDArrayConverterBase.check_dtype"]], "close() (pytomography.io.pet.prd._ndjson.ndjsonprotocolreader method)": [[16, "pytomography.io.PET.prd._ndjson.NDJsonProtocolReader.close"]], "close() (pytomography.io.pet.prd._ndjson.ndjsonprotocolwriter method)": [[16, "pytomography.io.PET.prd._ndjson.NDJsonProtocolWriter.close"]], "complexfloat32_converter (in module pytomography.io.pet.prd._ndjson)": [[16, "pytomography.io.PET.prd._ndjson.complexfloat32_converter"]], "complexfloat64_converter (in module pytomography.io.pet.prd._ndjson)": [[16, "pytomography.io.PET.prd._ndjson.complexfloat64_converter"]], "date_converter (in module pytomography.io.pet.prd._ndjson)": [[16, "pytomography.io.PET.prd._ndjson.date_converter"]], "datetime_converter (in module pytomography.io.pet.prd._ndjson)": [[16, "pytomography.io.PET.prd._ndjson.datetime_converter"]], "float32_converter (in module pytomography.io.pet.prd._ndjson)": [[16, "pytomography.io.PET.prd._ndjson.float32_converter"]], "float64_converter (in module pytomography.io.pet.prd._ndjson)": [[16, "pytomography.io.PET.prd._ndjson.float64_converter"]], "from_json() (pytomography.io.pet.prd._ndjson.boolconverter method)": [[16, "pytomography.io.PET.prd._ndjson.BoolConverter.from_json"]], "from_json() (pytomography.io.pet.prd._ndjson.complex32converter method)": [[16, "pytomography.io.PET.prd._ndjson.Complex32Converter.from_json"]], "from_json() (pytomography.io.pet.prd._ndjson.complex64converter method)": [[16, "pytomography.io.PET.prd._ndjson.Complex64Converter.from_json"]], "from_json() (pytomography.io.pet.prd._ndjson.dateconverter method)": [[16, "pytomography.io.PET.prd._ndjson.DateConverter.from_json"]], "from_json() (pytomography.io.pet.prd._ndjson.datetimeconverter method)": [[16, "pytomography.io.PET.prd._ndjson.DateTimeConverter.from_json"]], "from_json() (pytomography.io.pet.prd._ndjson.dynamicndarrayconverter method)": [[16, "pytomography.io.PET.prd._ndjson.DynamicNDArrayConverter.from_json"]], "from_json() (pytomography.io.pet.prd._ndjson.enumconverter method)": [[16, "pytomography.io.PET.prd._ndjson.EnumConverter.from_json"]], "from_json() (pytomography.io.pet.prd._ndjson.fixedndarrayconverter method)": [[16, "pytomography.io.PET.prd._ndjson.FixedNDArrayConverter.from_json"]], "from_json() (pytomography.io.pet.prd._ndjson.fixedvectorconverter method)": [[16, "pytomography.io.PET.prd._ndjson.FixedVectorConverter.from_json"]], "from_json() (pytomography.io.pet.prd._ndjson.flagsconverter method)": [[16, "pytomography.io.PET.prd._ndjson.FlagsConverter.from_json"]], "from_json() (pytomography.io.pet.prd._ndjson.float32converter method)": [[16, "pytomography.io.PET.prd._ndjson.Float32Converter.from_json"]], "from_json() (pytomography.io.pet.prd._ndjson.float64converter method)": [[16, "pytomography.io.PET.prd._ndjson.Float64Converter.from_json"]], "from_json() (pytomography.io.pet.prd._ndjson.int16converter method)": [[16, "pytomography.io.PET.prd._ndjson.Int16Converter.from_json"]], "from_json() (pytomography.io.pet.prd._ndjson.int32converter method)": [[16, "pytomography.io.PET.prd._ndjson.Int32Converter.from_json"]], "from_json() (pytomography.io.pet.prd._ndjson.int64converter method)": [[16, "pytomography.io.PET.prd._ndjson.Int64Converter.from_json"]], "from_json() (pytomography.io.pet.prd._ndjson.int8converter method)": [[16, "pytomography.io.PET.prd._ndjson.Int8Converter.from_json"]], "from_json() (pytomography.io.pet.prd._ndjson.jsonconverter method)": [[16, "pytomography.io.PET.prd._ndjson.JsonConverter.from_json"]], "from_json() (pytomography.io.pet.prd._ndjson.mapconverter method)": [[16, "pytomography.io.PET.prd._ndjson.MapConverter.from_json"]], "from_json() (pytomography.io.pet.prd._ndjson.ndarrayconverter method)": [[16, "pytomography.io.PET.prd._ndjson.NDArrayConverter.from_json"]], "from_json() (pytomography.io.pet.prd._ndjson.optionalconverter method)": [[16, "pytomography.io.PET.prd._ndjson.OptionalConverter.from_json"]], "from_json() (pytomography.io.pet.prd._ndjson.sizeconverter method)": [[16, "pytomography.io.PET.prd._ndjson.SizeConverter.from_json"]], "from_json() (pytomography.io.pet.prd._ndjson.stringconverter method)": [[16, "pytomography.io.PET.prd._ndjson.StringConverter.from_json"]], "from_json() (pytomography.io.pet.prd._ndjson.timeconverter method)": [[16, "pytomography.io.PET.prd._ndjson.TimeConverter.from_json"]], "from_json() (pytomography.io.pet.prd._ndjson.uint16converter method)": [[16, "pytomography.io.PET.prd._ndjson.UInt16Converter.from_json"]], "from_json() (pytomography.io.pet.prd._ndjson.uint32converter method)": [[16, "pytomography.io.PET.prd._ndjson.UInt32Converter.from_json"]], "from_json() (pytomography.io.pet.prd._ndjson.uint64converter method)": [[16, "pytomography.io.PET.prd._ndjson.UInt64Converter.from_json"]], "from_json() (pytomography.io.pet.prd._ndjson.uint8converter method)": [[16, "pytomography.io.PET.prd._ndjson.UInt8Converter.from_json"]], "from_json() (pytomography.io.pet.prd._ndjson.unionconverter method)": [[16, "pytomography.io.PET.prd._ndjson.UnionConverter.from_json"]], "from_json() (pytomography.io.pet.prd._ndjson.vectorconverter method)": [[16, "pytomography.io.PET.prd._ndjson.VectorConverter.from_json"]], "from_json_to_numpy() (pytomography.io.pet.prd._ndjson.boolconverter method)": [[16, "pytomography.io.PET.prd._ndjson.BoolConverter.from_json_to_numpy"]], "from_json_to_numpy() (pytomography.io.pet.prd._ndjson.complex32converter method)": [[16, "pytomography.io.PET.prd._ndjson.Complex32Converter.from_json_to_numpy"]], "from_json_to_numpy() (pytomography.io.pet.prd._ndjson.complex64converter method)": [[16, "pytomography.io.PET.prd._ndjson.Complex64Converter.from_json_to_numpy"]], "from_json_to_numpy() (pytomography.io.pet.prd._ndjson.dateconverter method)": [[16, "pytomography.io.PET.prd._ndjson.DateConverter.from_json_to_numpy"]], "from_json_to_numpy() (pytomography.io.pet.prd._ndjson.datetimeconverter method)": [[16, "pytomography.io.PET.prd._ndjson.DateTimeConverter.from_json_to_numpy"]], "from_json_to_numpy() (pytomography.io.pet.prd._ndjson.dynamicndarrayconverter method)": [[16, "pytomography.io.PET.prd._ndjson.DynamicNDArrayConverter.from_json_to_numpy"]], "from_json_to_numpy() (pytomography.io.pet.prd._ndjson.enumconverter method)": [[16, "pytomography.io.PET.prd._ndjson.EnumConverter.from_json_to_numpy"]], "from_json_to_numpy() (pytomography.io.pet.prd._ndjson.fixedndarrayconverter method)": [[16, "pytomography.io.PET.prd._ndjson.FixedNDArrayConverter.from_json_to_numpy"]], "from_json_to_numpy() (pytomography.io.pet.prd._ndjson.fixedvectorconverter method)": [[16, "pytomography.io.PET.prd._ndjson.FixedVectorConverter.from_json_to_numpy"]], "from_json_to_numpy() (pytomography.io.pet.prd._ndjson.flagsconverter method)": [[16, "pytomography.io.PET.prd._ndjson.FlagsConverter.from_json_to_numpy"]], "from_json_to_numpy() (pytomography.io.pet.prd._ndjson.float32converter method)": [[16, "pytomography.io.PET.prd._ndjson.Float32Converter.from_json_to_numpy"]], "from_json_to_numpy() (pytomography.io.pet.prd._ndjson.float64converter method)": [[16, "pytomography.io.PET.prd._ndjson.Float64Converter.from_json_to_numpy"]], "from_json_to_numpy() (pytomography.io.pet.prd._ndjson.int16converter method)": [[16, "pytomography.io.PET.prd._ndjson.Int16Converter.from_json_to_numpy"]], "from_json_to_numpy() (pytomography.io.pet.prd._ndjson.int32converter method)": [[16, "pytomography.io.PET.prd._ndjson.Int32Converter.from_json_to_numpy"]], "from_json_to_numpy() (pytomography.io.pet.prd._ndjson.int64converter method)": [[16, "pytomography.io.PET.prd._ndjson.Int64Converter.from_json_to_numpy"]], "from_json_to_numpy() (pytomography.io.pet.prd._ndjson.int8converter method)": [[16, "pytomography.io.PET.prd._ndjson.Int8Converter.from_json_to_numpy"]], "from_json_to_numpy() (pytomography.io.pet.prd._ndjson.jsonconverter method)": [[16, "pytomography.io.PET.prd._ndjson.JsonConverter.from_json_to_numpy"]], "from_json_to_numpy() (pytomography.io.pet.prd._ndjson.mapconverter method)": [[16, "pytomography.io.PET.prd._ndjson.MapConverter.from_json_to_numpy"]], "from_json_to_numpy() (pytomography.io.pet.prd._ndjson.ndarrayconverter method)": [[16, "pytomography.io.PET.prd._ndjson.NDArrayConverter.from_json_to_numpy"]], "from_json_to_numpy() (pytomography.io.pet.prd._ndjson.optionalconverter method)": [[16, "pytomography.io.PET.prd._ndjson.OptionalConverter.from_json_to_numpy"]], "from_json_to_numpy() (pytomography.io.pet.prd._ndjson.sizeconverter method)": [[16, "pytomography.io.PET.prd._ndjson.SizeConverter.from_json_to_numpy"]], "from_json_to_numpy() (pytomography.io.pet.prd._ndjson.stringconverter method)": [[16, "pytomography.io.PET.prd._ndjson.StringConverter.from_json_to_numpy"]], "from_json_to_numpy() (pytomography.io.pet.prd._ndjson.timeconverter method)": [[16, "pytomography.io.PET.prd._ndjson.TimeConverter.from_json_to_numpy"]], "from_json_to_numpy() (pytomography.io.pet.prd._ndjson.uint16converter method)": [[16, "pytomography.io.PET.prd._ndjson.UInt16Converter.from_json_to_numpy"]], "from_json_to_numpy() (pytomography.io.pet.prd._ndjson.uint32converter method)": [[16, "pytomography.io.PET.prd._ndjson.UInt32Converter.from_json_to_numpy"]], "from_json_to_numpy() (pytomography.io.pet.prd._ndjson.uint64converter method)": [[16, "pytomography.io.PET.prd._ndjson.UInt64Converter.from_json_to_numpy"]], "from_json_to_numpy() (pytomography.io.pet.prd._ndjson.uint8converter method)": [[16, "pytomography.io.PET.prd._ndjson.UInt8Converter.from_json_to_numpy"]], "from_json_to_numpy() (pytomography.io.pet.prd._ndjson.unionconverter method)": [[16, "pytomography.io.PET.prd._ndjson.UnionConverter.from_json_to_numpy"]], "from_json_to_numpy() (pytomography.io.pet.prd._ndjson.vectorconverter method)": [[16, "pytomography.io.PET.prd._ndjson.VectorConverter.from_json_to_numpy"]], "int16_converter (in module pytomography.io.pet.prd._ndjson)": [[16, "pytomography.io.PET.prd._ndjson.int16_converter"]], "int32_converter (in module pytomography.io.pet.prd._ndjson)": [[16, "pytomography.io.PET.prd._ndjson.int32_converter"]], "int64_converter (in module pytomography.io.pet.prd._ndjson)": [[16, "pytomography.io.PET.prd._ndjson.int64_converter"]], "int8_converter (in module pytomography.io.pet.prd._ndjson)": [[16, "pytomography.io.PET.prd._ndjson.int8_converter"]], "numpy_to_json() (pytomography.io.pet.prd._ndjson.boolconverter method)": [[16, "pytomography.io.PET.prd._ndjson.BoolConverter.numpy_to_json"]], "numpy_to_json() (pytomography.io.pet.prd._ndjson.complex32converter method)": [[16, "pytomography.io.PET.prd._ndjson.Complex32Converter.numpy_to_json"]], "numpy_to_json() (pytomography.io.pet.prd._ndjson.complex64converter method)": [[16, "pytomography.io.PET.prd._ndjson.Complex64Converter.numpy_to_json"]], "numpy_to_json() (pytomography.io.pet.prd._ndjson.dateconverter method)": [[16, "pytomography.io.PET.prd._ndjson.DateConverter.numpy_to_json"]], "numpy_to_json() (pytomography.io.pet.prd._ndjson.datetimeconverter method)": [[16, "pytomography.io.PET.prd._ndjson.DateTimeConverter.numpy_to_json"]], "numpy_to_json() (pytomography.io.pet.prd._ndjson.dynamicndarrayconverter method)": [[16, "pytomography.io.PET.prd._ndjson.DynamicNDArrayConverter.numpy_to_json"]], "numpy_to_json() (pytomography.io.pet.prd._ndjson.enumconverter method)": [[16, "pytomography.io.PET.prd._ndjson.EnumConverter.numpy_to_json"]], "numpy_to_json() (pytomography.io.pet.prd._ndjson.fixedndarrayconverter method)": [[16, "pytomography.io.PET.prd._ndjson.FixedNDArrayConverter.numpy_to_json"]], "numpy_to_json() (pytomography.io.pet.prd._ndjson.fixedvectorconverter method)": [[16, "pytomography.io.PET.prd._ndjson.FixedVectorConverter.numpy_to_json"]], "numpy_to_json() (pytomography.io.pet.prd._ndjson.flagsconverter method)": [[16, "pytomography.io.PET.prd._ndjson.FlagsConverter.numpy_to_json"]], "numpy_to_json() (pytomography.io.pet.prd._ndjson.float32converter method)": [[16, "pytomography.io.PET.prd._ndjson.Float32Converter.numpy_to_json"]], "numpy_to_json() (pytomography.io.pet.prd._ndjson.float64converter method)": [[16, "pytomography.io.PET.prd._ndjson.Float64Converter.numpy_to_json"]], "numpy_to_json() (pytomography.io.pet.prd._ndjson.int16converter method)": [[16, "pytomography.io.PET.prd._ndjson.Int16Converter.numpy_to_json"]], "numpy_to_json() (pytomography.io.pet.prd._ndjson.int32converter method)": [[16, "pytomography.io.PET.prd._ndjson.Int32Converter.numpy_to_json"]], "numpy_to_json() (pytomography.io.pet.prd._ndjson.int64converter method)": [[16, "pytomography.io.PET.prd._ndjson.Int64Converter.numpy_to_json"]], "numpy_to_json() (pytomography.io.pet.prd._ndjson.int8converter method)": [[16, "pytomography.io.PET.prd._ndjson.Int8Converter.numpy_to_json"]], "numpy_to_json() (pytomography.io.pet.prd._ndjson.jsonconverter method)": [[16, "pytomography.io.PET.prd._ndjson.JsonConverter.numpy_to_json"]], "numpy_to_json() (pytomography.io.pet.prd._ndjson.mapconverter method)": [[16, "pytomography.io.PET.prd._ndjson.MapConverter.numpy_to_json"]], "numpy_to_json() (pytomography.io.pet.prd._ndjson.ndarrayconverter method)": [[16, "pytomography.io.PET.prd._ndjson.NDArrayConverter.numpy_to_json"]], "numpy_to_json() (pytomography.io.pet.prd._ndjson.optionalconverter method)": [[16, "pytomography.io.PET.prd._ndjson.OptionalConverter.numpy_to_json"]], "numpy_to_json() (pytomography.io.pet.prd._ndjson.sizeconverter method)": [[16, "pytomography.io.PET.prd._ndjson.SizeConverter.numpy_to_json"]], "numpy_to_json() (pytomography.io.pet.prd._ndjson.stringconverter method)": [[16, "pytomography.io.PET.prd._ndjson.StringConverter.numpy_to_json"]], "numpy_to_json() (pytomography.io.pet.prd._ndjson.timeconverter method)": [[16, "pytomography.io.PET.prd._ndjson.TimeConverter.numpy_to_json"]], "numpy_to_json() (pytomography.io.pet.prd._ndjson.uint16converter method)": [[16, "pytomography.io.PET.prd._ndjson.UInt16Converter.numpy_to_json"]], "numpy_to_json() (pytomography.io.pet.prd._ndjson.uint32converter method)": [[16, "pytomography.io.PET.prd._ndjson.UInt32Converter.numpy_to_json"]], "numpy_to_json() (pytomography.io.pet.prd._ndjson.uint64converter method)": [[16, "pytomography.io.PET.prd._ndjson.UInt64Converter.numpy_to_json"]], "numpy_to_json() (pytomography.io.pet.prd._ndjson.uint8converter method)": [[16, "pytomography.io.PET.prd._ndjson.UInt8Converter.numpy_to_json"]], "numpy_to_json() (pytomography.io.pet.prd._ndjson.unionconverter method)": [[16, "pytomography.io.PET.prd._ndjson.UnionConverter.numpy_to_json"]], "numpy_to_json() (pytomography.io.pet.prd._ndjson.vectorconverter method)": [[16, "pytomography.io.PET.prd._ndjson.VectorConverter.numpy_to_json"]], "overall_dtype() (pytomography.io.pet.prd._ndjson.jsonconverter method)": [[16, "pytomography.io.PET.prd._ndjson.JsonConverter.overall_dtype"]], "pytomography.io.pet.prd._ndjson": [[16, "module-pytomography.io.PET.prd._ndjson"]], "size_converter (in module pytomography.io.pet.prd._ndjson)": [[16, "pytomography.io.PET.prd._ndjson.size_converter"]], "string_converter (in module pytomography.io.pet.prd._ndjson)": [[16, "pytomography.io.PET.prd._ndjson.string_converter"]], "supports_none() (pytomography.io.pet.prd._ndjson.jsonconverter method)": [[16, "pytomography.io.PET.prd._ndjson.JsonConverter.supports_none"]], "supports_none() (pytomography.io.pet.prd._ndjson.optionalconverter method)": [[16, "pytomography.io.PET.prd._ndjson.OptionalConverter.supports_none"]], "supports_none() (pytomography.io.pet.prd._ndjson.unionconverter method)": [[16, "pytomography.io.PET.prd._ndjson.UnionConverter.supports_none"]], "time_converter (in module pytomography.io.pet.prd._ndjson)": [[16, "pytomography.io.PET.prd._ndjson.time_converter"]], "to_json() (pytomography.io.pet.prd._ndjson.boolconverter method)": [[16, "pytomography.io.PET.prd._ndjson.BoolConverter.to_json"]], "to_json() (pytomography.io.pet.prd._ndjson.complex32converter method)": [[16, "pytomography.io.PET.prd._ndjson.Complex32Converter.to_json"]], "to_json() (pytomography.io.pet.prd._ndjson.complex64converter method)": [[16, "pytomography.io.PET.prd._ndjson.Complex64Converter.to_json"]], "to_json() (pytomography.io.pet.prd._ndjson.dateconverter method)": [[16, "pytomography.io.PET.prd._ndjson.DateConverter.to_json"]], "to_json() (pytomography.io.pet.prd._ndjson.datetimeconverter method)": [[16, "pytomography.io.PET.prd._ndjson.DateTimeConverter.to_json"]], "to_json() (pytomography.io.pet.prd._ndjson.dynamicndarrayconverter method)": [[16, "pytomography.io.PET.prd._ndjson.DynamicNDArrayConverter.to_json"]], "to_json() (pytomography.io.pet.prd._ndjson.enumconverter method)": [[16, "pytomography.io.PET.prd._ndjson.EnumConverter.to_json"]], "to_json() (pytomography.io.pet.prd._ndjson.fixedndarrayconverter method)": [[16, "pytomography.io.PET.prd._ndjson.FixedNDArrayConverter.to_json"]], "to_json() (pytomography.io.pet.prd._ndjson.fixedvectorconverter method)": [[16, "pytomography.io.PET.prd._ndjson.FixedVectorConverter.to_json"]], "to_json() (pytomography.io.pet.prd._ndjson.flagsconverter method)": [[16, "pytomography.io.PET.prd._ndjson.FlagsConverter.to_json"]], "to_json() (pytomography.io.pet.prd._ndjson.float32converter method)": [[16, "pytomography.io.PET.prd._ndjson.Float32Converter.to_json"]], "to_json() (pytomography.io.pet.prd._ndjson.float64converter method)": [[16, "pytomography.io.PET.prd._ndjson.Float64Converter.to_json"]], "to_json() (pytomography.io.pet.prd._ndjson.int16converter method)": [[16, "pytomography.io.PET.prd._ndjson.Int16Converter.to_json"]], "to_json() (pytomography.io.pet.prd._ndjson.int32converter method)": [[16, "pytomography.io.PET.prd._ndjson.Int32Converter.to_json"]], "to_json() (pytomography.io.pet.prd._ndjson.int64converter method)": [[16, "pytomography.io.PET.prd._ndjson.Int64Converter.to_json"]], "to_json() (pytomography.io.pet.prd._ndjson.int8converter method)": [[16, "pytomography.io.PET.prd._ndjson.Int8Converter.to_json"]], "to_json() (pytomography.io.pet.prd._ndjson.jsonconverter method)": [[16, "pytomography.io.PET.prd._ndjson.JsonConverter.to_json"]], "to_json() (pytomography.io.pet.prd._ndjson.mapconverter method)": [[16, "pytomography.io.PET.prd._ndjson.MapConverter.to_json"]], "to_json() (pytomography.io.pet.prd._ndjson.ndarrayconverter method)": [[16, "pytomography.io.PET.prd._ndjson.NDArrayConverter.to_json"]], "to_json() (pytomography.io.pet.prd._ndjson.optionalconverter method)": [[16, "pytomography.io.PET.prd._ndjson.OptionalConverter.to_json"]], "to_json() (pytomography.io.pet.prd._ndjson.sizeconverter method)": [[16, "pytomography.io.PET.prd._ndjson.SizeConverter.to_json"]], "to_json() (pytomography.io.pet.prd._ndjson.stringconverter method)": [[16, "pytomography.io.PET.prd._ndjson.StringConverter.to_json"]], "to_json() (pytomography.io.pet.prd._ndjson.timeconverter method)": [[16, "pytomography.io.PET.prd._ndjson.TimeConverter.to_json"]], "to_json() (pytomography.io.pet.prd._ndjson.uint16converter method)": [[16, "pytomography.io.PET.prd._ndjson.UInt16Converter.to_json"]], "to_json() (pytomography.io.pet.prd._ndjson.uint32converter method)": [[16, "pytomography.io.PET.prd._ndjson.UInt32Converter.to_json"]], "to_json() (pytomography.io.pet.prd._ndjson.uint64converter method)": [[16, "pytomography.io.PET.prd._ndjson.UInt64Converter.to_json"]], "to_json() (pytomography.io.pet.prd._ndjson.uint8converter method)": [[16, "pytomography.io.PET.prd._ndjson.UInt8Converter.to_json"]], "to_json() (pytomography.io.pet.prd._ndjson.unionconverter method)": [[16, "pytomography.io.PET.prd._ndjson.UnionConverter.to_json"]], "to_json() (pytomography.io.pet.prd._ndjson.vectorconverter method)": [[16, "pytomography.io.PET.prd._ndjson.VectorConverter.to_json"]], "uint16_converter (in module pytomography.io.pet.prd._ndjson)": [[16, "pytomography.io.PET.prd._ndjson.uint16_converter"]], "uint32_converter (in module pytomography.io.pet.prd._ndjson)": [[16, "pytomography.io.PET.prd._ndjson.uint32_converter"]], "uint64_converter (in module pytomography.io.pet.prd._ndjson)": [[16, "pytomography.io.PET.prd._ndjson.uint64_converter"]], "uint8_converter (in module pytomography.io.pet.prd._ndjson)": [[16, "pytomography.io.PET.prd._ndjson.uint8_converter"]], "binaryprdexperimentreader (class in pytomography.io.pet.prd.binary)": [[17, "pytomography.io.PET.prd.binary.BinaryPrdExperimentReader"]], "binaryprdexperimentwriter (class in pytomography.io.pet.prd.binary)": [[17, "pytomography.io.PET.prd.binary.BinaryPrdExperimentWriter"]], "_coincidenceeventserializer (class in pytomography.io.pet.prd.binary)": [[17, "pytomography.io.PET.prd.binary._CoincidenceEventSerializer"]], "_detectorserializer (class in pytomography.io.pet.prd.binary)": [[17, "pytomography.io.PET.prd.binary._DetectorSerializer"]], "_examinformationserializer (class in pytomography.io.pet.prd.binary)": [[17, "pytomography.io.PET.prd.binary._ExamInformationSerializer"]], "_headerserializer (class in pytomography.io.pet.prd.binary)": [[17, "pytomography.io.PET.prd.binary._HeaderSerializer"]], "_institutionserializer (class in pytomography.io.pet.prd.binary)": [[17, "pytomography.io.PET.prd.binary._InstitutionSerializer"]], "_scannerinformationserializer (class in pytomography.io.pet.prd.binary)": [[17, "pytomography.io.PET.prd.binary._ScannerInformationSerializer"]], "_subjectserializer (class in pytomography.io.pet.prd.binary)": [[17, "pytomography.io.PET.prd.binary._SubjectSerializer"]], "_timeblockserializer (class in pytomography.io.pet.prd.binary)": [[17, "pytomography.io.PET.prd.binary._TimeBlockSerializer"]], "_timeframeinformationserializer (class in pytomography.io.pet.prd.binary)": [[17, "pytomography.io.PET.prd.binary._TimeFrameInformationSerializer"]], "_timeintervalserializer (class in pytomography.io.pet.prd.binary)": [[17, "pytomography.io.PET.prd.binary._TimeIntervalSerializer"]], "_read_header() (pytomography.io.pet.prd.binary.binaryprdexperimentreader method)": [[17, "pytomography.io.PET.prd.binary.BinaryPrdExperimentReader._read_header"]], "_read_time_blocks() (pytomography.io.pet.prd.binary.binaryprdexperimentreader method)": [[17, "pytomography.io.PET.prd.binary.BinaryPrdExperimentReader._read_time_blocks"]], "_write_header() (pytomography.io.pet.prd.binary.binaryprdexperimentwriter method)": [[17, "pytomography.io.PET.prd.binary.BinaryPrdExperimentWriter._write_header"]], "_write_time_blocks() (pytomography.io.pet.prd.binary.binaryprdexperimentwriter method)": [[17, "pytomography.io.PET.prd.binary.BinaryPrdExperimentWriter._write_time_blocks"]], "pytomography.io.pet.prd.binary": [[17, "module-pytomography.io.PET.prd.binary"]], "read() (pytomography.io.pet.prd.binary._coincidenceeventserializer method)": [[17, "pytomography.io.PET.prd.binary._CoincidenceEventSerializer.read"]], "read() (pytomography.io.pet.prd.binary._detectorserializer method)": [[17, "pytomography.io.PET.prd.binary._DetectorSerializer.read"]], "read() (pytomography.io.pet.prd.binary._examinformationserializer method)": [[17, "pytomography.io.PET.prd.binary._ExamInformationSerializer.read"]], "read() (pytomography.io.pet.prd.binary._headerserializer method)": [[17, "pytomography.io.PET.prd.binary._HeaderSerializer.read"]], "read() (pytomography.io.pet.prd.binary._institutionserializer method)": [[17, "pytomography.io.PET.prd.binary._InstitutionSerializer.read"]], "read() (pytomography.io.pet.prd.binary._scannerinformationserializer method)": [[17, "pytomography.io.PET.prd.binary._ScannerInformationSerializer.read"]], "read() (pytomography.io.pet.prd.binary._subjectserializer method)": [[17, "pytomography.io.PET.prd.binary._SubjectSerializer.read"]], "read() (pytomography.io.pet.prd.binary._timeblockserializer method)": [[17, "pytomography.io.PET.prd.binary._TimeBlockSerializer.read"]], "read() (pytomography.io.pet.prd.binary._timeframeinformationserializer method)": [[17, "pytomography.io.PET.prd.binary._TimeFrameInformationSerializer.read"]], "read() (pytomography.io.pet.prd.binary._timeintervalserializer method)": [[17, "pytomography.io.PET.prd.binary._TimeIntervalSerializer.read"]], "write() (pytomography.io.pet.prd.binary._coincidenceeventserializer method)": [[17, "pytomography.io.PET.prd.binary._CoincidenceEventSerializer.write"]], "write() (pytomography.io.pet.prd.binary._detectorserializer method)": [[17, "pytomography.io.PET.prd.binary._DetectorSerializer.write"]], "write() (pytomography.io.pet.prd.binary._examinformationserializer method)": [[17, "pytomography.io.PET.prd.binary._ExamInformationSerializer.write"]], "write() (pytomography.io.pet.prd.binary._headerserializer method)": [[17, "pytomography.io.PET.prd.binary._HeaderSerializer.write"]], "write() (pytomography.io.pet.prd.binary._institutionserializer method)": [[17, "pytomography.io.PET.prd.binary._InstitutionSerializer.write"]], "write() (pytomography.io.pet.prd.binary._scannerinformationserializer method)": [[17, "pytomography.io.PET.prd.binary._ScannerInformationSerializer.write"]], "write() (pytomography.io.pet.prd.binary._subjectserializer method)": [[17, "pytomography.io.PET.prd.binary._SubjectSerializer.write"]], "write() (pytomography.io.pet.prd.binary._timeblockserializer method)": [[17, "pytomography.io.PET.prd.binary._TimeBlockSerializer.write"]], "write() (pytomography.io.pet.prd.binary._timeframeinformationserializer method)": [[17, "pytomography.io.PET.prd.binary._TimeFrameInformationSerializer.write"]], "write() (pytomography.io.pet.prd.binary._timeintervalserializer method)": [[17, "pytomography.io.PET.prd.binary._TimeIntervalSerializer.write"]], "write_numpy() (pytomography.io.pet.prd.binary._coincidenceeventserializer method)": [[17, "pytomography.io.PET.prd.binary._CoincidenceEventSerializer.write_numpy"]], "write_numpy() (pytomography.io.pet.prd.binary._detectorserializer method)": [[17, "pytomography.io.PET.prd.binary._DetectorSerializer.write_numpy"]], "write_numpy() (pytomography.io.pet.prd.binary._examinformationserializer method)": [[17, "pytomography.io.PET.prd.binary._ExamInformationSerializer.write_numpy"]], "write_numpy() (pytomography.io.pet.prd.binary._headerserializer method)": [[17, "pytomography.io.PET.prd.binary._HeaderSerializer.write_numpy"]], "write_numpy() (pytomography.io.pet.prd.binary._institutionserializer method)": [[17, "pytomography.io.PET.prd.binary._InstitutionSerializer.write_numpy"]], "write_numpy() (pytomography.io.pet.prd.binary._scannerinformationserializer method)": [[17, "pytomography.io.PET.prd.binary._ScannerInformationSerializer.write_numpy"]], "write_numpy() (pytomography.io.pet.prd.binary._subjectserializer method)": [[17, "pytomography.io.PET.prd.binary._SubjectSerializer.write_numpy"]], "write_numpy() (pytomography.io.pet.prd.binary._timeblockserializer method)": [[17, "pytomography.io.PET.prd.binary._TimeBlockSerializer.write_numpy"]], "write_numpy() (pytomography.io.pet.prd.binary._timeframeinformationserializer method)": [[17, "pytomography.io.PET.prd.binary._TimeFrameInformationSerializer.write_numpy"]], "write_numpy() (pytomography.io.pet.prd.binary._timeintervalserializer method)": [[17, "pytomography.io.PET.prd.binary._TimeIntervalSerializer.write_numpy"]], "binaryprdexperimentreader (class in pytomography.io.pet.prd)": [[18, "pytomography.io.PET.prd.BinaryPrdExperimentReader"]], "binaryprdexperimentwriter (class in pytomography.io.pet.prd)": [[18, "pytomography.io.PET.prd.BinaryPrdExperimentWriter"]], "coincidenceevent (class in pytomography.io.pet.prd)": [[18, "pytomography.io.PET.prd.CoincidenceEvent"]], "complexdouble (in module pytomography.io.pet.prd)": [[18, "pytomography.io.PET.prd.ComplexDouble"]], "complexfloat (in module pytomography.io.pet.prd)": [[18, "pytomography.io.PET.prd.ComplexFloat"]], "datetime (class in pytomography.io.pet.prd)": [[18, "pytomography.io.PET.prd.DateTime"]], "detector (class in pytomography.io.pet.prd)": [[18, "pytomography.io.PET.prd.Detector"]], "examinformation (class in pytomography.io.pet.prd)": [[18, "pytomography.io.PET.prd.ExamInformation"]], "float32 (in module pytomography.io.pet.prd)": [[18, "pytomography.io.PET.prd.Float32"]], "float64 (in module pytomography.io.pet.prd)": [[18, "pytomography.io.PET.prd.Float64"]], "header (class in pytomography.io.pet.prd)": [[18, "pytomography.io.PET.prd.Header"]], "institution (class in pytomography.io.pet.prd)": [[18, "pytomography.io.PET.prd.Institution"]], "int16 (in module pytomography.io.pet.prd)": [[18, "pytomography.io.PET.prd.Int16"]], "int32 (in module pytomography.io.pet.prd)": [[18, "pytomography.io.PET.prd.Int32"]], "int64 (in module pytomography.io.pet.prd)": [[18, "pytomography.io.PET.prd.Int64"]], "int8 (in module pytomography.io.pet.prd)": [[18, "pytomography.io.PET.prd.Int8"]], "ndjsonprdexperimentreader (class in pytomography.io.pet.prd)": [[18, "pytomography.io.PET.prd.NDJsonPrdExperimentReader"]], "ndjsonprdexperimentwriter (class in pytomography.io.pet.prd)": [[18, "pytomography.io.PET.prd.NDJsonPrdExperimentWriter"]], "outofrangeenum (class in pytomography.io.pet.prd)": [[18, "pytomography.io.PET.prd.OutOfRangeEnum"]], "prdexperimentreaderbase (class in pytomography.io.pet.prd)": [[18, "pytomography.io.PET.prd.PrdExperimentReaderBase"]], "prdexperimentwriterbase (class in pytomography.io.pet.prd)": [[18, "pytomography.io.PET.prd.PrdExperimentWriterBase"]], "protocolerror": [[18, "pytomography.io.PET.prd.ProtocolError"], [22, "pytomography.io.PET.prd.yardl_types.ProtocolError"]], "scannerinformation (class in pytomography.io.pet.prd)": [[18, "pytomography.io.PET.prd.ScannerInformation"]], "size (in module pytomography.io.pet.prd)": [[18, "pytomography.io.PET.prd.Size"]], "subject (class in pytomography.io.pet.prd)": [[18, "pytomography.io.PET.prd.Subject"]], "t (pytomography.io.pet.prd.prdexperimentreaderbase attribute)": [[18, "pytomography.io.PET.prd.PrdExperimentReaderBase.T"]], "time (class in pytomography.io.pet.prd)": [[18, "pytomography.io.PET.prd.Time"]], "timeblock (class in pytomography.io.pet.prd)": [[18, "pytomography.io.PET.prd.TimeBlock"]], "timeframeinformation (class in pytomography.io.pet.prd)": [[18, "pytomography.io.PET.prd.TimeFrameInformation"]], "timeinterval (class in pytomography.io.pet.prd)": [[18, "pytomography.io.PET.prd.TimeInterval"]], "uint16 (in module pytomography.io.pet.prd)": [[18, "pytomography.io.PET.prd.UInt16"]], "uint32 (in module pytomography.io.pet.prd)": [[18, "pytomography.io.PET.prd.UInt32"]], "uint64 (in module pytomography.io.pet.prd)": [[18, "pytomography.io.PET.prd.UInt64"]], "uint8 (in module pytomography.io.pet.prd)": [[18, "pytomography.io.PET.prd.UInt8"]], "unioncase (class in pytomography.io.pet.prd)": [[18, "pytomography.io.PET.prd.UnionCase"]], "_min_numpy_version (in module pytomography.io.pet.prd)": [[18, "pytomography.io.PET.prd._MIN_NUMPY_VERSION"]], "_nanoseconds_per_day (pytomography.io.pet.prd.time attribute)": [[18, "pytomography.io.PET.prd.Time._NANOSECONDS_PER_DAY"]], "_t (in module pytomography.io.pet.prd)": [[18, "pytomography.io.PET.prd._T"]], "__enter__() (pytomography.io.pet.prd.prdexperimentreaderbase method)": [[18, "pytomography.io.PET.prd.PrdExperimentReaderBase.__enter__"]], "__enter__() (pytomography.io.pet.prd.prdexperimentwriterbase method)": [[18, "pytomography.io.PET.prd.PrdExperimentWriterBase.__enter__"]], "__eq__() (pytomography.io.pet.prd.coincidenceevent method)": [[18, "pytomography.io.PET.prd.CoincidenceEvent.__eq__"]], "__eq__() (pytomography.io.pet.prd.datetime method)": [[18, "pytomography.io.PET.prd.DateTime.__eq__"]], "__eq__() (pytomography.io.pet.prd.detector method)": [[18, "pytomography.io.PET.prd.Detector.__eq__"]], "__eq__() (pytomography.io.pet.prd.examinformation method)": [[18, "pytomography.io.PET.prd.ExamInformation.__eq__"]], "__eq__() (pytomography.io.pet.prd.header method)": [[18, "pytomography.io.PET.prd.Header.__eq__"]], "__eq__() (pytomography.io.pet.prd.institution method)": [[18, "pytomography.io.PET.prd.Institution.__eq__"]], "__eq__() (pytomography.io.pet.prd.outofrangeenum method)": [[18, "pytomography.io.PET.prd.OutOfRangeEnum.__eq__"]], "__eq__() (pytomography.io.pet.prd.scannerinformation method)": [[18, "pytomography.io.PET.prd.ScannerInformation.__eq__"]], "__eq__() (pytomography.io.pet.prd.subject method)": [[18, "pytomography.io.PET.prd.Subject.__eq__"]], "__eq__() (pytomography.io.pet.prd.time method)": [[18, "pytomography.io.PET.prd.Time.__eq__"]], "__eq__() (pytomography.io.pet.prd.timeblock method)": [[18, "pytomography.io.PET.prd.TimeBlock.__eq__"]], "__eq__() (pytomography.io.pet.prd.timeframeinformation method)": [[18, "pytomography.io.PET.prd.TimeFrameInformation.__eq__"]], "__eq__() (pytomography.io.pet.prd.timeinterval method)": [[18, "pytomography.io.PET.prd.TimeInterval.__eq__"]], "__eq__() (pytomography.io.pet.prd.unioncase method)": [[18, "pytomography.io.PET.prd.UnionCase.__eq__"]], "__exit__() (pytomography.io.pet.prd.prdexperimentreaderbase method)": [[18, "pytomography.io.PET.prd.PrdExperimentReaderBase.__exit__"]], "__exit__() (pytomography.io.pet.prd.prdexperimentwriterbase method)": [[18, "pytomography.io.PET.prd.PrdExperimentWriterBase.__exit__"]], "__hash__() (pytomography.io.pet.prd.datetime method)": [[18, "pytomography.io.PET.prd.DateTime.__hash__"]], "__hash__() (pytomography.io.pet.prd.outofrangeenum method)": [[18, "pytomography.io.PET.prd.OutOfRangeEnum.__hash__"]], "__repr__() (pytomography.io.pet.prd.coincidenceevent method)": [[18, "pytomography.io.PET.prd.CoincidenceEvent.__repr__"]], "__repr__() (pytomography.io.pet.prd.datetime method)": [[18, "pytomography.io.PET.prd.DateTime.__repr__"]], "__repr__() (pytomography.io.pet.prd.detector method)": [[18, "pytomography.io.PET.prd.Detector.__repr__"]], "__repr__() (pytomography.io.pet.prd.examinformation method)": [[18, "pytomography.io.PET.prd.ExamInformation.__repr__"]], "__repr__() (pytomography.io.pet.prd.header method)": [[18, "pytomography.io.PET.prd.Header.__repr__"]], "__repr__() (pytomography.io.pet.prd.institution method)": [[18, "pytomography.io.PET.prd.Institution.__repr__"]], "__repr__() (pytomography.io.pet.prd.outofrangeenum method)": [[18, "pytomography.io.PET.prd.OutOfRangeEnum.__repr__"]], "__repr__() (pytomography.io.pet.prd.scannerinformation method)": [[18, "pytomography.io.PET.prd.ScannerInformation.__repr__"]], "__repr__() (pytomography.io.pet.prd.subject method)": [[18, "pytomography.io.PET.prd.Subject.__repr__"]], "__repr__() (pytomography.io.pet.prd.time method)": [[18, "pytomography.io.PET.prd.Time.__repr__"]], "__repr__() (pytomography.io.pet.prd.timeblock method)": [[18, "pytomography.io.PET.prd.TimeBlock.__repr__"]], "__repr__() (pytomography.io.pet.prd.timeframeinformation method)": [[18, "pytomography.io.PET.prd.TimeFrameInformation.__repr__"]], "__repr__() (pytomography.io.pet.prd.timeinterval method)": [[18, "pytomography.io.PET.prd.TimeInterval.__repr__"]], "__repr__() (pytomography.io.pet.prd.unioncase method)": [[18, "pytomography.io.PET.prd.UnionCase.__repr__"]], "__str__() (pytomography.io.pet.prd.coincidenceevent method)": [[18, "pytomography.io.PET.prd.CoincidenceEvent.__str__"]], "__str__() (pytomography.io.pet.prd.datetime method)": [[18, "pytomography.io.PET.prd.DateTime.__str__"]], "__str__() (pytomography.io.pet.prd.detector method)": [[18, "pytomography.io.PET.prd.Detector.__str__"]], "__str__() (pytomography.io.pet.prd.examinformation method)": [[18, "pytomography.io.PET.prd.ExamInformation.__str__"]], "__str__() (pytomography.io.pet.prd.header method)": [[18, "pytomography.io.PET.prd.Header.__str__"]], "__str__() (pytomography.io.pet.prd.institution method)": [[18, "pytomography.io.PET.prd.Institution.__str__"]], "__str__() (pytomography.io.pet.prd.outofrangeenum method)": [[18, "pytomography.io.PET.prd.OutOfRangeEnum.__str__"]], "__str__() (pytomography.io.pet.prd.scannerinformation method)": [[18, "pytomography.io.PET.prd.ScannerInformation.__str__"]], "__str__() (pytomography.io.pet.prd.subject method)": [[18, "pytomography.io.PET.prd.Subject.__str__"]], "__str__() (pytomography.io.pet.prd.time method)": [[18, "pytomography.io.PET.prd.Time.__str__"]], "__str__() (pytomography.io.pet.prd.timeblock method)": [[18, "pytomography.io.PET.prd.TimeBlock.__str__"]], "__str__() (pytomography.io.pet.prd.timeframeinformation method)": [[18, "pytomography.io.PET.prd.TimeFrameInformation.__str__"]], "__str__() (pytomography.io.pet.prd.timeinterval method)": [[18, "pytomography.io.PET.prd.TimeInterval.__str__"]], "__str__() (pytomography.io.pet.prd.unioncase method)": [[18, "pytomography.io.PET.prd.UnionCase.__str__"]], "_end_stream() (pytomography.io.pet.prd.prdexperimentwriterbase method)": [[18, "pytomography.io.PET.prd.PrdExperimentWriterBase._end_stream"]], "_missing_() (pytomography.io.pet.prd.outofrangeenum class method)": [[18, "pytomography.io.PET.prd.OutOfRangeEnum._missing_"]], "_parse_version() (in module pytomography.io.pet.prd)": [[18, "pytomography.io.PET.prd._parse_version"]], "_raise_unexpected_state() (pytomography.io.pet.prd.prdexperimentreaderbase method)": [[18, "pytomography.io.PET.prd.PrdExperimentReaderBase._raise_unexpected_state"]], "_raise_unexpected_state() (pytomography.io.pet.prd.prdexperimentwriterbase method)": [[18, "pytomography.io.PET.prd.PrdExperimentWriterBase._raise_unexpected_state"]], "_read_header() (pytomography.io.pet.prd.binaryprdexperimentreader method)": [[18, "pytomography.io.PET.prd.BinaryPrdExperimentReader._read_header"]], "_read_header() (pytomography.io.pet.prd.ndjsonprdexperimentreader method)": [[18, "pytomography.io.PET.prd.NDJsonPrdExperimentReader._read_header"]], "_read_header() (pytomography.io.pet.prd.prdexperimentreaderbase method)": [[18, "pytomography.io.PET.prd.PrdExperimentReaderBase._read_header"]], "_read_time_blocks() (pytomography.io.pet.prd.binaryprdexperimentreader method)": [[18, "pytomography.io.PET.prd.BinaryPrdExperimentReader._read_time_blocks"]], "_read_time_blocks() (pytomography.io.pet.prd.ndjsonprdexperimentreader method)": [[18, "pytomography.io.PET.prd.NDJsonPrdExperimentReader._read_time_blocks"]], "_read_time_blocks() (pytomography.io.pet.prd.prdexperimentreaderbase method)": [[18, "pytomography.io.PET.prd.PrdExperimentReaderBase._read_time_blocks"]], "_state_to_method_name() (pytomography.io.pet.prd.prdexperimentreaderbase method)": [[18, "pytomography.io.PET.prd.PrdExperimentReaderBase._state_to_method_name"]], "_state_to_method_name() (pytomography.io.pet.prd.prdexperimentwriterbase method)": [[18, "pytomography.io.PET.prd.PrdExperimentWriterBase._state_to_method_name"]], "_wrap_iterable() (pytomography.io.pet.prd.prdexperimentreaderbase method)": [[18, "pytomography.io.PET.prd.PrdExperimentReaderBase._wrap_iterable"]], "_write_header() (pytomography.io.pet.prd.binaryprdexperimentwriter method)": [[18, "pytomography.io.PET.prd.BinaryPrdExperimentWriter._write_header"]], "_write_header() (pytomography.io.pet.prd.ndjsonprdexperimentwriter method)": [[18, "pytomography.io.PET.prd.NDJsonPrdExperimentWriter._write_header"]], "_write_header() (pytomography.io.pet.prd.prdexperimentwriterbase method)": [[18, "pytomography.io.PET.prd.PrdExperimentWriterBase._write_header"]], "_write_time_blocks() (pytomography.io.pet.prd.binaryprdexperimentwriter method)": [[18, "pytomography.io.PET.prd.BinaryPrdExperimentWriter._write_time_blocks"]], "_write_time_blocks() (pytomography.io.pet.prd.ndjsonprdexperimentwriter method)": [[18, "pytomography.io.PET.prd.NDJsonPrdExperimentWriter._write_time_blocks"]], "_write_time_blocks() (pytomography.io.pet.prd.prdexperimentwriterbase method)": [[18, "pytomography.io.PET.prd.PrdExperimentWriterBase._write_time_blocks"]], "address (pytomography.io.pet.prd.institution attribute)": [[18, "pytomography.io.PET.prd.Institution.address"]], "close() (pytomography.io.pet.prd.prdexperimentreaderbase method)": [[18, "pytomography.io.PET.prd.PrdExperimentReaderBase.close"]], "close() (pytomography.io.pet.prd.prdexperimentwriterbase method)": [[18, "pytomography.io.PET.prd.PrdExperimentWriterBase.close"]], "copy_to() (pytomography.io.pet.prd.prdexperimentreaderbase method)": [[18, "pytomography.io.PET.prd.PrdExperimentReaderBase.copy_to"]], "delayed_events (pytomography.io.pet.prd.timeblock attribute)": [[18, "pytomography.io.PET.prd.TimeBlock.delayed_events"]], "detector_1_id (pytomography.io.pet.prd.coincidenceevent attribute)": [[18, "pytomography.io.PET.prd.CoincidenceEvent.detector_1_id"]], "detector_2_id (pytomography.io.pet.prd.coincidenceevent attribute)": [[18, "pytomography.io.PET.prd.CoincidenceEvent.detector_2_id"]], "detectors (pytomography.io.pet.prd.scannerinformation attribute)": [[18, "pytomography.io.PET.prd.ScannerInformation.detectors"]], "energy_1_idx (pytomography.io.pet.prd.coincidenceevent attribute)": [[18, "pytomography.io.PET.prd.CoincidenceEvent.energy_1_idx"]], "energy_2_idx (pytomography.io.pet.prd.coincidenceevent attribute)": [[18, "pytomography.io.PET.prd.CoincidenceEvent.energy_2_idx"]], "energy_bin_edges (pytomography.io.pet.prd.scannerinformation attribute)": [[18, "pytomography.io.PET.prd.ScannerInformation.energy_bin_edges"]], "energy_resolution_at_511 (pytomography.io.pet.prd.scannerinformation attribute)": [[18, "pytomography.io.PET.prd.ScannerInformation.energy_resolution_at_511"]], "exam (pytomography.io.pet.prd.header attribute)": [[18, "pytomography.io.PET.prd.Header.exam"]], "from_components() (pytomography.io.pet.prd.datetime static method)": [[18, "pytomography.io.PET.prd.DateTime.from_components"]], "from_components() (pytomography.io.pet.prd.time static method)": [[18, "pytomography.io.PET.prd.Time.from_components"]], "from_datetime() (pytomography.io.pet.prd.datetime static method)": [[18, "pytomography.io.PET.prd.DateTime.from_datetime"]], "from_time() (pytomography.io.pet.prd.time static method)": [[18, "pytomography.io.PET.prd.Time.from_time"]], "get_dtype (in module pytomography.io.pet.prd)": [[18, "pytomography.io.PET.prd.get_dtype"]], "id (pytomography.io.pet.prd.detector attribute)": [[18, "pytomography.io.PET.prd.Detector.id"]], "id (pytomography.io.pet.prd.subject attribute)": [[18, "pytomography.io.PET.prd.Subject.id"]], "id (pytomography.io.pet.prd.timeblock attribute)": [[18, "pytomography.io.PET.prd.TimeBlock.id"]], "index (pytomography.io.pet.prd.unioncase attribute)": [[18, "pytomography.io.PET.prd.UnionCase.index"]], "institution (pytomography.io.pet.prd.examinformation attribute)": [[18, "pytomography.io.PET.prd.ExamInformation.institution"]], "listmode_time_block_duration (pytomography.io.pet.prd.scannerinformation attribute)": [[18, "pytomography.io.PET.prd.ScannerInformation.listmode_time_block_duration"]], "model_name (pytomography.io.pet.prd.scannerinformation attribute)": [[18, "pytomography.io.PET.prd.ScannerInformation.model_name"]], "name (pytomography.io.pet.prd.institution attribute)": [[18, "pytomography.io.PET.prd.Institution.name"]], "name (pytomography.io.pet.prd.subject attribute)": [[18, "pytomography.io.PET.prd.Subject.name"]], "now() (pytomography.io.pet.prd.datetime static method)": [[18, "pytomography.io.PET.prd.DateTime.now"]], "number_of_detectors() (pytomography.io.pet.prd.scannerinformation method)": [[18, "pytomography.io.PET.prd.ScannerInformation.number_of_detectors"]], "number_of_energy_bins() (pytomography.io.pet.prd.scannerinformation method)": [[18, "pytomography.io.PET.prd.ScannerInformation.number_of_energy_bins"]], "number_of_time_frames() (pytomography.io.pet.prd.timeframeinformation method)": [[18, "pytomography.io.PET.prd.TimeFrameInformation.number_of_time_frames"]], "number_of_tof_bins() (pytomography.io.pet.prd.scannerinformation method)": [[18, "pytomography.io.PET.prd.ScannerInformation.number_of_tof_bins"]], "numpy_value (pytomography.io.pet.prd.datetime property)": [[18, "pytomography.io.PET.prd.DateTime.numpy_value"]], "numpy_value (pytomography.io.pet.prd.time property)": [[18, "pytomography.io.PET.prd.Time.numpy_value"]], "parse() (pytomography.io.pet.prd.datetime static method)": [[18, "pytomography.io.PET.prd.DateTime.parse"]], "parse() (pytomography.io.pet.prd.time static method)": [[18, "pytomography.io.PET.prd.Time.parse"]], "prompt_events (pytomography.io.pet.prd.timeblock attribute)": [[18, "pytomography.io.PET.prd.TimeBlock.prompt_events"]], "protocol (pytomography.io.pet.prd.examinformation attribute)": [[18, "pytomography.io.PET.prd.ExamInformation.protocol"]], "pytomography.io.pet.prd": [[18, "module-pytomography.io.PET.prd"]], "read_header() (pytomography.io.pet.prd.prdexperimentreaderbase method)": [[18, "pytomography.io.PET.prd.PrdExperimentReaderBase.read_header"]], "read_time_blocks() (pytomography.io.pet.prd.prdexperimentreaderbase method)": [[18, "pytomography.io.PET.prd.PrdExperimentReaderBase.read_time_blocks"]], "scanner (pytomography.io.pet.prd.header attribute)": [[18, "pytomography.io.PET.prd.Header.scanner"]], "schema (pytomography.io.pet.prd.prdexperimentreaderbase attribute)": [[18, "pytomography.io.PET.prd.PrdExperimentReaderBase.schema"]], "schema (pytomography.io.pet.prd.prdexperimentwriterbase attribute)": [[18, "pytomography.io.PET.prd.PrdExperimentWriterBase.schema"]], "start (pytomography.io.pet.prd.timeinterval attribute)": [[18, "pytomography.io.PET.prd.TimeInterval.start"]], "start_of_acquisition (pytomography.io.pet.prd.examinformation attribute)": [[18, "pytomography.io.PET.prd.ExamInformation.start_of_acquisition"]], "stop (pytomography.io.pet.prd.timeinterval attribute)": [[18, "pytomography.io.PET.prd.TimeInterval.stop"]], "structural_equal() (in module pytomography.io.pet.prd)": [[18, "pytomography.io.PET.prd.structural_equal"]], "subject (pytomography.io.pet.prd.examinformation attribute)": [[18, "pytomography.io.PET.prd.ExamInformation.subject"]], "tag (pytomography.io.pet.prd.unioncase attribute)": [[18, "pytomography.io.PET.prd.UnionCase.tag"]], "time_frames (pytomography.io.pet.prd.timeframeinformation attribute)": [[18, "pytomography.io.PET.prd.TimeFrameInformation.time_frames"]], "to_datetime() (pytomography.io.pet.prd.datetime method)": [[18, "pytomography.io.PET.prd.DateTime.to_datetime"]], "tof_bin_edges (pytomography.io.pet.prd.scannerinformation attribute)": [[18, "pytomography.io.PET.prd.ScannerInformation.tof_bin_edges"]], "tof_idx (pytomography.io.pet.prd.coincidenceevent attribute)": [[18, "pytomography.io.PET.prd.CoincidenceEvent.tof_idx"]], "tof_resolution (pytomography.io.pet.prd.scannerinformation attribute)": [[18, "pytomography.io.PET.prd.ScannerInformation.tof_resolution"]], "write_header() (pytomography.io.pet.prd.prdexperimentwriterbase method)": [[18, "pytomography.io.PET.prd.PrdExperimentWriterBase.write_header"]], "write_time_blocks() (pytomography.io.pet.prd.prdexperimentwriterbase method)": [[18, "pytomography.io.PET.prd.PrdExperimentWriterBase.write_time_blocks"]], "x (pytomography.io.pet.prd.detector attribute)": [[18, "pytomography.io.PET.prd.Detector.x"]], "y (pytomography.io.pet.prd.detector attribute)": [[18, "pytomography.io.PET.prd.Detector.y"]], "z (pytomography.io.pet.prd.detector attribute)": [[18, "pytomography.io.PET.prd.Detector.z"]], "ndjsonprdexperimentreader (class in pytomography.io.pet.prd.ndjson)": [[19, "pytomography.io.PET.prd.ndjson.NDJsonPrdExperimentReader"]], "ndjsonprdexperimentwriter (class in pytomography.io.pet.prd.ndjson)": [[19, "pytomography.io.PET.prd.ndjson.NDJsonPrdExperimentWriter"]], "_coincidenceeventconverter (class in pytomography.io.pet.prd.ndjson)": [[19, "pytomography.io.PET.prd.ndjson._CoincidenceEventConverter"]], "_detectorconverter (class in pytomography.io.pet.prd.ndjson)": [[19, "pytomography.io.PET.prd.ndjson._DetectorConverter"]], "_examinformationconverter (class in pytomography.io.pet.prd.ndjson)": [[19, "pytomography.io.PET.prd.ndjson._ExamInformationConverter"]], "_headerconverter (class in pytomography.io.pet.prd.ndjson)": [[19, "pytomography.io.PET.prd.ndjson._HeaderConverter"]], "_institutionconverter (class in pytomography.io.pet.prd.ndjson)": [[19, "pytomography.io.PET.prd.ndjson._InstitutionConverter"]], "_scannerinformationconverter (class in pytomography.io.pet.prd.ndjson)": [[19, "pytomography.io.PET.prd.ndjson._ScannerInformationConverter"]], "_subjectconverter (class in pytomography.io.pet.prd.ndjson)": [[19, "pytomography.io.PET.prd.ndjson._SubjectConverter"]], "_timeblockconverter (class in pytomography.io.pet.prd.ndjson)": [[19, "pytomography.io.PET.prd.ndjson._TimeBlockConverter"]], "_timeframeinformationconverter (class in pytomography.io.pet.prd.ndjson)": [[19, "pytomography.io.PET.prd.ndjson._TimeFrameInformationConverter"]], "_timeintervalconverter (class in pytomography.io.pet.prd.ndjson)": [[19, "pytomography.io.PET.prd.ndjson._TimeIntervalConverter"]], "_read_header() (pytomography.io.pet.prd.ndjson.ndjsonprdexperimentreader method)": [[19, "pytomography.io.PET.prd.ndjson.NDJsonPrdExperimentReader._read_header"]], "_read_time_blocks() (pytomography.io.pet.prd.ndjson.ndjsonprdexperimentreader method)": [[19, "pytomography.io.PET.prd.ndjson.NDJsonPrdExperimentReader._read_time_blocks"]], "_write_header() (pytomography.io.pet.prd.ndjson.ndjsonprdexperimentwriter method)": [[19, "pytomography.io.PET.prd.ndjson.NDJsonPrdExperimentWriter._write_header"]], "_write_time_blocks() (pytomography.io.pet.prd.ndjson.ndjsonprdexperimentwriter method)": [[19, "pytomography.io.PET.prd.ndjson.NDJsonPrdExperimentWriter._write_time_blocks"]], "from_json() (pytomography.io.pet.prd.ndjson._coincidenceeventconverter method)": [[19, "pytomography.io.PET.prd.ndjson._CoincidenceEventConverter.from_json"]], "from_json() (pytomography.io.pet.prd.ndjson._detectorconverter method)": [[19, "pytomography.io.PET.prd.ndjson._DetectorConverter.from_json"]], "from_json() (pytomography.io.pet.prd.ndjson._examinformationconverter method)": [[19, "pytomography.io.PET.prd.ndjson._ExamInformationConverter.from_json"]], "from_json() (pytomography.io.pet.prd.ndjson._headerconverter method)": [[19, "pytomography.io.PET.prd.ndjson._HeaderConverter.from_json"]], "from_json() (pytomography.io.pet.prd.ndjson._institutionconverter method)": [[19, "pytomography.io.PET.prd.ndjson._InstitutionConverter.from_json"]], "from_json() (pytomography.io.pet.prd.ndjson._scannerinformationconverter method)": [[19, "pytomography.io.PET.prd.ndjson._ScannerInformationConverter.from_json"]], "from_json() (pytomography.io.pet.prd.ndjson._subjectconverter method)": [[19, "pytomography.io.PET.prd.ndjson._SubjectConverter.from_json"]], "from_json() (pytomography.io.pet.prd.ndjson._timeblockconverter method)": [[19, "pytomography.io.PET.prd.ndjson._TimeBlockConverter.from_json"]], "from_json() (pytomography.io.pet.prd.ndjson._timeframeinformationconverter method)": [[19, "pytomography.io.PET.prd.ndjson._TimeFrameInformationConverter.from_json"]], "from_json() (pytomography.io.pet.prd.ndjson._timeintervalconverter method)": [[19, "pytomography.io.PET.prd.ndjson._TimeIntervalConverter.from_json"]], "from_json_to_numpy() (pytomography.io.pet.prd.ndjson._coincidenceeventconverter method)": [[19, "pytomography.io.PET.prd.ndjson._CoincidenceEventConverter.from_json_to_numpy"]], "from_json_to_numpy() (pytomography.io.pet.prd.ndjson._detectorconverter method)": [[19, "pytomography.io.PET.prd.ndjson._DetectorConverter.from_json_to_numpy"]], "from_json_to_numpy() (pytomography.io.pet.prd.ndjson._examinformationconverter method)": [[19, "pytomography.io.PET.prd.ndjson._ExamInformationConverter.from_json_to_numpy"]], "from_json_to_numpy() (pytomography.io.pet.prd.ndjson._headerconverter method)": [[19, "pytomography.io.PET.prd.ndjson._HeaderConverter.from_json_to_numpy"]], "from_json_to_numpy() (pytomography.io.pet.prd.ndjson._institutionconverter method)": [[19, "pytomography.io.PET.prd.ndjson._InstitutionConverter.from_json_to_numpy"]], "from_json_to_numpy() (pytomography.io.pet.prd.ndjson._scannerinformationconverter method)": [[19, "pytomography.io.PET.prd.ndjson._ScannerInformationConverter.from_json_to_numpy"]], "from_json_to_numpy() (pytomography.io.pet.prd.ndjson._subjectconverter method)": [[19, "pytomography.io.PET.prd.ndjson._SubjectConverter.from_json_to_numpy"]], "from_json_to_numpy() (pytomography.io.pet.prd.ndjson._timeblockconverter method)": [[19, "pytomography.io.PET.prd.ndjson._TimeBlockConverter.from_json_to_numpy"]], "from_json_to_numpy() (pytomography.io.pet.prd.ndjson._timeframeinformationconverter method)": [[19, "pytomography.io.PET.prd.ndjson._TimeFrameInformationConverter.from_json_to_numpy"]], "from_json_to_numpy() (pytomography.io.pet.prd.ndjson._timeintervalconverter method)": [[19, "pytomography.io.PET.prd.ndjson._TimeIntervalConverter.from_json_to_numpy"]], "numpy_to_json() (pytomography.io.pet.prd.ndjson._coincidenceeventconverter method)": [[19, "pytomography.io.PET.prd.ndjson._CoincidenceEventConverter.numpy_to_json"]], "numpy_to_json() (pytomography.io.pet.prd.ndjson._detectorconverter method)": [[19, "pytomography.io.PET.prd.ndjson._DetectorConverter.numpy_to_json"]], "numpy_to_json() (pytomography.io.pet.prd.ndjson._examinformationconverter method)": [[19, "pytomography.io.PET.prd.ndjson._ExamInformationConverter.numpy_to_json"]], "numpy_to_json() (pytomography.io.pet.prd.ndjson._headerconverter method)": [[19, "pytomography.io.PET.prd.ndjson._HeaderConverter.numpy_to_json"]], "numpy_to_json() (pytomography.io.pet.prd.ndjson._institutionconverter method)": [[19, "pytomography.io.PET.prd.ndjson._InstitutionConverter.numpy_to_json"]], "numpy_to_json() (pytomography.io.pet.prd.ndjson._scannerinformationconverter method)": [[19, "pytomography.io.PET.prd.ndjson._ScannerInformationConverter.numpy_to_json"]], "numpy_to_json() (pytomography.io.pet.prd.ndjson._subjectconverter method)": [[19, "pytomography.io.PET.prd.ndjson._SubjectConverter.numpy_to_json"]], "numpy_to_json() (pytomography.io.pet.prd.ndjson._timeblockconverter method)": [[19, "pytomography.io.PET.prd.ndjson._TimeBlockConverter.numpy_to_json"]], "numpy_to_json() (pytomography.io.pet.prd.ndjson._timeframeinformationconverter method)": [[19, "pytomography.io.PET.prd.ndjson._TimeFrameInformationConverter.numpy_to_json"]], "numpy_to_json() (pytomography.io.pet.prd.ndjson._timeintervalconverter method)": [[19, "pytomography.io.PET.prd.ndjson._TimeIntervalConverter.numpy_to_json"]], "pytomography.io.pet.prd.ndjson": [[19, "module-pytomography.io.PET.prd.ndjson"]], "to_json() (pytomography.io.pet.prd.ndjson._coincidenceeventconverter method)": [[19, "pytomography.io.PET.prd.ndjson._CoincidenceEventConverter.to_json"]], "to_json() (pytomography.io.pet.prd.ndjson._detectorconverter method)": [[19, "pytomography.io.PET.prd.ndjson._DetectorConverter.to_json"]], "to_json() (pytomography.io.pet.prd.ndjson._examinformationconverter method)": [[19, "pytomography.io.PET.prd.ndjson._ExamInformationConverter.to_json"]], "to_json() (pytomography.io.pet.prd.ndjson._headerconverter method)": [[19, "pytomography.io.PET.prd.ndjson._HeaderConverter.to_json"]], "to_json() (pytomography.io.pet.prd.ndjson._institutionconverter method)": [[19, "pytomography.io.PET.prd.ndjson._InstitutionConverter.to_json"]], "to_json() (pytomography.io.pet.prd.ndjson._scannerinformationconverter method)": [[19, "pytomography.io.PET.prd.ndjson._ScannerInformationConverter.to_json"]], "to_json() (pytomography.io.pet.prd.ndjson._subjectconverter method)": [[19, "pytomography.io.PET.prd.ndjson._SubjectConverter.to_json"]], "to_json() (pytomography.io.pet.prd.ndjson._timeblockconverter method)": [[19, "pytomography.io.PET.prd.ndjson._TimeBlockConverter.to_json"]], "to_json() (pytomography.io.pet.prd.ndjson._timeframeinformationconverter method)": [[19, "pytomography.io.PET.prd.ndjson._TimeFrameInformationConverter.to_json"]], "to_json() (pytomography.io.pet.prd.ndjson._timeintervalconverter method)": [[19, "pytomography.io.PET.prd.ndjson._TimeIntervalConverter.to_json"]], "prdexperimentreaderbase (class in pytomography.io.pet.prd.protocols)": [[20, "pytomography.io.PET.prd.protocols.PrdExperimentReaderBase"]], "prdexperimentwriterbase (class in pytomography.io.pet.prd.protocols)": [[20, "pytomography.io.PET.prd.protocols.PrdExperimentWriterBase"]], "t (pytomography.io.pet.prd.protocols.prdexperimentreaderbase attribute)": [[20, "pytomography.io.PET.prd.protocols.PrdExperimentReaderBase.T"]], "__enter__() (pytomography.io.pet.prd.protocols.prdexperimentreaderbase method)": [[20, "pytomography.io.PET.prd.protocols.PrdExperimentReaderBase.__enter__"]], "__enter__() (pytomography.io.pet.prd.protocols.prdexperimentwriterbase method)": [[20, "pytomography.io.PET.prd.protocols.PrdExperimentWriterBase.__enter__"]], "__exit__() (pytomography.io.pet.prd.protocols.prdexperimentreaderbase method)": [[20, "pytomography.io.PET.prd.protocols.PrdExperimentReaderBase.__exit__"]], "__exit__() (pytomography.io.pet.prd.protocols.prdexperimentwriterbase method)": [[20, "pytomography.io.PET.prd.protocols.PrdExperimentWriterBase.__exit__"]], "_end_stream() (pytomography.io.pet.prd.protocols.prdexperimentwriterbase method)": [[20, "pytomography.io.PET.prd.protocols.PrdExperimentWriterBase._end_stream"]], "_raise_unexpected_state() (pytomography.io.pet.prd.protocols.prdexperimentreaderbase method)": [[20, "pytomography.io.PET.prd.protocols.PrdExperimentReaderBase._raise_unexpected_state"]], "_raise_unexpected_state() (pytomography.io.pet.prd.protocols.prdexperimentwriterbase method)": [[20, "pytomography.io.PET.prd.protocols.PrdExperimentWriterBase._raise_unexpected_state"]], "_read_header() (pytomography.io.pet.prd.protocols.prdexperimentreaderbase method)": [[20, "pytomography.io.PET.prd.protocols.PrdExperimentReaderBase._read_header"]], "_read_time_blocks() (pytomography.io.pet.prd.protocols.prdexperimentreaderbase method)": [[20, "pytomography.io.PET.prd.protocols.PrdExperimentReaderBase._read_time_blocks"]], "_state_to_method_name() (pytomography.io.pet.prd.protocols.prdexperimentreaderbase method)": [[20, "pytomography.io.PET.prd.protocols.PrdExperimentReaderBase._state_to_method_name"]], "_state_to_method_name() (pytomography.io.pet.prd.protocols.prdexperimentwriterbase method)": [[20, "pytomography.io.PET.prd.protocols.PrdExperimentWriterBase._state_to_method_name"]], "_wrap_iterable() (pytomography.io.pet.prd.protocols.prdexperimentreaderbase method)": [[20, "pytomography.io.PET.prd.protocols.PrdExperimentReaderBase._wrap_iterable"]], "_write_header() (pytomography.io.pet.prd.protocols.prdexperimentwriterbase method)": [[20, "pytomography.io.PET.prd.protocols.PrdExperimentWriterBase._write_header"]], "_write_time_blocks() (pytomography.io.pet.prd.protocols.prdexperimentwriterbase method)": [[20, "pytomography.io.PET.prd.protocols.PrdExperimentWriterBase._write_time_blocks"]], "close() (pytomography.io.pet.prd.protocols.prdexperimentreaderbase method)": [[20, "pytomography.io.PET.prd.protocols.PrdExperimentReaderBase.close"]], "close() (pytomography.io.pet.prd.protocols.prdexperimentwriterbase method)": [[20, "pytomography.io.PET.prd.protocols.PrdExperimentWriterBase.close"]], "copy_to() (pytomography.io.pet.prd.protocols.prdexperimentreaderbase method)": [[20, "pytomography.io.PET.prd.protocols.PrdExperimentReaderBase.copy_to"]], "pytomography.io.pet.prd.protocols": [[20, "module-pytomography.io.PET.prd.protocols"]], "read_header() (pytomography.io.pet.prd.protocols.prdexperimentreaderbase method)": [[20, "pytomography.io.PET.prd.protocols.PrdExperimentReaderBase.read_header"]], "read_time_blocks() (pytomography.io.pet.prd.protocols.prdexperimentreaderbase method)": [[20, "pytomography.io.PET.prd.protocols.PrdExperimentReaderBase.read_time_blocks"]], "schema (pytomography.io.pet.prd.protocols.prdexperimentreaderbase attribute)": [[20, "pytomography.io.PET.prd.protocols.PrdExperimentReaderBase.schema"]], "schema (pytomography.io.pet.prd.protocols.prdexperimentwriterbase attribute)": [[20, "pytomography.io.PET.prd.protocols.PrdExperimentWriterBase.schema"]], "write_header() (pytomography.io.pet.prd.protocols.prdexperimentwriterbase method)": [[20, "pytomography.io.PET.prd.protocols.PrdExperimentWriterBase.write_header"]], "write_time_blocks() (pytomography.io.pet.prd.protocols.prdexperimentwriterbase method)": [[20, "pytomography.io.PET.prd.protocols.PrdExperimentWriterBase.write_time_blocks"]], "coincidenceevent (class in pytomography.io.pet.prd.types)": [[21, "pytomography.io.PET.prd.types.CoincidenceEvent"]], "detector (class in pytomography.io.pet.prd.types)": [[21, "pytomography.io.PET.prd.types.Detector"]], "examinformation (class in pytomography.io.pet.prd.types)": [[21, "pytomography.io.PET.prd.types.ExamInformation"]], "header (class in pytomography.io.pet.prd.types)": [[21, "pytomography.io.PET.prd.types.Header"]], "institution (class in pytomography.io.pet.prd.types)": [[21, "pytomography.io.PET.prd.types.Institution"]], "scannerinformation (class in pytomography.io.pet.prd.types)": [[21, "pytomography.io.PET.prd.types.ScannerInformation"]], "subject (class in pytomography.io.pet.prd.types)": [[21, "pytomography.io.PET.prd.types.Subject"]], "timeblock (class in pytomography.io.pet.prd.types)": [[21, "pytomography.io.PET.prd.types.TimeBlock"]], "timeframeinformation (class in pytomography.io.pet.prd.types)": [[21, "pytomography.io.PET.prd.types.TimeFrameInformation"]], "timeinterval (class in pytomography.io.pet.prd.types)": [[21, "pytomography.io.PET.prd.types.TimeInterval"]], "__eq__() (pytomography.io.pet.prd.types.coincidenceevent method)": [[21, "pytomography.io.PET.prd.types.CoincidenceEvent.__eq__"]], "__eq__() (pytomography.io.pet.prd.types.detector method)": [[21, "pytomography.io.PET.prd.types.Detector.__eq__"]], "__eq__() (pytomography.io.pet.prd.types.examinformation method)": [[21, "pytomography.io.PET.prd.types.ExamInformation.__eq__"]], "__eq__() (pytomography.io.pet.prd.types.header method)": [[21, "pytomography.io.PET.prd.types.Header.__eq__"]], "__eq__() (pytomography.io.pet.prd.types.institution method)": [[21, "pytomography.io.PET.prd.types.Institution.__eq__"]], "__eq__() (pytomography.io.pet.prd.types.scannerinformation method)": [[21, "pytomography.io.PET.prd.types.ScannerInformation.__eq__"]], "__eq__() (pytomography.io.pet.prd.types.subject method)": [[21, "pytomography.io.PET.prd.types.Subject.__eq__"]], "__eq__() (pytomography.io.pet.prd.types.timeblock method)": [[21, "pytomography.io.PET.prd.types.TimeBlock.__eq__"]], "__eq__() (pytomography.io.pet.prd.types.timeframeinformation method)": [[21, "pytomography.io.PET.prd.types.TimeFrameInformation.__eq__"]], "__eq__() (pytomography.io.pet.prd.types.timeinterval method)": [[21, "pytomography.io.PET.prd.types.TimeInterval.__eq__"]], "__repr__() (pytomography.io.pet.prd.types.coincidenceevent method)": [[21, "pytomography.io.PET.prd.types.CoincidenceEvent.__repr__"]], "__repr__() (pytomography.io.pet.prd.types.detector method)": [[21, "pytomography.io.PET.prd.types.Detector.__repr__"]], "__repr__() (pytomography.io.pet.prd.types.examinformation method)": [[21, "pytomography.io.PET.prd.types.ExamInformation.__repr__"]], "__repr__() (pytomography.io.pet.prd.types.header method)": [[21, "pytomography.io.PET.prd.types.Header.__repr__"]], "__repr__() (pytomography.io.pet.prd.types.institution method)": [[21, "pytomography.io.PET.prd.types.Institution.__repr__"]], "__repr__() (pytomography.io.pet.prd.types.scannerinformation method)": [[21, "pytomography.io.PET.prd.types.ScannerInformation.__repr__"]], "__repr__() (pytomography.io.pet.prd.types.subject method)": [[21, "pytomography.io.PET.prd.types.Subject.__repr__"]], "__repr__() (pytomography.io.pet.prd.types.timeblock method)": [[21, "pytomography.io.PET.prd.types.TimeBlock.__repr__"]], "__repr__() (pytomography.io.pet.prd.types.timeframeinformation method)": [[21, "pytomography.io.PET.prd.types.TimeFrameInformation.__repr__"]], "__repr__() (pytomography.io.pet.prd.types.timeinterval method)": [[21, "pytomography.io.PET.prd.types.TimeInterval.__repr__"]], "__str__() (pytomography.io.pet.prd.types.coincidenceevent method)": [[21, "pytomography.io.PET.prd.types.CoincidenceEvent.__str__"]], "__str__() (pytomography.io.pet.prd.types.detector method)": [[21, "pytomography.io.PET.prd.types.Detector.__str__"]], "__str__() (pytomography.io.pet.prd.types.examinformation method)": [[21, "pytomography.io.PET.prd.types.ExamInformation.__str__"]], "__str__() (pytomography.io.pet.prd.types.header method)": [[21, "pytomography.io.PET.prd.types.Header.__str__"]], "__str__() (pytomography.io.pet.prd.types.institution method)": [[21, "pytomography.io.PET.prd.types.Institution.__str__"]], "__str__() (pytomography.io.pet.prd.types.scannerinformation method)": [[21, "pytomography.io.PET.prd.types.ScannerInformation.__str__"]], "__str__() (pytomography.io.pet.prd.types.subject method)": [[21, "pytomography.io.PET.prd.types.Subject.__str__"]], "__str__() (pytomography.io.pet.prd.types.timeblock method)": [[21, "pytomography.io.PET.prd.types.TimeBlock.__str__"]], "__str__() (pytomography.io.pet.prd.types.timeframeinformation method)": [[21, "pytomography.io.PET.prd.types.TimeFrameInformation.__str__"]], "__str__() (pytomography.io.pet.prd.types.timeinterval method)": [[21, "pytomography.io.PET.prd.types.TimeInterval.__str__"]], "_mk_get_dtype() (in module pytomography.io.pet.prd.types)": [[21, "pytomography.io.PET.prd.types._mk_get_dtype"]], "address (pytomography.io.pet.prd.types.institution attribute)": [[21, "pytomography.io.PET.prd.types.Institution.address"]], "delayed_events (pytomography.io.pet.prd.types.timeblock attribute)": [[21, "pytomography.io.PET.prd.types.TimeBlock.delayed_events"]], "detector_1_id (pytomography.io.pet.prd.types.coincidenceevent attribute)": [[21, "pytomography.io.PET.prd.types.CoincidenceEvent.detector_1_id"]], "detector_2_id (pytomography.io.pet.prd.types.coincidenceevent attribute)": [[21, "pytomography.io.PET.prd.types.CoincidenceEvent.detector_2_id"]], "detectors (pytomography.io.pet.prd.types.scannerinformation attribute)": [[21, "pytomography.io.PET.prd.types.ScannerInformation.detectors"]], "energy_1_idx (pytomography.io.pet.prd.types.coincidenceevent attribute)": [[21, "pytomography.io.PET.prd.types.CoincidenceEvent.energy_1_idx"]], "energy_2_idx (pytomography.io.pet.prd.types.coincidenceevent attribute)": [[21, "pytomography.io.PET.prd.types.CoincidenceEvent.energy_2_idx"]], "energy_bin_edges (pytomography.io.pet.prd.types.scannerinformation attribute)": [[21, "pytomography.io.PET.prd.types.ScannerInformation.energy_bin_edges"]], "energy_resolution_at_511 (pytomography.io.pet.prd.types.scannerinformation attribute)": [[21, "pytomography.io.PET.prd.types.ScannerInformation.energy_resolution_at_511"]], "exam (pytomography.io.pet.prd.types.header attribute)": [[21, "pytomography.io.PET.prd.types.Header.exam"]], "get_dtype (in module pytomography.io.pet.prd.types)": [[21, "pytomography.io.PET.prd.types.get_dtype"]], "id (pytomography.io.pet.prd.types.detector attribute)": [[21, "pytomography.io.PET.prd.types.Detector.id"]], "id (pytomography.io.pet.prd.types.subject attribute)": [[21, "pytomography.io.PET.prd.types.Subject.id"]], "id (pytomography.io.pet.prd.types.timeblock attribute)": [[21, "pytomography.io.PET.prd.types.TimeBlock.id"]], "institution (pytomography.io.pet.prd.types.examinformation attribute)": [[21, "pytomography.io.PET.prd.types.ExamInformation.institution"]], "listmode_time_block_duration (pytomography.io.pet.prd.types.scannerinformation attribute)": [[21, "pytomography.io.PET.prd.types.ScannerInformation.listmode_time_block_duration"]], "model_name (pytomography.io.pet.prd.types.scannerinformation attribute)": [[21, "pytomography.io.PET.prd.types.ScannerInformation.model_name"]], "name (pytomography.io.pet.prd.types.institution attribute)": [[21, "pytomography.io.PET.prd.types.Institution.name"]], "name (pytomography.io.pet.prd.types.subject attribute)": [[21, "pytomography.io.PET.prd.types.Subject.name"]], "number_of_detectors() (pytomography.io.pet.prd.types.scannerinformation method)": [[21, "pytomography.io.PET.prd.types.ScannerInformation.number_of_detectors"]], "number_of_energy_bins() (pytomography.io.pet.prd.types.scannerinformation method)": [[21, "pytomography.io.PET.prd.types.ScannerInformation.number_of_energy_bins"]], "number_of_time_frames() (pytomography.io.pet.prd.types.timeframeinformation method)": [[21, "pytomography.io.PET.prd.types.TimeFrameInformation.number_of_time_frames"]], "number_of_tof_bins() (pytomography.io.pet.prd.types.scannerinformation method)": [[21, "pytomography.io.PET.prd.types.ScannerInformation.number_of_tof_bins"]], "prompt_events (pytomography.io.pet.prd.types.timeblock attribute)": [[21, "pytomography.io.PET.prd.types.TimeBlock.prompt_events"]], "protocol (pytomography.io.pet.prd.types.examinformation attribute)": [[21, "pytomography.io.PET.prd.types.ExamInformation.protocol"]], "pytomography.io.pet.prd.types": [[21, "module-pytomography.io.PET.prd.types"]], "scanner (pytomography.io.pet.prd.types.header attribute)": [[21, "pytomography.io.PET.prd.types.Header.scanner"]], "start (pytomography.io.pet.prd.types.timeinterval attribute)": [[21, "pytomography.io.PET.prd.types.TimeInterval.start"]], "start_of_acquisition (pytomography.io.pet.prd.types.examinformation attribute)": [[21, "pytomography.io.PET.prd.types.ExamInformation.start_of_acquisition"]], "stop (pytomography.io.pet.prd.types.timeinterval attribute)": [[21, "pytomography.io.PET.prd.types.TimeInterval.stop"]], "subject (pytomography.io.pet.prd.types.examinformation attribute)": [[21, "pytomography.io.PET.prd.types.ExamInformation.subject"]], "time_frames (pytomography.io.pet.prd.types.timeframeinformation attribute)": [[21, "pytomography.io.PET.prd.types.TimeFrameInformation.time_frames"]], "tof_bin_edges (pytomography.io.pet.prd.types.scannerinformation attribute)": [[21, "pytomography.io.PET.prd.types.ScannerInformation.tof_bin_edges"]], "tof_idx (pytomography.io.pet.prd.types.coincidenceevent attribute)": [[21, "pytomography.io.PET.prd.types.CoincidenceEvent.tof_idx"]], "tof_resolution (pytomography.io.pet.prd.types.scannerinformation attribute)": [[21, "pytomography.io.PET.prd.types.ScannerInformation.tof_resolution"]], "x (pytomography.io.pet.prd.types.detector attribute)": [[21, "pytomography.io.PET.prd.types.Detector.x"]], "y (pytomography.io.pet.prd.types.detector attribute)": [[21, "pytomography.io.PET.prd.types.Detector.y"]], "z (pytomography.io.pet.prd.types.detector attribute)": [[21, "pytomography.io.PET.prd.types.Detector.z"]], "complexdouble (in module pytomography.io.pet.prd.yardl_types)": [[22, "pytomography.io.PET.prd.yardl_types.ComplexDouble"]], "complexfloat (in module pytomography.io.pet.prd.yardl_types)": [[22, "pytomography.io.PET.prd.yardl_types.ComplexFloat"]], "datetime (class in pytomography.io.pet.prd.yardl_types)": [[22, "pytomography.io.PET.prd.yardl_types.DateTime"]], "float32 (in module pytomography.io.pet.prd.yardl_types)": [[22, "pytomography.io.PET.prd.yardl_types.Float32"]], "float64 (in module pytomography.io.pet.prd.yardl_types)": [[22, "pytomography.io.PET.prd.yardl_types.Float64"]], "int16 (in module pytomography.io.pet.prd.yardl_types)": [[22, "pytomography.io.PET.prd.yardl_types.Int16"]], "int32 (in module pytomography.io.pet.prd.yardl_types)": [[22, "pytomography.io.PET.prd.yardl_types.Int32"]], "int64 (in module pytomography.io.pet.prd.yardl_types)": [[22, "pytomography.io.PET.prd.yardl_types.Int64"]], "int8 (in module pytomography.io.pet.prd.yardl_types)": [[22, "pytomography.io.PET.prd.yardl_types.Int8"]], "outofrangeenum (class in pytomography.io.pet.prd.yardl_types)": [[22, "pytomography.io.PET.prd.yardl_types.OutOfRangeEnum"]], "size (in module pytomography.io.pet.prd.yardl_types)": [[22, "pytomography.io.PET.prd.yardl_types.Size"]], "time (class in pytomography.io.pet.prd.yardl_types)": [[22, "pytomography.io.PET.prd.yardl_types.Time"]], "uint16 (in module pytomography.io.pet.prd.yardl_types)": [[22, "pytomography.io.PET.prd.yardl_types.UInt16"]], "uint32 (in module pytomography.io.pet.prd.yardl_types)": [[22, "pytomography.io.PET.prd.yardl_types.UInt32"]], "uint64 (in module pytomography.io.pet.prd.yardl_types)": [[22, "pytomography.io.PET.prd.yardl_types.UInt64"]], "uint8 (in module pytomography.io.pet.prd.yardl_types)": [[22, "pytomography.io.PET.prd.yardl_types.UInt8"]], "unioncase (class in pytomography.io.pet.prd.yardl_types)": [[22, "pytomography.io.PET.prd.yardl_types.UnionCase"]], "_nanoseconds_per_day (pytomography.io.pet.prd.yardl_types.time attribute)": [[22, "pytomography.io.PET.prd.yardl_types.Time._NANOSECONDS_PER_DAY"]], "_t (in module pytomography.io.pet.prd.yardl_types)": [[22, "pytomography.io.PET.prd.yardl_types._T"]], "__eq__() (pytomography.io.pet.prd.yardl_types.datetime method)": [[22, "pytomography.io.PET.prd.yardl_types.DateTime.__eq__"]], "__eq__() (pytomography.io.pet.prd.yardl_types.outofrangeenum method)": [[22, "pytomography.io.PET.prd.yardl_types.OutOfRangeEnum.__eq__"]], "__eq__() (pytomography.io.pet.prd.yardl_types.time method)": [[22, "pytomography.io.PET.prd.yardl_types.Time.__eq__"]], "__eq__() (pytomography.io.pet.prd.yardl_types.unioncase method)": [[22, "pytomography.io.PET.prd.yardl_types.UnionCase.__eq__"]], "__hash__() (pytomography.io.pet.prd.yardl_types.datetime method)": [[22, "pytomography.io.PET.prd.yardl_types.DateTime.__hash__"]], "__hash__() (pytomography.io.pet.prd.yardl_types.outofrangeenum method)": [[22, "pytomography.io.PET.prd.yardl_types.OutOfRangeEnum.__hash__"]], "__repr__() (pytomography.io.pet.prd.yardl_types.datetime method)": [[22, "pytomography.io.PET.prd.yardl_types.DateTime.__repr__"]], "__repr__() (pytomography.io.pet.prd.yardl_types.outofrangeenum method)": [[22, "pytomography.io.PET.prd.yardl_types.OutOfRangeEnum.__repr__"]], "__repr__() (pytomography.io.pet.prd.yardl_types.time method)": [[22, "pytomography.io.PET.prd.yardl_types.Time.__repr__"]], "__repr__() (pytomography.io.pet.prd.yardl_types.unioncase method)": [[22, "pytomography.io.PET.prd.yardl_types.UnionCase.__repr__"]], "__str__() (pytomography.io.pet.prd.yardl_types.datetime method)": [[22, "pytomography.io.PET.prd.yardl_types.DateTime.__str__"]], "__str__() (pytomography.io.pet.prd.yardl_types.outofrangeenum method)": [[22, "pytomography.io.PET.prd.yardl_types.OutOfRangeEnum.__str__"]], "__str__() (pytomography.io.pet.prd.yardl_types.time method)": [[22, "pytomography.io.PET.prd.yardl_types.Time.__str__"]], "__str__() (pytomography.io.pet.prd.yardl_types.unioncase method)": [[22, "pytomography.io.PET.prd.yardl_types.UnionCase.__str__"]], "_missing_() (pytomography.io.pet.prd.yardl_types.outofrangeenum class method)": [[22, "pytomography.io.PET.prd.yardl_types.OutOfRangeEnum._missing_"]], "from_components() (pytomography.io.pet.prd.yardl_types.datetime static method)": [[22, "pytomography.io.PET.prd.yardl_types.DateTime.from_components"]], "from_components() (pytomography.io.pet.prd.yardl_types.time static method)": [[22, "pytomography.io.PET.prd.yardl_types.Time.from_components"]], "from_datetime() (pytomography.io.pet.prd.yardl_types.datetime static method)": [[22, "pytomography.io.PET.prd.yardl_types.DateTime.from_datetime"]], "from_time() (pytomography.io.pet.prd.yardl_types.time static method)": [[22, "pytomography.io.PET.prd.yardl_types.Time.from_time"]], "index (pytomography.io.pet.prd.yardl_types.unioncase attribute)": [[22, "pytomography.io.PET.prd.yardl_types.UnionCase.index"]], "now() (pytomography.io.pet.prd.yardl_types.datetime static method)": [[22, "pytomography.io.PET.prd.yardl_types.DateTime.now"]], "numpy_value (pytomography.io.pet.prd.yardl_types.datetime property)": [[22, "pytomography.io.PET.prd.yardl_types.DateTime.numpy_value"]], "numpy_value (pytomography.io.pet.prd.yardl_types.time property)": [[22, "pytomography.io.PET.prd.yardl_types.Time.numpy_value"]], "parse() (pytomography.io.pet.prd.yardl_types.datetime static method)": [[22, "pytomography.io.PET.prd.yardl_types.DateTime.parse"]], "parse() (pytomography.io.pet.prd.yardl_types.time static method)": [[22, "pytomography.io.PET.prd.yardl_types.Time.parse"]], "pytomography.io.pet.prd.yardl_types": [[22, "module-pytomography.io.PET.prd.yardl_types"]], "structural_equal() (in module pytomography.io.pet.prd.yardl_types)": [[22, "pytomography.io.PET.prd.yardl_types.structural_equal"]], "tag (pytomography.io.pet.prd.yardl_types.unioncase attribute)": [[22, "pytomography.io.PET.prd.yardl_types.UnionCase.tag"]], "to_datetime() (pytomography.io.pet.prd.yardl_types.datetime method)": [[22, "pytomography.io.PET.prd.yardl_types.DateTime.to_datetime"]], "ct_to_mumap() (in module pytomography.io.spect.dicom)": [[23, "pytomography.io.SPECT.dicom.CT_to_mumap"]], "_get_affine_ct() (in module pytomography.io.spect.dicom)": [[23, "pytomography.io.SPECT.dicom._get_affine_CT"]], "_get_affine_spect_projections() (in module pytomography.io.spect.dicom)": [[23, "pytomography.io.SPECT.dicom._get_affine_spect_projections"]], "get_attenuation_map_from_ct_slices() (in module pytomography.io.spect.dicom)": [[23, "pytomography.io.SPECT.dicom.get_attenuation_map_from_CT_slices"]], "get_attenuation_map_from_file() (in module pytomography.io.spect.dicom)": [[23, "pytomography.io.SPECT.dicom.get_attenuation_map_from_file"]], "get_metadata() (in module pytomography.io.spect.dicom)": [[23, "pytomography.io.SPECT.dicom.get_metadata"]], "get_projections() (in module pytomography.io.spect.dicom)": [[23, "pytomography.io.SPECT.dicom.get_projections"]], "get_psfmeta_from_scanner_params() (in module pytomography.io.spect.dicom)": [[23, "pytomography.io.SPECT.dicom.get_psfmeta_from_scanner_params"]], "get_scatter_from_tew() (in module pytomography.io.spect.dicom)": [[23, "pytomography.io.SPECT.dicom.get_scatter_from_TEW"]], "get_window_width() (in module pytomography.io.spect.dicom)": [[23, "pytomography.io.SPECT.dicom.get_window_width"]], "open_spect_file() (in module pytomography.io.spect.dicom)": [[23, "pytomography.io.SPECT.dicom.open_SPECT_file"]], "parse_projection_dataset() (in module pytomography.io.spect.dicom)": [[23, "pytomography.io.SPECT.dicom.parse_projection_dataset"]], "pytomography.io.spect.dicom": [[23, "module-pytomography.io.SPECT.dicom"]], "save_dcm() (in module pytomography.io.spect.dicom)": [[23, "pytomography.io.SPECT.dicom.save_dcm"]], "stitch_multibed() (in module pytomography.io.spect.dicom)": [[23, "pytomography.io.SPECT.dicom.stitch_multibed"]], "ct_to_mumap() (in module pytomography.io.spect)": [[24, "pytomography.io.SPECT.CT_to_mumap"]], "get_attenuation_map() (in module pytomography.io.spect)": [[24, "pytomography.io.SPECT.get_attenuation_map"]], "get_attenuation_map_from_ct_slices() (in module pytomography.io.spect)": [[24, "pytomography.io.SPECT.get_attenuation_map_from_CT_slices"]], "get_attenuation_map_from_file() (in module pytomography.io.spect)": [[24, "pytomography.io.SPECT.get_attenuation_map_from_file"]], "get_projections() (in module pytomography.io.spect)": [[24, "pytomography.io.SPECT.get_projections"]], "get_psfmeta_from_scanner_params() (in module pytomography.io.spect)": [[24, "pytomography.io.SPECT.get_psfmeta_from_scanner_params"]], "get_scatter_from_tew() (in module pytomography.io.spect)": [[24, "pytomography.io.SPECT.get_scatter_from_TEW"]], "open_ct_file() (in module pytomography.io.spect)": [[24, "pytomography.io.SPECT.open_CT_file"]], "pytomography.io.spect": [[24, "module-pytomography.io.SPECT"]], "combine_projection_data() (in module pytomography.io.spect.simind)": [[25, "pytomography.io.SPECT.simind.combine_projection_data"]], "combine_scatter_data_tew() (in module pytomography.io.spect.simind)": [[25, "pytomography.io.SPECT.simind.combine_scatter_data_TEW"]], "get_attenuation_map() (in module pytomography.io.spect.simind)": [[25, "pytomography.io.SPECT.simind.get_attenuation_map"]], "get_metadata() (in module pytomography.io.spect.simind)": [[25, "pytomography.io.SPECT.simind.get_metadata"]], "get_projections() (in module pytomography.io.spect.simind)": [[25, "pytomography.io.SPECT.simind.get_projections"]], "get_psfmeta_from_header() (in module pytomography.io.spect.simind)": [[25, "pytomography.io.SPECT.simind.get_psfmeta_from_header"]], "get_scatter_from_tew() (in module pytomography.io.spect.simind)": [[25, "pytomography.io.SPECT.simind.get_scatter_from_TEW"]], "pytomography.io.spect.simind": [[25, "module-pytomography.io.SPECT.simind"]], "relation_dict (in module pytomography.io.spect.simind)": [[25, "pytomography.io.SPECT.simind.relation_dict"]], "pytomography.io": [[26, "module-pytomography.io"]], "add_patient_information() (in module pytomography.io.shared.dicom_creation)": [[27, "pytomography.io.shared.dicom_creation.add_patient_information"]], "add_required_elements_to_ds() (in module pytomography.io.shared.dicom_creation)": [[27, "pytomography.io.shared.dicom_creation.add_required_elements_to_ds"]], "add_study_and_series_information() (in module pytomography.io.shared.dicom_creation)": [[27, "pytomography.io.shared.dicom_creation.add_study_and_series_information"]], "create_ds() (in module pytomography.io.shared.dicom_creation)": [[27, "pytomography.io.shared.dicom_creation.create_ds"]], "generate_base_dataset() (in module pytomography.io.shared.dicom_creation)": [[27, "pytomography.io.shared.dicom_creation.generate_base_dataset"]], "get_file_meta() (in module pytomography.io.shared.dicom_creation)": [[27, "pytomography.io.shared.dicom_creation.get_file_meta"]], "pytomography.io.shared.dicom_creation": [[27, "module-pytomography.io.shared.dicom_creation"]], "create_ds() (in module pytomography.io.shared)": [[28, "pytomography.io.shared.create_ds"]], "get_attenuation_map_interfile() (in module pytomography.io.shared)": [[28, "pytomography.io.shared.get_attenuation_map_interfile"]], "get_header_value() (in module pytomography.io.shared)": [[28, "pytomography.io.shared.get_header_value"]], "pytomography.io.shared": [[28, "module-pytomography.io.shared"]], "get_attenuation_map_interfile() (in module pytomography.io.shared.interfile)": [[29, "pytomography.io.shared.interfile.get_attenuation_map_interfile"]], "get_header_value() (in module pytomography.io.shared.interfile)": [[29, "pytomography.io.shared.interfile.get_header_value"]], "pytomography.io.shared.interfile": [[29, "module-pytomography.io.shared.interfile"]], "petlmprojmeta (class in pytomography.metadata.pet)": [[30, "pytomography.metadata.PET.PETLMProjMeta"]], "pettofmeta (class in pytomography.metadata.pet)": [[30, "pytomography.metadata.PET.PETTOFMeta"]], "pytomography.metadata.pet": [[30, "module-pytomography.metadata.PET"]], "pettofmeta (class in pytomography.metadata.pet.pet_tof_metadata)": [[31, "pytomography.metadata.PET.pet_tof_metadata.PETTOFMeta"]], "pytomography.metadata.pet.pet_tof_metadata": [[31, "module-pytomography.metadata.PET.pet_tof_metadata"]], "petlmprojmeta (class in pytomography.metadata.pet.petlm_metadata)": [[32, "pytomography.metadata.PET.petlm_metadata.PETLMProjMeta"]], "pytomography.metadata.pet.petlm_metadata": [[32, "module-pytomography.metadata.PET.petlm_metadata"]], "spectobjectmeta (class in pytomography.metadata.spect)": [[33, "pytomography.metadata.SPECT.SPECTObjectMeta"]], "spectpsfmeta (class in pytomography.metadata.spect)": [[33, "pytomography.metadata.SPECT.SPECTPSFMeta"]], "spectprojmeta (class in pytomography.metadata.spect)": [[33, "pytomography.metadata.SPECT.SPECTProjMeta"]], "__repr__() (pytomography.metadata.spect.spectpsfmeta method)": [[33, "pytomography.metadata.SPECT.SPECTPSFMeta.__repr__"]], "compute_padded_shape() (pytomography.metadata.spect.spectobjectmeta method)": [[33, "pytomography.metadata.SPECT.SPECTObjectMeta.compute_padded_shape"]], "compute_padded_shape() (pytomography.metadata.spect.spectprojmeta method)": [[33, "pytomography.metadata.SPECT.SPECTProjMeta.compute_padded_shape"]], "pytomography.metadata.spect": [[33, "module-pytomography.metadata.SPECT"]], "spectobjectmeta (class in pytomography.metadata.spect.spect_metadata)": [[34, "pytomography.metadata.SPECT.spect_metadata.SPECTObjectMeta"]], "spectpsfmeta (class in pytomography.metadata.spect.spect_metadata)": [[34, "pytomography.metadata.SPECT.spect_metadata.SPECTPSFMeta"]], "spectprojmeta (class in pytomography.metadata.spect.spect_metadata)": [[34, "pytomography.metadata.SPECT.spect_metadata.SPECTProjMeta"]], "__repr__() (pytomography.metadata.spect.spect_metadata.spectpsfmeta method)": [[34, "pytomography.metadata.SPECT.spect_metadata.SPECTPSFMeta.__repr__"]], "compute_padded_shape() (pytomography.metadata.spect.spect_metadata.spectobjectmeta method)": [[34, "pytomography.metadata.SPECT.spect_metadata.SPECTObjectMeta.compute_padded_shape"]], "compute_padded_shape() (pytomography.metadata.spect.spect_metadata.spectprojmeta method)": [[34, "pytomography.metadata.SPECT.spect_metadata.SPECTProjMeta.compute_padded_shape"]], "pytomography.metadata.spect.spect_metadata": [[34, "module-pytomography.metadata.SPECT.spect_metadata"]], "objectmeta (class in pytomography.metadata)": [[35, "pytomography.metadata.ObjectMeta"]], "petlmprojmeta (class in pytomography.metadata)": [[35, "pytomography.metadata.PETLMProjMeta"]], "pettofmeta (class in pytomography.metadata)": [[35, "pytomography.metadata.PETTOFMeta"]], "projmeta (class in pytomography.metadata)": [[35, "pytomography.metadata.ProjMeta"]], "spectobjectmeta (class in pytomography.metadata)": [[35, "pytomography.metadata.SPECTObjectMeta"]], "spectpsfmeta (class in pytomography.metadata)": [[35, "pytomography.metadata.SPECTPSFMeta"]], "spectprojmeta (class in pytomography.metadata)": [[35, "pytomography.metadata.SPECTProjMeta"]], "__repr__() (pytomography.metadata.objectmeta method)": [[35, "pytomography.metadata.ObjectMeta.__repr__"]], "__repr__() (pytomography.metadata.projmeta method)": [[35, "pytomography.metadata.ProjMeta.__repr__"]], "__repr__() (pytomography.metadata.spectpsfmeta method)": [[35, "pytomography.metadata.SPECTPSFMeta.__repr__"]], "compute_padded_shape() (pytomography.metadata.spectobjectmeta method)": [[35, "pytomography.metadata.SPECTObjectMeta.compute_padded_shape"]], "compute_padded_shape() (pytomography.metadata.spectprojmeta method)": [[35, "pytomography.metadata.SPECTProjMeta.compute_padded_shape"]], "pytomography.metadata": [[35, "module-pytomography.metadata"]], "objectmeta (class in pytomography.metadata.metadata)": [[36, "pytomography.metadata.metadata.ObjectMeta"]], "projmeta (class in pytomography.metadata.metadata)": [[36, "pytomography.metadata.metadata.ProjMeta"]], "__repr__() (pytomography.metadata.metadata.objectmeta method)": [[36, "pytomography.metadata.metadata.ObjectMeta.__repr__"]], "__repr__() (pytomography.metadata.metadata.projmeta method)": [[36, "pytomography.metadata.metadata.ProjMeta.__repr__"]], "pytomography.metadata.metadata": [[36, "module-pytomography.metadata.metadata"]], "anatomyneighbourweight (class in pytomography.priors)": [[37, "pytomography.priors.AnatomyNeighbourWeight"]], "euclideanneighbourweight (class in pytomography.priors)": [[37, "pytomography.priors.EuclideanNeighbourWeight"]], "logcoshprior (class in pytomography.priors)": [[37, "pytomography.priors.LogCoshPrior"]], "nearestneighbourprior (class in pytomography.priors)": [[37, "pytomography.priors.NearestNeighbourPrior"]], "neighbourweight (class in pytomography.priors)": [[37, "pytomography.priors.NeighbourWeight"]], "prior (class in pytomography.priors)": [[37, "pytomography.priors.Prior"]], "quadraticprior (class in pytomography.priors)": [[37, "pytomography.priors.QuadraticPrior"]], "relativedifferenceprior (class in pytomography.priors)": [[37, "pytomography.priors.RelativeDifferencePrior"]], "topnanatomyneighbourweight (class in pytomography.priors)": [[37, "pytomography.priors.TopNAnatomyNeighbourWeight"]], "__call__() (pytomography.priors.anatomyneighbourweight method)": [[37, "pytomography.priors.AnatomyNeighbourWeight.__call__"]], "__call__() (pytomography.priors.euclideanneighbourweight method)": [[37, "pytomography.priors.EuclideanNeighbourWeight.__call__"]], "__call__() (pytomography.priors.neighbourweight method)": [[37, "pytomography.priors.NeighbourWeight.__call__"]], "__call__() (pytomography.priors.topnanatomyneighbourweight method)": [[37, "pytomography.priors.TopNAnatomyNeighbourWeight.__call__"]], "compute_gradient() (pytomography.priors.nearestneighbourprior method)": [[37, "pytomography.priors.NearestNeighbourPrior.compute_gradient"]], "compute_gradient() (pytomography.priors.prior method)": [[37, "pytomography.priors.Prior.compute_gradient"]], "compute_inclusion_tensor() (pytomography.priors.topnanatomyneighbourweight method)": [[37, "pytomography.priors.TopNAnatomyNeighbourWeight.compute_inclusion_tensor"]], "compute_prior() (pytomography.priors.nearestneighbourprior method)": [[37, "pytomography.priors.NearestNeighbourPrior.compute_prior"]], "pytomography.priors": [[37, "module-pytomography.priors"]], "set_beta_scale() (pytomography.priors.prior method)": [[37, "pytomography.priors.Prior.set_beta_scale"]], "set_object() (pytomography.priors.prior method)": [[37, "pytomography.priors.Prior.set_object"]], "set_object_meta() (pytomography.priors.anatomyneighbourweight method)": [[37, "pytomography.priors.AnatomyNeighbourWeight.set_object_meta"]], "set_object_meta() (pytomography.priors.nearestneighbourprior method)": [[37, "pytomography.priors.NearestNeighbourPrior.set_object_meta"]], "set_object_meta() (pytomography.priors.neighbourweight method)": [[37, "pytomography.priors.NeighbourWeight.set_object_meta"]], "set_object_meta() (pytomography.priors.prior method)": [[37, "pytomography.priors.Prior.set_object_meta"]], "set_object_meta() (pytomography.priors.topnanatomyneighbourweight method)": [[37, "pytomography.priors.TopNAnatomyNeighbourWeight.set_object_meta"]], "anatomyneighbourweight (class in pytomography.priors.nearest_neighbour)": [[38, "pytomography.priors.nearest_neighbour.AnatomyNeighbourWeight"]], "euclideanneighbourweight (class in pytomography.priors.nearest_neighbour)": [[38, "pytomography.priors.nearest_neighbour.EuclideanNeighbourWeight"]], "logcoshprior (class in pytomography.priors.nearest_neighbour)": [[38, "pytomography.priors.nearest_neighbour.LogCoshPrior"]], "nearestneighbourprior (class in pytomography.priors.nearest_neighbour)": [[38, "pytomography.priors.nearest_neighbour.NearestNeighbourPrior"]], "neighbourweight (class in pytomography.priors.nearest_neighbour)": [[38, "pytomography.priors.nearest_neighbour.NeighbourWeight"]], "quadraticprior (class in pytomography.priors.nearest_neighbour)": [[38, "pytomography.priors.nearest_neighbour.QuadraticPrior"]], "relativedifferenceprior (class in pytomography.priors.nearest_neighbour)": [[38, "pytomography.priors.nearest_neighbour.RelativeDifferencePrior"]], "topnanatomyneighbourweight (class in pytomography.priors.nearest_neighbour)": [[38, "pytomography.priors.nearest_neighbour.TopNAnatomyNeighbourWeight"]], "__call__() (pytomography.priors.nearest_neighbour.anatomyneighbourweight method)": [[38, "pytomography.priors.nearest_neighbour.AnatomyNeighbourWeight.__call__"]], "__call__() (pytomography.priors.nearest_neighbour.euclideanneighbourweight method)": [[38, "pytomography.priors.nearest_neighbour.EuclideanNeighbourWeight.__call__"]], "__call__() (pytomography.priors.nearest_neighbour.neighbourweight method)": [[38, "pytomography.priors.nearest_neighbour.NeighbourWeight.__call__"]], "__call__() (pytomography.priors.nearest_neighbour.topnanatomyneighbourweight method)": [[38, "pytomography.priors.nearest_neighbour.TopNAnatomyNeighbourWeight.__call__"]], "compute_gradient() (pytomography.priors.nearest_neighbour.nearestneighbourprior method)": [[38, "pytomography.priors.nearest_neighbour.NearestNeighbourPrior.compute_gradient"]], "compute_inclusion_tensor() (pytomography.priors.nearest_neighbour.topnanatomyneighbourweight method)": [[38, "pytomography.priors.nearest_neighbour.TopNAnatomyNeighbourWeight.compute_inclusion_tensor"]], "compute_prior() (pytomography.priors.nearest_neighbour.nearestneighbourprior method)": [[38, "pytomography.priors.nearest_neighbour.NearestNeighbourPrior.compute_prior"]], "pytomography.priors.nearest_neighbour": [[38, "module-pytomography.priors.nearest_neighbour"]], "set_object_meta() (pytomography.priors.nearest_neighbour.anatomyneighbourweight method)": [[38, "pytomography.priors.nearest_neighbour.AnatomyNeighbourWeight.set_object_meta"]], "set_object_meta() (pytomography.priors.nearest_neighbour.nearestneighbourprior method)": [[38, "pytomography.priors.nearest_neighbour.NearestNeighbourPrior.set_object_meta"]], "set_object_meta() (pytomography.priors.nearest_neighbour.neighbourweight method)": [[38, "pytomography.priors.nearest_neighbour.NeighbourWeight.set_object_meta"]], "set_object_meta() (pytomography.priors.nearest_neighbour.topnanatomyneighbourweight method)": [[38, "pytomography.priors.nearest_neighbour.TopNAnatomyNeighbourWeight.set_object_meta"]], "prior (class in pytomography.priors.prior)": [[39, "pytomography.priors.prior.Prior"]], "compute_gradient() (pytomography.priors.prior.prior method)": [[39, "pytomography.priors.prior.Prior.compute_gradient"]], "pytomography.priors.prior": [[39, "module-pytomography.priors.prior"]], "set_beta_scale() (pytomography.priors.prior.prior method)": [[39, "pytomography.priors.prior.Prior.set_beta_scale"]], "set_object() (pytomography.priors.prior.prior method)": [[39, "pytomography.priors.prior.Prior.set_object"]], "set_object_meta() (pytomography.priors.prior.prior method)": [[39, "pytomography.priors.prior.Prior.set_object_meta"]], "petlmsystemmatrix (class in pytomography.projectors.pet)": [[40, "pytomography.projectors.PET.PETLMSystemMatrix"]], "backward() (pytomography.projectors.pet.petlmsystemmatrix method)": [[40, "pytomography.projectors.PET.PETLMSystemMatrix.backward"]], "compute_atteunation_probability_projection() (pytomography.projectors.pet.petlmsystemmatrix method)": [[40, "pytomography.projectors.PET.PETLMSystemMatrix.compute_atteunation_probability_projection"]], "compute_normalization_factor() (pytomography.projectors.pet.petlmsystemmatrix method)": [[40, "pytomography.projectors.PET.PETLMSystemMatrix.compute_normalization_factor"]], "compute_sens_factor() (pytomography.projectors.pet.petlmsystemmatrix method)": [[40, "pytomography.projectors.PET.PETLMSystemMatrix.compute_sens_factor"]], "forward() (pytomography.projectors.pet.petlmsystemmatrix method)": [[40, "pytomography.projectors.PET.PETLMSystemMatrix.forward"]], "get_projection_subset() (pytomography.projectors.pet.petlmsystemmatrix method)": [[40, "pytomography.projectors.PET.PETLMSystemMatrix.get_projection_subset"]], "get_weighting_subset() (pytomography.projectors.pet.petlmsystemmatrix method)": [[40, "pytomography.projectors.PET.PETLMSystemMatrix.get_weighting_subset"]], "pytomography.projectors.pet": [[40, "module-pytomography.projectors.PET"]], "set_n_subsets() (pytomography.projectors.pet.petlmsystemmatrix method)": [[40, "pytomography.projectors.PET.PETLMSystemMatrix.set_n_subsets"]], "petlmsystemmatrix (class in pytomography.projectors.pet.petlm_system_matrix)": [[41, "pytomography.projectors.PET.petlm_system_matrix.PETLMSystemMatrix"]], "backward() (pytomography.projectors.pet.petlm_system_matrix.petlmsystemmatrix method)": [[41, "pytomography.projectors.PET.petlm_system_matrix.PETLMSystemMatrix.backward"]], "compute_atteunation_probability_projection() (pytomography.projectors.pet.petlm_system_matrix.petlmsystemmatrix method)": [[41, "pytomography.projectors.PET.petlm_system_matrix.PETLMSystemMatrix.compute_atteunation_probability_projection"]], "compute_normalization_factor() (pytomography.projectors.pet.petlm_system_matrix.petlmsystemmatrix method)": [[41, "pytomography.projectors.PET.petlm_system_matrix.PETLMSystemMatrix.compute_normalization_factor"]], "compute_sens_factor() (pytomography.projectors.pet.petlm_system_matrix.petlmsystemmatrix method)": [[41, "pytomography.projectors.PET.petlm_system_matrix.PETLMSystemMatrix.compute_sens_factor"]], "forward() (pytomography.projectors.pet.petlm_system_matrix.petlmsystemmatrix method)": [[41, "pytomography.projectors.PET.petlm_system_matrix.PETLMSystemMatrix.forward"]], "get_projection_subset() (pytomography.projectors.pet.petlm_system_matrix.petlmsystemmatrix method)": [[41, "pytomography.projectors.PET.petlm_system_matrix.PETLMSystemMatrix.get_projection_subset"]], "get_weighting_subset() (pytomography.projectors.pet.petlm_system_matrix.petlmsystemmatrix method)": [[41, "pytomography.projectors.PET.petlm_system_matrix.PETLMSystemMatrix.get_weighting_subset"]], "pytomography.projectors.pet.petlm_system_matrix": [[41, "module-pytomography.projectors.PET.petlm_system_matrix"]], "set_n_subsets() (pytomography.projectors.pet.petlm_system_matrix.petlmsystemmatrix method)": [[41, "pytomography.projectors.PET.petlm_system_matrix.PETLMSystemMatrix.set_n_subsets"]], "spectsystemmatrix (class in pytomography.projectors.spect)": [[42, "pytomography.projectors.SPECT.SPECTSystemMatrix"]], "spectsystemmatrixmaskedsegments (class in pytomography.projectors.spect)": [[42, "pytomography.projectors.SPECT.SPECTSystemMatrixMaskedSegments"]], "backward() (pytomography.projectors.spect.spectsystemmatrix method)": [[42, "pytomography.projectors.SPECT.SPECTSystemMatrix.backward"]], "backward() (pytomography.projectors.spect.spectsystemmatrixmaskedsegments method)": [[42, "pytomography.projectors.SPECT.SPECTSystemMatrixMaskedSegments.backward"]], "compute_normalization_factor() (pytomography.projectors.spect.spectsystemmatrix method)": [[42, "pytomography.projectors.SPECT.SPECTSystemMatrix.compute_normalization_factor"]], "forward() (pytomography.projectors.spect.spectsystemmatrix method)": [[42, "pytomography.projectors.SPECT.SPECTSystemMatrix.forward"]], "forward() (pytomography.projectors.spect.spectsystemmatrixmaskedsegments method)": [[42, "pytomography.projectors.SPECT.SPECTSystemMatrixMaskedSegments.forward"]], "get_projection_subset() (pytomography.projectors.spect.spectsystemmatrix method)": [[42, "pytomography.projectors.SPECT.SPECTSystemMatrix.get_projection_subset"]], "get_weighting_subset() (pytomography.projectors.spect.spectsystemmatrix method)": [[42, "pytomography.projectors.SPECT.SPECTSystemMatrix.get_weighting_subset"]], "pytomography.projectors.spect": [[42, "module-pytomography.projectors.SPECT"]], "set_n_subsets() (pytomography.projectors.spect.spectsystemmatrix method)": [[42, "pytomography.projectors.SPECT.SPECTSystemMatrix.set_n_subsets"]], "spectsystemmatrix (class in pytomography.projectors.spect.spect_system_matrix)": [[43, "pytomography.projectors.SPECT.spect_system_matrix.SPECTSystemMatrix"]], "spectsystemmatrixmaskedsegments (class in pytomography.projectors.spect.spect_system_matrix)": [[43, "pytomography.projectors.SPECT.spect_system_matrix.SPECTSystemMatrixMaskedSegments"]], "backward() (pytomography.projectors.spect.spect_system_matrix.spectsystemmatrix method)": [[43, "pytomography.projectors.SPECT.spect_system_matrix.SPECTSystemMatrix.backward"]], "backward() (pytomography.projectors.spect.spect_system_matrix.spectsystemmatrixmaskedsegments method)": [[43, "pytomography.projectors.SPECT.spect_system_matrix.SPECTSystemMatrixMaskedSegments.backward"]], "compute_normalization_factor() (pytomography.projectors.spect.spect_system_matrix.spectsystemmatrix method)": [[43, "pytomography.projectors.SPECT.spect_system_matrix.SPECTSystemMatrix.compute_normalization_factor"]], "forward() (pytomography.projectors.spect.spect_system_matrix.spectsystemmatrix method)": [[43, "pytomography.projectors.SPECT.spect_system_matrix.SPECTSystemMatrix.forward"]], "forward() (pytomography.projectors.spect.spect_system_matrix.spectsystemmatrixmaskedsegments method)": [[43, "pytomography.projectors.SPECT.spect_system_matrix.SPECTSystemMatrixMaskedSegments.forward"]], "get_projection_subset() (pytomography.projectors.spect.spect_system_matrix.spectsystemmatrix method)": [[43, "pytomography.projectors.SPECT.spect_system_matrix.SPECTSystemMatrix.get_projection_subset"]], "get_weighting_subset() (pytomography.projectors.spect.spect_system_matrix.spectsystemmatrix method)": [[43, "pytomography.projectors.SPECT.spect_system_matrix.SPECTSystemMatrix.get_weighting_subset"]], "pytomography.projectors.spect.spect_system_matrix": [[43, "module-pytomography.projectors.SPECT.spect_system_matrix"]], "set_n_subsets() (pytomography.projectors.spect.spect_system_matrix.spectsystemmatrix method)": [[43, "pytomography.projectors.SPECT.spect_system_matrix.SPECTSystemMatrix.set_n_subsets"]], "extendedsystemmatrix (class in pytomography.projectors)": [[44, "pytomography.projectors.ExtendedSystemMatrix"]], "systemmatrix (class in pytomography.projectors)": [[44, "pytomography.projectors.SystemMatrix"]], "backward() (pytomography.projectors.extendedsystemmatrix method)": [[44, "pytomography.projectors.ExtendedSystemMatrix.backward"]], "backward() (pytomography.projectors.systemmatrix method)": [[44, "pytomography.projectors.SystemMatrix.backward"]], "compute_normalization_factor() (pytomography.projectors.extendedsystemmatrix method)": [[44, "pytomography.projectors.ExtendedSystemMatrix.compute_normalization_factor"]], "forward() (pytomography.projectors.extendedsystemmatrix method)": [[44, "pytomography.projectors.ExtendedSystemMatrix.forward"]], "forward() (pytomography.projectors.systemmatrix method)": [[44, "pytomography.projectors.SystemMatrix.forward"]], "get_projection_subset() (pytomography.projectors.extendedsystemmatrix method)": [[44, "pytomography.projectors.ExtendedSystemMatrix.get_projection_subset"]], "get_subset_splits() (pytomography.projectors.systemmatrix method)": [[44, "pytomography.projectors.SystemMatrix.get_subset_splits"]], "initialize_transforms() (pytomography.projectors.systemmatrix method)": [[44, "pytomography.projectors.SystemMatrix.initialize_transforms"]], "pytomography.projectors": [[44, "module-pytomography.projectors"]], "set_n_subsets() (pytomography.projectors.extendedsystemmatrix method)": [[44, "pytomography.projectors.ExtendedSystemMatrix.set_n_subsets"]], "kemsystemmatrix (class in pytomography.projectors.shared)": [[45, "pytomography.projectors.shared.KEMSystemMatrix"]], "motionsystemmatrix (class in pytomography.projectors.shared)": [[45, "pytomography.projectors.shared.MotionSystemMatrix"]], "backward() (pytomography.projectors.shared.kemsystemmatrix method)": [[45, "pytomography.projectors.shared.KEMSystemMatrix.backward"]], "compute_normalization_factor() (pytomography.projectors.shared.kemsystemmatrix method)": [[45, "pytomography.projectors.shared.KEMSystemMatrix.compute_normalization_factor"]], "forward() (pytomography.projectors.shared.kemsystemmatrix method)": [[45, "pytomography.projectors.shared.KEMSystemMatrix.forward"]], "pytomography.projectors.shared": [[45, "module-pytomography.projectors.shared"]], "kemsystemmatrix (class in pytomography.projectors.shared.kem_system_matrix)": [[46, "pytomography.projectors.shared.kem_system_matrix.KEMSystemMatrix"]], "backward() (pytomography.projectors.shared.kem_system_matrix.kemsystemmatrix method)": [[46, "pytomography.projectors.shared.kem_system_matrix.KEMSystemMatrix.backward"]], "compute_normalization_factor() (pytomography.projectors.shared.kem_system_matrix.kemsystemmatrix method)": [[46, "pytomography.projectors.shared.kem_system_matrix.KEMSystemMatrix.compute_normalization_factor"]], "forward() (pytomography.projectors.shared.kem_system_matrix.kemsystemmatrix method)": [[46, "pytomography.projectors.shared.kem_system_matrix.KEMSystemMatrix.forward"]], "pytomography.projectors.shared.kem_system_matrix": [[46, "module-pytomography.projectors.shared.kem_system_matrix"]], "motionsystemmatrix (class in pytomography.projectors.shared.motion_correction_system_matrix)": [[47, "pytomography.projectors.shared.motion_correction_system_matrix.MotionSystemMatrix"]], "pytomography.projectors.shared.motion_correction_system_matrix": [[47, "module-pytomography.projectors.shared.motion_correction_system_matrix"]], "extendedsystemmatrix (class in pytomography.projectors.system_matrix)": [[48, "pytomography.projectors.system_matrix.ExtendedSystemMatrix"]], "systemmatrix (class in pytomography.projectors.system_matrix)": [[48, "pytomography.projectors.system_matrix.SystemMatrix"]], "backward() (pytomography.projectors.system_matrix.extendedsystemmatrix method)": [[48, "pytomography.projectors.system_matrix.ExtendedSystemMatrix.backward"]], "backward() (pytomography.projectors.system_matrix.systemmatrix method)": [[48, "pytomography.projectors.system_matrix.SystemMatrix.backward"]], "compute_normalization_factor() (pytomography.projectors.system_matrix.extendedsystemmatrix method)": [[48, "pytomography.projectors.system_matrix.ExtendedSystemMatrix.compute_normalization_factor"]], "forward() (pytomography.projectors.system_matrix.extendedsystemmatrix method)": [[48, "pytomography.projectors.system_matrix.ExtendedSystemMatrix.forward"]], "forward() (pytomography.projectors.system_matrix.systemmatrix method)": [[48, "pytomography.projectors.system_matrix.SystemMatrix.forward"]], "get_projection_subset() (pytomography.projectors.system_matrix.extendedsystemmatrix method)": [[48, "pytomography.projectors.system_matrix.ExtendedSystemMatrix.get_projection_subset"]], "get_subset_splits() (pytomography.projectors.system_matrix.systemmatrix method)": [[48, "pytomography.projectors.system_matrix.SystemMatrix.get_subset_splits"]], "initialize_transforms() (pytomography.projectors.system_matrix.systemmatrix method)": [[48, "pytomography.projectors.system_matrix.SystemMatrix.initialize_transforms"]], "pytomography.projectors.system_matrix": [[48, "module-pytomography.projectors.system_matrix"]], "set_n_subsets() (pytomography.projectors.system_matrix.extendedsystemmatrix method)": [[48, "pytomography.projectors.system_matrix.ExtendedSystemMatrix.set_n_subsets"]], "spectattenuationtransform (class in pytomography.transforms.spect.attenuation)": [[49, "pytomography.transforms.SPECT.attenuation.SPECTAttenuationTransform"]], "backward() (pytomography.transforms.spect.attenuation.spectattenuationtransform method)": [[49, "pytomography.transforms.SPECT.attenuation.SPECTAttenuationTransform.backward"]], "compute_average_prob_matrix() (pytomography.transforms.spect.attenuation.spectattenuationtransform method)": [[49, "pytomography.transforms.SPECT.attenuation.SPECTAttenuationTransform.compute_average_prob_matrix"]], "configure() (pytomography.transforms.spect.attenuation.spectattenuationtransform method)": [[49, "pytomography.transforms.SPECT.attenuation.SPECTAttenuationTransform.configure"]], "forward() (pytomography.transforms.spect.attenuation.spectattenuationtransform method)": [[49, "pytomography.transforms.SPECT.attenuation.SPECTAttenuationTransform.forward"]], "get_prob_of_detection_matrix() (in module pytomography.transforms.spect.attenuation)": [[49, "pytomography.transforms.SPECT.attenuation.get_prob_of_detection_matrix"]], "pytomography.transforms.spect.attenuation": [[49, "module-pytomography.transforms.SPECT.attenuation"]], "cutofftransform (class in pytomography.transforms.spect.cutoff)": [[50, "pytomography.transforms.SPECT.cutoff.CutOffTransform"]], "backward() (pytomography.transforms.spect.cutoff.cutofftransform method)": [[50, "pytomography.transforms.SPECT.cutoff.CutOffTransform.backward"]], "forward() (pytomography.transforms.spect.cutoff.cutofftransform method)": [[50, "pytomography.transforms.SPECT.cutoff.CutOffTransform.forward"]], "pytomography.transforms.spect.cutoff": [[50, "module-pytomography.transforms.SPECT.cutoff"]], "cutofftransform (class in pytomography.transforms.spect)": [[51, "pytomography.transforms.SPECT.CutOffTransform"]], "spectattenuationtransform (class in pytomography.transforms.spect)": [[51, "pytomography.transforms.SPECT.SPECTAttenuationTransform"]], "spectpsftransform (class in pytomography.transforms.spect)": [[51, "pytomography.transforms.SPECT.SPECTPSFTransform"]], "_apply_psf() (pytomography.transforms.spect.spectpsftransform method)": [[51, "pytomography.transforms.SPECT.SPECTPSFTransform._apply_psf"]], "_compute_kernel_size() (pytomography.transforms.spect.spectpsftransform method)": [[51, "pytomography.transforms.SPECT.SPECTPSFTransform._compute_kernel_size"]], "_configure_gaussian_model() (pytomography.transforms.spect.spectpsftransform method)": [[51, "pytomography.transforms.SPECT.SPECTPSFTransform._configure_gaussian_model"]], "_configure_kernel_model() (pytomography.transforms.spect.spectpsftransform method)": [[51, "pytomography.transforms.SPECT.SPECTPSFTransform._configure_kernel_model"]], "_configure_manual_net() (pytomography.transforms.spect.spectpsftransform method)": [[51, "pytomography.transforms.SPECT.SPECTPSFTransform._configure_manual_net"]], "_get_sigma() (pytomography.transforms.spect.spectpsftransform method)": [[51, "pytomography.transforms.SPECT.SPECTPSFTransform._get_sigma"]], "backward() (pytomography.transforms.spect.cutofftransform method)": [[51, "pytomography.transforms.SPECT.CutOffTransform.backward"]], "backward() (pytomography.transforms.spect.spectattenuationtransform method)": [[51, "pytomography.transforms.SPECT.SPECTAttenuationTransform.backward"]], "backward() (pytomography.transforms.spect.spectpsftransform method)": [[51, "pytomography.transforms.SPECT.SPECTPSFTransform.backward"]], "compute_average_prob_matrix() (pytomography.transforms.spect.spectattenuationtransform method)": [[51, "pytomography.transforms.SPECT.SPECTAttenuationTransform.compute_average_prob_matrix"]], "configure() (pytomography.transforms.spect.spectattenuationtransform method)": [[51, "pytomography.transforms.SPECT.SPECTAttenuationTransform.configure"]], "configure() (pytomography.transforms.spect.spectpsftransform method)": [[51, "pytomography.transforms.SPECT.SPECTPSFTransform.configure"]], "forward() (pytomography.transforms.spect.cutofftransform method)": [[51, "pytomography.transforms.SPECT.CutOffTransform.forward"]], "forward() (pytomography.transforms.spect.spectattenuationtransform method)": [[51, "pytomography.transforms.SPECT.SPECTAttenuationTransform.forward"]], "forward() (pytomography.transforms.spect.spectpsftransform method)": [[51, "pytomography.transforms.SPECT.SPECTPSFTransform.forward"]], "pytomography.transforms.spect": [[51, "module-pytomography.transforms.SPECT"]], "arbitrarypsfnet (class in pytomography.transforms.spect.psf)": [[52, "pytomography.transforms.SPECT.psf.ArbitraryPSFNet"]], "gaussianblurnet (class in pytomography.transforms.spect.psf)": [[52, "pytomography.transforms.SPECT.psf.GaussianBlurNet"]], "spectpsftransform (class in pytomography.transforms.spect.psf)": [[52, "pytomography.transforms.SPECT.psf.SPECTPSFTransform"]], "_apply_psf() (pytomography.transforms.spect.psf.spectpsftransform method)": [[52, "pytomography.transforms.SPECT.psf.SPECTPSFTransform._apply_psf"]], "_compute_kernel_size() (pytomography.transforms.spect.psf.spectpsftransform method)": [[52, "pytomography.transforms.SPECT.psf.SPECTPSFTransform._compute_kernel_size"]], "_configure_gaussian_model() (pytomography.transforms.spect.psf.spectpsftransform method)": [[52, "pytomography.transforms.SPECT.psf.SPECTPSFTransform._configure_gaussian_model"]], "_configure_kernel_model() (pytomography.transforms.spect.psf.spectpsftransform method)": [[52, "pytomography.transforms.SPECT.psf.SPECTPSFTransform._configure_kernel_model"]], "_configure_manual_net() (pytomography.transforms.spect.psf.spectpsftransform method)": [[52, "pytomography.transforms.SPECT.psf.SPECTPSFTransform._configure_manual_net"]], "_get_sigma() (pytomography.transforms.spect.psf.spectpsftransform method)": [[52, "pytomography.transforms.SPECT.psf.SPECTPSFTransform._get_sigma"]], "backward() (pytomography.transforms.spect.psf.spectpsftransform method)": [[52, "pytomography.transforms.SPECT.psf.SPECTPSFTransform.backward"]], "configure() (pytomography.transforms.spect.psf.spectpsftransform method)": [[52, "pytomography.transforms.SPECT.psf.SPECTPSFTransform.configure"]], "forward() (pytomography.transforms.spect.psf.arbitrarypsfnet method)": [[52, "pytomography.transforms.SPECT.psf.ArbitraryPSFNet.forward"]], "forward() (pytomography.transforms.spect.psf.gaussianblurnet method)": [[52, "pytomography.transforms.SPECT.psf.GaussianBlurNet.forward"]], "forward() (pytomography.transforms.spect.psf.spectpsftransform method)": [[52, "pytomography.transforms.SPECT.psf.SPECTPSFTransform.forward"]], "get_1d_psf_layer() (in module pytomography.transforms.spect.psf)": [[52, "pytomography.transforms.SPECT.psf.get_1D_PSF_layer"]], "pytomography.transforms.spect.psf": [[52, "module-pytomography.transforms.SPECT.psf"]], "transform (class in pytomography.transforms)": [[53, "pytomography.transforms.Transform"]], "backward() (pytomography.transforms.transform method)": [[53, "pytomography.transforms.Transform.backward"]], "configure() (pytomography.transforms.transform method)": [[53, "pytomography.transforms.Transform.configure"]], "forward() (pytomography.transforms.transform method)": [[53, "pytomography.transforms.Transform.forward"]], "pytomography.transforms": [[53, "module-pytomography.transforms"]], "gaussianfilter (class in pytomography.transforms.shared.filters)": [[54, "pytomography.transforms.shared.filters.GaussianFilter"]], "__call__() (pytomography.transforms.shared.filters.gaussianfilter method)": [[54, "pytomography.transforms.shared.filters.GaussianFilter.__call__"]], "_get_kernels() (pytomography.transforms.shared.filters.gaussianfilter method)": [[54, "pytomography.transforms.shared.filters.GaussianFilter._get_kernels"]], "backward() (pytomography.transforms.shared.filters.gaussianfilter method)": [[54, "pytomography.transforms.shared.filters.GaussianFilter.backward"]], "configure() (pytomography.transforms.shared.filters.gaussianfilter method)": [[54, "pytomography.transforms.shared.filters.GaussianFilter.configure"]], "forward() (pytomography.transforms.shared.filters.gaussianfilter method)": [[54, "pytomography.transforms.shared.filters.GaussianFilter.forward"]], "pytomography.transforms.shared.filters": [[54, "module-pytomography.transforms.shared.filters"]], "dvfmotiontransform (class in pytomography.transforms.shared)": [[55, "pytomography.transforms.shared.DVFMotionTransform"]], "gaussianfilter (class in pytomography.transforms.shared)": [[55, "pytomography.transforms.shared.GaussianFilter"]], "kemtransform (class in pytomography.transforms.shared)": [[55, "pytomography.transforms.shared.KEMTransform"]], "rotationtransform (class in pytomography.transforms.shared)": [[55, "pytomography.transforms.shared.RotationTransform"]], "__call__() (pytomography.transforms.shared.gaussianfilter method)": [[55, "pytomography.transforms.shared.GaussianFilter.__call__"]], "_apply_dvf() (pytomography.transforms.shared.dvfmotiontransform method)": [[55, "pytomography.transforms.shared.DVFMotionTransform._apply_dvf"]], "_get_kernels() (pytomography.transforms.shared.gaussianfilter method)": [[55, "pytomography.transforms.shared.GaussianFilter._get_kernels"]], "_get_new_coordinates() (pytomography.transforms.shared.dvfmotiontransform method)": [[55, "pytomography.transforms.shared.DVFMotionTransform._get_new_coordinates"]], "_get_old_coordinates() (pytomography.transforms.shared.dvfmotiontransform method)": [[55, "pytomography.transforms.shared.DVFMotionTransform._get_old_coordinates"]], "_get_vol_ratio() (pytomography.transforms.shared.dvfmotiontransform method)": [[55, "pytomography.transforms.shared.DVFMotionTransform._get_vol_ratio"]], "backward() (pytomography.transforms.shared.dvfmotiontransform method)": [[55, "pytomography.transforms.shared.DVFMotionTransform.backward"]], "backward() (pytomography.transforms.shared.gaussianfilter method)": [[55, "pytomography.transforms.shared.GaussianFilter.backward"]], "backward() (pytomography.transforms.shared.kemtransform method)": [[55, "pytomography.transforms.shared.KEMTransform.backward"]], "backward() (pytomography.transforms.shared.rotationtransform method)": [[55, "pytomography.transforms.shared.RotationTransform.backward"]], "compute_kernel() (pytomography.transforms.shared.kemtransform method)": [[55, "pytomography.transforms.shared.KEMTransform.compute_kernel"]], "configure() (pytomography.transforms.shared.gaussianfilter method)": [[55, "pytomography.transforms.shared.GaussianFilter.configure"]], "configure() (pytomography.transforms.shared.kemtransform method)": [[55, "pytomography.transforms.shared.KEMTransform.configure"]], "forward() (pytomography.transforms.shared.dvfmotiontransform method)": [[55, "pytomography.transforms.shared.DVFMotionTransform.forward"]], "forward() (pytomography.transforms.shared.gaussianfilter method)": [[55, "pytomography.transforms.shared.GaussianFilter.forward"]], "forward() (pytomography.transforms.shared.kemtransform method)": [[55, "pytomography.transforms.shared.KEMTransform.forward"]], "forward() (pytomography.transforms.shared.rotationtransform method)": [[55, "pytomography.transforms.shared.RotationTransform.forward"]], "pytomography.transforms.shared": [[55, "module-pytomography.transforms.shared"]], "kemtransform (class in pytomography.transforms.shared.kem)": [[56, "pytomography.transforms.shared.kem.KEMTransform"]], "backward() (pytomography.transforms.shared.kem.kemtransform method)": [[56, "pytomography.transforms.shared.kem.KEMTransform.backward"]], "compute_kernel() (pytomography.transforms.shared.kem.kemtransform method)": [[56, "pytomography.transforms.shared.kem.KEMTransform.compute_kernel"]], "configure() (pytomography.transforms.shared.kem.kemtransform method)": [[56, "pytomography.transforms.shared.kem.KEMTransform.configure"]], "forward() (pytomography.transforms.shared.kem.kemtransform method)": [[56, "pytomography.transforms.shared.kem.KEMTransform.forward"]], "pytomography.transforms.shared.kem": [[56, "module-pytomography.transforms.shared.kem"]], "dvfmotiontransform (class in pytomography.transforms.shared.motion)": [[57, "pytomography.transforms.shared.motion.DVFMotionTransform"]], "_apply_dvf() (pytomography.transforms.shared.motion.dvfmotiontransform method)": [[57, "pytomography.transforms.shared.motion.DVFMotionTransform._apply_dvf"]], "_get_new_coordinates() (pytomography.transforms.shared.motion.dvfmotiontransform method)": [[57, "pytomography.transforms.shared.motion.DVFMotionTransform._get_new_coordinates"]], "_get_old_coordinates() (pytomography.transforms.shared.motion.dvfmotiontransform method)": [[57, "pytomography.transforms.shared.motion.DVFMotionTransform._get_old_coordinates"]], "_get_vol_ratio() (pytomography.transforms.shared.motion.dvfmotiontransform method)": [[57, "pytomography.transforms.shared.motion.DVFMotionTransform._get_vol_ratio"]], "backward() (pytomography.transforms.shared.motion.dvfmotiontransform method)": [[57, "pytomography.transforms.shared.motion.DVFMotionTransform.backward"]], "forward() (pytomography.transforms.shared.motion.dvfmotiontransform method)": [[57, "pytomography.transforms.shared.motion.DVFMotionTransform.forward"]], "pytomography.transforms.shared.motion": [[57, "module-pytomography.transforms.shared.motion"]], "rotationtransform (class in pytomography.transforms.shared.spatial)": [[58, "pytomography.transforms.shared.spatial.RotationTransform"]], "backward() (pytomography.transforms.shared.spatial.rotationtransform method)": [[58, "pytomography.transforms.shared.spatial.RotationTransform.backward"]], "forward() (pytomography.transforms.shared.spatial.rotationtransform method)": [[58, "pytomography.transforms.shared.spatial.RotationTransform.forward"]], "pytomography.transforms.shared.spatial": [[58, "module-pytomography.transforms.shared.spatial"]], "transform (class in pytomography.transforms.transform)": [[59, "pytomography.transforms.transform.Transform"]], "backward() (pytomography.transforms.transform.transform method)": [[59, "pytomography.transforms.transform.Transform.backward"]], "configure() (pytomography.transforms.transform.transform method)": [[59, "pytomography.transforms.transform.Transform.configure"]], "forward() (pytomography.transforms.transform.transform method)": [[59, "pytomography.transforms.transform.Transform.forward"]], "pytomography.transforms.transform": [[59, "module-pytomography.transforms.transform"]], "hammingfilter (class in pytomography.utils.fourier_filters)": [[60, "pytomography.utils.fourier_filters.HammingFilter"]], "rampfilter (class in pytomography.utils.fourier_filters)": [[60, "pytomography.utils.fourier_filters.RampFilter"]], "__call__() (pytomography.utils.fourier_filters.hammingfilter method)": [[60, "pytomography.utils.fourier_filters.HammingFilter.__call__"]], "__call__() (pytomography.utils.fourier_filters.rampfilter method)": [[60, "pytomography.utils.fourier_filters.RampFilter.__call__"]], "pytomography.utils.fourier_filters": [[60, "module-pytomography.utils.fourier_filters"]], "hammingfilter (class in pytomography.utils)": [[61, "pytomography.utils.HammingFilter"]], "rampfilter (class in pytomography.utils)": [[61, "pytomography.utils.RampFilter"]], "__call__() (pytomography.utils.hammingfilter method)": [[61, "pytomography.utils.HammingFilter.__call__"]], "__call__() (pytomography.utils.rampfilter method)": [[61, "pytomography.utils.RampFilter.__call__"]], "check_if_class_contains_method() (in module pytomography.utils)": [[61, "pytomography.utils.check_if_class_contains_method"]], "compute_tew() (in module pytomography.utils)": [[61, "pytomography.utils.compute_TEW"]], "compute_pad_size() (in module pytomography.utils)": [[61, "pytomography.utils.compute_pad_size"]], "dual_sqrt_exponential() (in module pytomography.utils)": [[61, "pytomography.utils.dual_sqrt_exponential"]], "get_e_mu_data_from_datasheet() (in module pytomography.utils)": [[61, "pytomography.utils.get_E_mu_data_from_datasheet"]], "get_blank_below_above() (in module pytomography.utils)": [[61, "pytomography.utils.get_blank_below_above"]], "get_distance() (in module pytomography.utils)": [[61, "pytomography.utils.get_distance"]], "get_mu_from_spectrum_interp() (in module pytomography.utils)": [[61, "pytomography.utils.get_mu_from_spectrum_interp"]], "get_object_nearest_neighbour() (in module pytomography.utils)": [[61, "pytomography.utils.get_object_nearest_neighbour"]], "pad_object() (in module pytomography.utils)": [[61, "pytomography.utils.pad_object"]], "pad_object_z() (in module pytomography.utils)": [[61, "pytomography.utils.pad_object_z"]], "pad_proj() (in module pytomography.utils)": [[61, "pytomography.utils.pad_proj"]], "print_collimator_parameters() (in module pytomography.utils)": [[61, "pytomography.utils.print_collimator_parameters"]], "pytomography.utils": [[61, "module-pytomography.utils"]], "rev_cumsum() (in module pytomography.utils)": [[61, "pytomography.utils.rev_cumsum"]], "rotate_detector_z() (in module pytomography.utils)": [[61, "pytomography.utils.rotate_detector_z"]], "unpad_object() (in module pytomography.utils)": [[61, "pytomography.utils.unpad_object"]], "unpad_object_z() (in module pytomography.utils)": [[61, "pytomography.utils.unpad_object_z"]], "unpad_proj() (in module pytomography.utils)": [[61, "pytomography.utils.unpad_proj"]], "check_if_class_contains_method() (in module pytomography.utils.misc)": [[62, "pytomography.utils.misc.check_if_class_contains_method"]], "get_blank_below_above() (in module pytomography.utils.misc)": [[62, "pytomography.utils.misc.get_blank_below_above"]], "get_distance() (in module pytomography.utils.misc)": [[62, "pytomography.utils.misc.get_distance"]], "get_object_nearest_neighbour() (in module pytomography.utils.misc)": [[62, "pytomography.utils.misc.get_object_nearest_neighbour"]], "print_collimator_parameters() (in module pytomography.utils.misc)": [[62, "pytomography.utils.misc.print_collimator_parameters"]], "pytomography.utils.misc": [[62, "module-pytomography.utils.misc"]], "rev_cumsum() (in module pytomography.utils.misc)": [[62, "pytomography.utils.misc.rev_cumsum"]], "dual_sqrt_exponential() (in module pytomography.utils.nist_data)": [[63, "pytomography.utils.nist_data.dual_sqrt_exponential"]], "get_e_mu_data_from_datasheet() (in module pytomography.utils.nist_data)": [[63, "pytomography.utils.nist_data.get_E_mu_data_from_datasheet"]], "get_mu_from_spectrum_interp() (in module pytomography.utils.nist_data)": [[63, "pytomography.utils.nist_data.get_mu_from_spectrum_interp"]], "pytomography.utils.nist_data": [[63, "module-pytomography.utils.nist_data"]], "compute_tew() (in module pytomography.utils.scatter)": [[64, "pytomography.utils.scatter.compute_TEW"]], "pytomography.utils.scatter": [[64, "module-pytomography.utils.scatter"]], "compute_pad_size() (in module pytomography.utils.spatial)": [[65, "pytomography.utils.spatial.compute_pad_size"]], "compute_pad_size_padded() (in module pytomography.utils.spatial)": [[65, "pytomography.utils.spatial.compute_pad_size_padded"]], "pad_object() (in module pytomography.utils.spatial)": [[65, "pytomography.utils.spatial.pad_object"]], "pad_object_z() (in module pytomography.utils.spatial)": [[65, "pytomography.utils.spatial.pad_object_z"]], "pad_proj() (in module pytomography.utils.spatial)": [[65, "pytomography.utils.spatial.pad_proj"]], "pytomography.utils.spatial": [[65, "module-pytomography.utils.spatial"]], "rotate_detector_z() (in module pytomography.utils.spatial)": [[65, "pytomography.utils.spatial.rotate_detector_z"]], "unpad_object() (in module pytomography.utils.spatial)": [[65, "pytomography.utils.spatial.unpad_object"]], "unpad_object_z() (in module pytomography.utils.spatial)": [[65, "pytomography.utils.spatial.unpad_object_z"]], "unpad_proj() (in module pytomography.utils.spatial)": [[65, "pytomography.utils.spatial.unpad_proj"]]}})