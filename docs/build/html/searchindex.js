Search.setIndex({"docnames": ["autoapi/index", "autoapi/pytomography/algorithms/dip_recon/index", "autoapi/pytomography/algorithms/fbp/index", "autoapi/pytomography/algorithms/index", "autoapi/pytomography/algorithms/preconditioned_gradient_ascent/index", "autoapi/pytomography/callbacks/callback/index", "autoapi/pytomography/callbacks/data_saving/index", "autoapi/pytomography/callbacks/index", "autoapi/pytomography/callbacks/likelihood/index", "autoapi/pytomography/index", "autoapi/pytomography/io/CT/attenuation_map/index", "autoapi/pytomography/io/CT/index", "autoapi/pytomography/io/PET/gate/index", "autoapi/pytomography/io/PET/index", "autoapi/pytomography/io/PET/petsird/index", "autoapi/pytomography/io/PET/prd/_binary/index", "autoapi/pytomography/io/PET/prd/_dtypes/index", "autoapi/pytomography/io/PET/prd/_ndjson/index", "autoapi/pytomography/io/PET/prd/binary/index", "autoapi/pytomography/io/PET/prd/index", "autoapi/pytomography/io/PET/prd/ndjson/index", "autoapi/pytomography/io/PET/prd/protocols/index", "autoapi/pytomography/io/PET/prd/types/index", "autoapi/pytomography/io/PET/prd/yardl_types/index", "autoapi/pytomography/io/SPECT/dicom/index", "autoapi/pytomography/io/SPECT/index", "autoapi/pytomography/io/SPECT/shared/index", "autoapi/pytomography/io/SPECT/simind/index", "autoapi/pytomography/io/index", "autoapi/pytomography/io/shared/dicom/index", "autoapi/pytomography/io/shared/dicom_creation/index", "autoapi/pytomography/io/shared/index", "autoapi/pytomography/io/shared/interfile/index", "autoapi/pytomography/likelihoods/index", "autoapi/pytomography/likelihoods/likelihood/index", "autoapi/pytomography/likelihoods/poisson_log_likelihood/index", "autoapi/pytomography/metadata/PET/index", "autoapi/pytomography/metadata/PET/pet_tof_metadata/index", "autoapi/pytomography/metadata/PET/petlm_metadata/index", "autoapi/pytomography/metadata/SPECT/index", "autoapi/pytomography/metadata/SPECT/spect_metadata/index", "autoapi/pytomography/metadata/index", "autoapi/pytomography/metadata/metadata/index", "autoapi/pytomography/priors/index", "autoapi/pytomography/priors/nearest_neighbour/index", "autoapi/pytomography/priors/prior/index", "autoapi/pytomography/projectors/PET/index", "autoapi/pytomography/projectors/PET/petlm_system_matrix/index", "autoapi/pytomography/projectors/SPECT/index", "autoapi/pytomography/projectors/SPECT/spect_system_matrix/index", "autoapi/pytomography/projectors/index", "autoapi/pytomography/projectors/shared/index", "autoapi/pytomography/projectors/shared/kem_system_matrix/index", "autoapi/pytomography/projectors/shared/motion_correction_system_matrix/index", "autoapi/pytomography/projectors/system_matrix/index", "autoapi/pytomography/transforms/SPECT/attenuation/index", "autoapi/pytomography/transforms/SPECT/cutoff/index", "autoapi/pytomography/transforms/SPECT/index", "autoapi/pytomography/transforms/SPECT/psf/index", "autoapi/pytomography/transforms/index", "autoapi/pytomography/transforms/shared/filters/index", "autoapi/pytomography/transforms/shared/index", "autoapi/pytomography/transforms/shared/kem/index", "autoapi/pytomography/transforms/shared/motion/index", "autoapi/pytomography/transforms/shared/spatial/index", "autoapi/pytomography/transforms/transform/index", "autoapi/pytomography/utils/fourier_filters/index", "autoapi/pytomography/utils/index", "autoapi/pytomography/utils/misc/index", "autoapi/pytomography/utils/nist_data/index", "autoapi/pytomography/utils/scatter/index", "autoapi/pytomography/utils/spatial/index", "developers_guide", "external_data", "index", "notebooks/conventions", "notebooks/t_PETGATE", "notebooks/t_PETSIRD", "notebooks/t_dicomdata", "notebooks/t_dicommultibed", "notebooks/t_fbp", "notebooks/t_quantitative", "notebooks/t_siminddata", "notebooks/t_uncertainty_spect", "usage"], "filenames": ["autoapi/index.rst", "autoapi/pytomography/algorithms/dip_recon/index.rst", "autoapi/pytomography/algorithms/fbp/index.rst", "autoapi/pytomography/algorithms/index.rst", "autoapi/pytomography/algorithms/preconditioned_gradient_ascent/index.rst", "autoapi/pytomography/callbacks/callback/index.rst", "autoapi/pytomography/callbacks/data_saving/index.rst", "autoapi/pytomography/callbacks/index.rst", "autoapi/pytomography/callbacks/likelihood/index.rst", "autoapi/pytomography/index.rst", "autoapi/pytomography/io/CT/attenuation_map/index.rst", "autoapi/pytomography/io/CT/index.rst", "autoapi/pytomography/io/PET/gate/index.rst", "autoapi/pytomography/io/PET/index.rst", "autoapi/pytomography/io/PET/petsird/index.rst", "autoapi/pytomography/io/PET/prd/_binary/index.rst", "autoapi/pytomography/io/PET/prd/_dtypes/index.rst", "autoapi/pytomography/io/PET/prd/_ndjson/index.rst", "autoapi/pytomography/io/PET/prd/binary/index.rst", "autoapi/pytomography/io/PET/prd/index.rst", "autoapi/pytomography/io/PET/prd/ndjson/index.rst", "autoapi/pytomography/io/PET/prd/protocols/index.rst", "autoapi/pytomography/io/PET/prd/types/index.rst", "autoapi/pytomography/io/PET/prd/yardl_types/index.rst", "autoapi/pytomography/io/SPECT/dicom/index.rst", "autoapi/pytomography/io/SPECT/index.rst", "autoapi/pytomography/io/SPECT/shared/index.rst", "autoapi/pytomography/io/SPECT/simind/index.rst", "autoapi/pytomography/io/index.rst", "autoapi/pytomography/io/shared/dicom/index.rst", "autoapi/pytomography/io/shared/dicom_creation/index.rst", "autoapi/pytomography/io/shared/index.rst", "autoapi/pytomography/io/shared/interfile/index.rst", "autoapi/pytomography/likelihoods/index.rst", "autoapi/pytomography/likelihoods/likelihood/index.rst", "autoapi/pytomography/likelihoods/poisson_log_likelihood/index.rst", "autoapi/pytomography/metadata/PET/index.rst", "autoapi/pytomography/metadata/PET/pet_tof_metadata/index.rst", "autoapi/pytomography/metadata/PET/petlm_metadata/index.rst", "autoapi/pytomography/metadata/SPECT/index.rst", "autoapi/pytomography/metadata/SPECT/spect_metadata/index.rst", "autoapi/pytomography/metadata/index.rst", "autoapi/pytomography/metadata/metadata/index.rst", "autoapi/pytomography/priors/index.rst", "autoapi/pytomography/priors/nearest_neighbour/index.rst", "autoapi/pytomography/priors/prior/index.rst", "autoapi/pytomography/projectors/PET/index.rst", "autoapi/pytomography/projectors/PET/petlm_system_matrix/index.rst", "autoapi/pytomography/projectors/SPECT/index.rst", "autoapi/pytomography/projectors/SPECT/spect_system_matrix/index.rst", "autoapi/pytomography/projectors/index.rst", "autoapi/pytomography/projectors/shared/index.rst", "autoapi/pytomography/projectors/shared/kem_system_matrix/index.rst", "autoapi/pytomography/projectors/shared/motion_correction_system_matrix/index.rst", "autoapi/pytomography/projectors/system_matrix/index.rst", "autoapi/pytomography/transforms/SPECT/attenuation/index.rst", "autoapi/pytomography/transforms/SPECT/cutoff/index.rst", "autoapi/pytomography/transforms/SPECT/index.rst", "autoapi/pytomography/transforms/SPECT/psf/index.rst", "autoapi/pytomography/transforms/index.rst", "autoapi/pytomography/transforms/shared/filters/index.rst", "autoapi/pytomography/transforms/shared/index.rst", "autoapi/pytomography/transforms/shared/kem/index.rst", "autoapi/pytomography/transforms/shared/motion/index.rst", "autoapi/pytomography/transforms/shared/spatial/index.rst", "autoapi/pytomography/transforms/transform/index.rst", "autoapi/pytomography/utils/fourier_filters/index.rst", "autoapi/pytomography/utils/index.rst", "autoapi/pytomography/utils/misc/index.rst", "autoapi/pytomography/utils/nist_data/index.rst", "autoapi/pytomography/utils/scatter/index.rst", "autoapi/pytomography/utils/spatial/index.rst", "developers_guide.md", "external_data.md", "index.md", "notebooks/conventions.ipynb", "notebooks/t_PETGATE.ipynb", "notebooks/t_PETSIRD.ipynb", "notebooks/t_dicomdata.ipynb", "notebooks/t_dicommultibed.ipynb", "notebooks/t_fbp.ipynb", "notebooks/t_quantitative.ipynb", "notebooks/t_siminddata.ipynb", "notebooks/t_uncertainty_spect.ipynb", "usage.md"], "titles": ["API Reference", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">pytomography.algorithms.dip_recon</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">pytomography.algorithms.fbp</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">pytomography.algorithms</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">pytomography.algorithms.preconditioned_gradient_ascent</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">pytomography.callbacks.callback</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">pytomography.callbacks.data_saving</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">pytomography.callbacks</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">pytomography.callbacks.likelihood</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">pytomography</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">pytomography.io.CT.attenuation_map</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">pytomography.io.CT</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">pytomography.io.PET.gate</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">pytomography.io.PET</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">pytomography.io.PET.petsird</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">pytomography.io.PET.prd._binary</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">pytomography.io.PET.prd._dtypes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">pytomography.io.PET.prd._ndjson</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">pytomography.io.PET.prd.binary</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">pytomography.io.PET.prd</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">pytomography.io.PET.prd.ndjson</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">pytomography.io.PET.prd.protocols</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">pytomography.io.PET.prd.types</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">pytomography.io.PET.prd.yardl_types</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">pytomography.io.SPECT.dicom</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">pytomography.io.SPECT</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">pytomography.io.SPECT.shared</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">pytomography.io.SPECT.simind</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">pytomography.io</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">pytomography.io.shared.dicom</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">pytomography.io.shared.dicom_creation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">pytomography.io.shared</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">pytomography.io.shared.interfile</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">pytomography.likelihoods</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">pytomography.likelihoods.likelihood</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">pytomography.likelihoods.poisson_log_likelihood</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">pytomography.metadata.PET</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">pytomography.metadata.PET.pet_tof_metadata</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">pytomography.metadata.PET.petlm_metadata</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">pytomography.metadata.SPECT</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">pytomography.metadata.SPECT.spect_metadata</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">pytomography.metadata</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">pytomography.metadata.metadata</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">pytomography.priors</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">pytomography.priors.nearest_neighbour</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">pytomography.priors.prior</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">pytomography.projectors.PET</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">pytomography.projectors.PET.petlm_system_matrix</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">pytomography.projectors.SPECT</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">pytomography.projectors.SPECT.spect_system_matrix</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">pytomography.projectors</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">pytomography.projectors.shared</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">pytomography.projectors.shared.kem_system_matrix</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">pytomography.projectors.shared.motion_correction_system_matrix</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">pytomography.projectors.system_matrix</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">pytomography.transforms.SPECT.attenuation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">pytomography.transforms.SPECT.cutoff</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">pytomography.transforms.SPECT</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">pytomography.transforms.SPECT.psf</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">pytomography.transforms</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">pytomography.transforms.shared.filters</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">pytomography.transforms.shared</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">pytomography.transforms.shared.kem</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">pytomography.transforms.shared.motion</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">pytomography.transforms.shared.spatial</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">pytomography.transforms.transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">pytomography.utils.fourier_filters</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">pytomography.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">pytomography.utils.misc</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">pytomography.utils.nist_data</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">pytomography.utils.scatter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">pytomography.utils.spatial</span></code>", "Developer\u2019s Guide", "External Data", "PyTomography", "Manual", "GATE Data Introduction", "PETSIRD Data Introduction", "DICOM Data Introduction", "DICOM Multiple Bed Positions", "Filtered Back Projection", "Quantitative Example", "SIMIND Data Introduction", "Uncertainty Estimation", "Tutorials"], "terms": {"thi": [0, 1, 2, 3, 4, 7, 10, 12, 13, 15, 17, 18, 19, 20, 22, 24, 25, 27, 28, 29, 30, 31, 33, 35, 36, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 54, 55, 56, 57, 58, 59, 60, 61, 62, 65, 67, 68, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84], "page": [0, 24, 25, 72, 74], "contain": [0, 2, 3, 4, 12, 14, 25, 27, 28, 29, 31, 32, 33, 35, 36, 37, 41, 43, 46, 47, 50, 55, 57, 58, 59, 61, 62, 67, 74, 75, 77, 78, 83], "auto": [0, 14], "gener": [0, 3, 4, 13, 15, 17, 18, 19, 20, 23, 30, 36, 38, 41, 42, 43, 44, 46, 47, 50, 51, 52, 53, 54, 73, 74, 76, 77, 82, 83], "document": [0, 1, 3, 75], "1": [0, 1, 2, 3, 4, 10, 11, 15, 17, 19, 21, 24, 25, 26, 27, 31, 32, 33, 35, 36, 38, 39, 40, 41, 43, 44, 46, 47, 48, 49, 50, 51, 52, 54, 55, 57, 61, 62, 66, 67, 68, 69, 74, 75, 76, 77, 83], "pytomographi": [0, 72, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83], "algorithm": [0, 7, 8, 9, 24, 36, 38, 41, 43, 46, 47, 48, 49, 50, 51, 53, 54, 55, 57, 60, 61, 74, 76, 77, 78, 79, 80, 81, 83], "dip_recon": [0, 3, 9], "fbp": [0, 3, 9, 74, 80], "preconditioned_gradient_asc": [0, 3, 9], "callback": [0, 1, 3, 4, 9, 81, 82, 83], "data_sav": [0, 7, 9], "likelihood": [0, 1, 3, 4, 6, 7, 9, 76, 77, 79, 83], "io": [0, 9, 73, 76, 77, 78, 79, 80, 81, 82, 83], "ct": [0, 9, 24, 25, 28, 29, 31, 43, 44, 55, 57, 61, 62, 73, 74, 76, 78, 79, 82, 83], "attenuation_map": [0, 9, 11, 28, 46, 47, 48, 49, 55, 57, 77, 78, 79, 81, 82, 83], "pet": [0, 9, 10, 11, 24, 25, 27, 28, 31, 32, 41, 50, 59, 61, 62, 74, 75, 76, 77, 78, 82], "prd": [0, 9, 13, 14, 28], "_binari": [0, 13, 18, 19, 28], "_dtype": [0, 13, 19, 28], "_ndjson": [0, 13, 19, 20, 28], "binari": [0, 13, 19, 28], "ndjson": [0, 13, 19, 28], "protocol": [0, 13, 15, 18, 19, 20, 22, 23, 28], "type": [0, 1, 2, 3, 4, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 68, 69, 71, 78], "yardl_typ": [0, 13, 15, 17, 19, 22, 28], "gate": [0, 9, 13, 24, 25, 28, 74, 75, 77, 84], "petsird": [0, 9, 13, 28, 74, 84], "spect": [0, 9, 10, 11, 28, 31, 32, 41, 50, 59, 67, 68, 74, 78, 79, 80, 82, 83], "dicom": [0, 9, 11, 25, 28, 30, 31, 55, 56, 57, 61, 64, 74, 75, 80, 82, 83, 84], "share": [0, 9, 12, 25, 28, 50, 59, 76, 77, 82], "simind": [0, 9, 25, 28, 31, 32, 73, 74, 81, 84], "dicom_cr": [0, 9, 28, 31], "interfil": [0, 9, 28, 31], "poisson_log_likelihood": [0, 9, 33], "metadata": [0, 9, 12, 14, 24, 25, 27, 30, 43, 44, 45, 46, 47, 48, 49, 50, 51, 53, 54, 55, 57, 58, 59, 60, 61, 62, 65, 76, 77, 78, 80, 82], "pet_tof_metadata": [0, 9, 36, 38, 41], "petlm_metadata": [0, 9, 36, 41], "spect_metadata": [0, 9, 39, 41], "prior": [0, 1, 3, 4, 7, 8, 9, 46, 47, 48, 49, 74, 77, 79, 82, 83, 84], "nearest_neighbour": [0, 9, 43], "projector": [0, 9, 33, 34, 36, 38, 41, 76, 77, 78, 79, 80, 81, 82, 83], "petlm_system_matrix": [0, 9, 46, 50], "spect_system_matrix": [0, 9, 48, 50], "kem_system_matrix": [0, 9, 50, 51], "motion_correction_system_matrix": [0, 9, 50, 51], "system_matrix": [0, 1, 3, 7, 8, 9, 33, 34, 35, 48, 49, 50, 51, 52, 53, 76, 78, 79, 80, 81, 82, 83], "transform": [0, 2, 3, 4, 9, 43, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 76, 77, 79, 80, 81, 82, 83], "attenu": [0, 9, 10, 11, 12, 24, 25, 27, 31, 32, 36, 38, 41, 46, 47, 50, 51, 53, 54, 57, 59, 61, 64, 67, 68, 69, 73, 74, 75, 76, 77, 79, 80, 82], "cutoff": [0, 9, 57, 59, 80], "psf": [0, 9, 24, 25, 27, 39, 40, 41, 46, 47, 57, 59, 67, 68, 71, 73, 74, 75, 77, 80, 82], "filter": [0, 2, 3, 9, 12, 59, 61, 66, 67, 74, 77, 84], "kem": [0, 3, 4, 9, 51, 52, 59, 61, 74], "motion": [0, 9, 59, 61], "spatial": [0, 9, 12, 36, 37, 38, 41, 59, 61, 67, 75], "util": [0, 9, 78, 79, 80, 83], "fourier_filt": [0, 9, 67], "misc": [0, 9, 67], "nist_data": [0, 9, 67], "scatter": [0, 1, 3, 9, 24, 25, 27, 33, 35, 36, 38, 41, 46, 47, 67, 74, 77, 78, 79, 80, 81, 82, 83], "creat": [0, 10, 15, 17, 19, 23, 30, 31, 58, 59, 60, 61, 65, 72, 74, 76, 77, 78, 79, 81, 83], "sphinx": 0, "autoapi": 0, "diprecon": [1, 3, 74, 84], "prior_network": [1, 3], "rho": [1, 3], "0": [1, 3, 4, 10, 12, 14, 15, 19, 21, 22, 23, 24, 25, 26, 29, 31, 43, 44, 66, 67, 71, 75, 76, 77, 78, 79, 80, 81, 82, 83], "003": [1, 3, 82], "em_algorithm": [1, 3], "osem": [1, 3, 4, 7, 43, 45, 48, 49, 50, 51, 53, 54, 74, 75, 76, 78, 79, 81, 83], "sourc": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 81], "implement": [1, 2, 3, 4, 19, 22, 33, 34, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 59, 61, 62, 63, 65, 66, 67, 68, 72, 75, 80], "deep": [1, 3, 74, 84], "imag": [1, 3, 4, 7, 8, 10, 11, 24, 25, 27, 28, 29, 30, 31, 32, 33, 34, 36, 38, 39, 40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 61, 62, 73, 74, 76, 77, 78, 79, 81, 82, 83, 84], "reconstruct": [1, 2, 3, 4, 5, 6, 7, 12, 24, 27, 36, 38, 41, 43, 46, 47, 48, 49, 50, 51, 53, 54, 55, 56, 57, 59, 60, 61, 63, 65, 72, 74, 77, 83], "techniqu": [1, 3, 48, 49, 75, 82], "see": [1, 3, 15, 24, 25, 27, 74, 79, 81, 83], "http": [1, 3, 13, 24, 74, 77, 79], "ieeexplor": [1, 3], "ieee": [1, 3], "org": [1, 3, 24, 74, 77], "8581448": [1, 3], "requir": [1, 3, 4, 10, 11, 12, 17, 24, 25, 27, 29, 30, 31, 32, 36, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 50, 51, 53, 54, 55, 56, 57, 60, 61, 67, 71, 73, 75, 76, 77, 78, 81, 82, 83], "an": [1, 3, 4, 5, 6, 7, 10, 12, 13, 15, 17, 19, 23, 24, 25, 29, 30, 31, 32, 39, 40, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 53, 54, 55, 57, 58, 59, 61, 62, 64, 65, 67, 68, 71, 72, 75, 76, 77, 78, 80, 81, 82, 83], "instanc": [1, 3, 4, 30, 31, 67, 68, 81], "user": [1, 3, 7, 43, 44, 67, 71, 82], "defin": [1, 3, 7, 12, 13, 15, 17, 18, 19, 20, 23, 43, 44, 75, 77], "two": [1, 3, 10, 36, 38, 41, 46, 47, 57, 58, 61, 62, 67, 68, 75, 77, 79, 80], "function": [1, 3, 4, 7, 13, 28, 33, 34, 35, 39, 40, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 57, 61, 62, 72, 73, 74, 75, 76, 78, 79, 81, 82, 83], "i": [1, 2, 3, 4, 5, 6, 7, 8, 10, 12, 13, 14, 15, 17, 18, 19, 20, 22, 23, 24, 25, 27, 28, 29, 30, 31, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 54, 55, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83], "fit": [1, 3, 10, 39, 40, 41, 67, 69, 81], "method": [1, 3, 4, 5, 6, 7, 8, 24, 25, 43, 45, 50, 51, 53, 54, 55, 57, 58, 59, 61, 63, 65, 67, 68, 71, 74, 75, 79, 80], "take": [1, 3, 4, 7, 19, 22, 27, 39, 40, 41, 50, 51, 53, 54, 57, 58, 61, 62, 75, 76, 81, 82], "object": [1, 2, 3, 4, 5, 6, 7, 8, 12, 17, 19, 20, 21, 22, 23, 24, 25, 27, 33, 34, 35, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 68, 71, 76, 77, 79, 81, 82, 83], "x": [1, 3, 12, 15, 19, 22, 55, 57, 58, 59, 65, 67, 68, 69, 71, 75, 80, 81], "which": [1, 2, 3, 5, 6, 7, 8, 10, 13, 27, 29, 30, 31, 33, 35, 36, 37, 38, 39, 40, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 53, 54, 55, 56, 57, 58, 67, 69, 71, 74, 75, 76, 77, 78, 81, 82, 83], "network": [1, 3, 57, 58, 59, 60, 61, 65], "f": [1, 2, 3, 4, 7, 8, 33, 34, 35, 39, 40, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 53, 54, 57, 58, 61, 62, 67, 69, 75, 76, 78, 80, 81, 82, 83], "z": [1, 3, 12, 19, 22, 24, 29, 31, 56, 57, 67, 68, 71, 75, 79, 80, 81], "theta": [1, 3, 44, 75], "subsequ": [1, 3, 57, 58, 67, 71], "ii": [1, 3, 24, 57, 58, 73, 74, 78, 80], "predict": [1, 2, 3, 4, 51, 52], "return": [1, 2, 3, 4, 10, 11, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 29, 30, 31, 32, 33, 34, 35, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 68, 69, 71, 75, 78, 79, 80, 82], "current": [1, 3, 11, 13, 19, 22, 25, 36, 37, 41, 59, 75, 77, 82], "For": [1, 3, 7, 13, 15, 17, 18, 20, 24, 25, 46, 47, 72, 75, 76, 77, 78, 80, 81], "more": [1, 3, 15, 17, 18, 19, 20, 22, 24, 25, 27, 48, 49, 75, 76, 77, 80, 83], "detail": [1, 3, 15, 27, 30], "tutori": [1, 3, 75, 76, 77, 79, 81, 82, 83], "paramet": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 68, 69, 71, 73, 74, 76, 78, 82], "project": [1, 2, 3, 4, 7, 8, 14, 24, 25, 26, 27, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 64, 65, 67, 68, 71, 74, 76, 77, 78, 79, 83, 84], "torch": [1, 2, 3, 4, 5, 6, 7, 8, 12, 14, 24, 25, 27, 31, 32, 33, 34, 35, 36, 38, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 68, 71, 75, 76, 77, 78, 79, 80, 81, 82, 83], "tensor": [1, 2, 3, 4, 5, 6, 7, 8, 12, 14, 24, 25, 27, 31, 32, 33, 34, 35, 36, 38, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 68, 71, 75, 76, 77], "data": [1, 2, 3, 4, 7, 8, 10, 11, 12, 13, 15, 24, 25, 27, 28, 29, 31, 32, 33, 35, 36, 37, 41, 46, 47, 50, 51, 52, 54, 55, 56, 57, 58, 67, 68, 69, 74, 75, 83, 84], "g": [1, 2, 3, 4, 7, 8, 33, 34, 35, 46, 47, 48, 49, 50, 51, 52, 53, 54, 75, 78, 80, 82], "systemmatrix": [1, 3, 7, 8, 33, 34, 35, 46, 47, 48, 49, 50, 51, 52, 53, 54, 75], "system": [1, 3, 4, 7, 8, 24, 29, 31, 33, 35, 36, 38, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 59, 60, 61, 65, 67, 71, 73, 74, 75, 76, 77, 79, 83], "matrix": [1, 3, 4, 7, 8, 24, 29, 31, 33, 35, 36, 38, 41, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 65, 74, 75, 76, 77, 79, 80, 83], "h": [1, 3, 4, 33, 35, 36, 38, 41, 46, 47, 48, 49, 50, 51, 52, 53, 54, 75, 76, 78, 80, 82], "us": [1, 2, 3, 4, 5, 6, 7, 8, 10, 12, 13, 15, 17, 18, 19, 20, 22, 23, 24, 25, 27, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 68, 69, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84], "hf": [1, 3, 7, 8, 33, 35, 50, 54, 75, 80, 82], "nn": [1, 3, 58], "neural": [1, 3, 58], "float": [1, 3, 4, 9, 10, 11, 12, 14, 17, 24, 25, 27, 29, 31, 32, 36, 37, 39, 40, 41, 43, 44, 45, 46, 47, 48, 49, 55, 57, 58, 60, 61, 62, 67, 68, 69, 71, 75, 80], "option": [1, 2, 3, 4, 7, 8, 12, 14, 15, 17, 19, 21, 22, 24, 25, 27, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 43, 44, 46, 47, 48, 49, 50, 51, 52, 54, 55, 56, 57, 58, 60, 61, 62, 67, 71, 74, 78], "valu": [1, 3, 10, 11, 12, 15, 17, 18, 19, 20, 21, 22, 23, 24, 29, 31, 32, 33, 35, 43, 44, 45, 50, 54, 56, 57, 67, 69, 71, 73, 75, 78, 81, 82], "optim": [1, 3, 10], "procedur": [1, 3], "default": [1, 2, 3, 4, 7, 8, 12, 14, 15, 17, 18, 20, 24, 25, 27, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 43, 44, 46, 47, 48, 49, 50, 51, 52, 54, 55, 56, 57, 58, 60, 61, 62, 67, 71, 82], "space": [1, 2, 3, 12, 19, 22, 39, 40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 54, 55, 57, 58, 67, 68, 75, 76, 78, 80, 82], "estim": [1, 3, 4, 24, 25, 27, 44, 48, 49, 50, 54, 61, 62, 74, 78, 82, 84], "precompute_normalization_factor": [1, 3], "bool": [1, 3, 4, 9, 12, 14, 15, 17, 19, 22, 23, 24, 25, 43, 44, 46, 47, 48, 49, 50, 51, 52, 54, 55, 57, 58, 61, 62, 67, 71], "whether": [1, 3, 12, 24, 25, 46, 47, 48, 49, 50, 54], "precomput": [1, 3], "h_m": [1, 3, 33, 35, 46, 47, 48, 49, 75, 82], "t": [1, 3, 4, 15, 17, 19, 21, 22, 23, 24, 25, 27, 33, 35, 36, 38, 41, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 67, 71, 75, 76, 77, 78, 79, 80, 81, 82, 83], "store": [1, 3, 41, 43, 44, 46, 47, 75, 77, 82, 83], "gpu": [1, 3, 46, 47, 48, 49, 74, 82], "befor": [1, 3, 36, 38, 41, 46, 47, 48, 49, 50, 51, 53, 54, 60, 61, 72, 75, 78, 79, 82], "true": [1, 3, 4, 12, 24, 25, 29, 51, 52, 55, 57, 58, 67, 71, 76, 77, 80, 81, 82, 83], "_compute_callback": [1, 3, 4], "n_iter": [1, 3, 4, 5, 6, 7, 8, 76, 77, 78, 79, 81, 82, 83], "n_subset": [1, 3, 4, 6, 7, 33, 34, 46, 47, 48, 49, 50, 54, 76, 77, 78, 79, 81, 82, 83], "comput": [1, 3, 4, 5, 6, 7, 8, 12, 24, 27, 29, 31, 33, 34, 35, 36, 38, 39, 40, 41, 43, 44, 45, 46, 47, 48, 49, 57, 58, 59, 61, 63, 65, 67, 68, 69, 71, 72, 73, 74, 75, 77, 78, 81, 82, 83], "after": [1, 2, 3, 4, 5, 6, 7, 8, 24, 33, 35, 36, 38, 41, 43, 45, 46, 47, 48, 49, 50, 51, 53, 54, 59, 60, 61, 65, 81, 82], "each": [1, 2, 3, 4, 5, 6, 7, 12, 19, 22, 24, 27, 30, 36, 37, 39, 40, 41, 43, 44, 46, 47, 50, 54, 55, 57, 58, 61, 62, 63, 64, 67, 68, 71, 75, 77, 79, 80, 81, 82, 83], "iter": [1, 3, 4, 5, 6, 7, 8, 15, 18, 19, 20, 21, 43, 45, 50, 51, 53, 54, 60, 61, 74, 75, 76, 77, 78, 81, 82, 83], "int": [1, 3, 4, 5, 6, 7, 8, 14, 15, 17, 19, 21, 23, 24, 25, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 43, 44, 46, 47, 48, 49, 50, 51, 52, 54, 57, 58, 61, 62, 67, 68, 71], "number": [1, 2, 3, 4, 5, 6, 7, 8, 12, 14, 19, 22, 30, 31, 33, 34, 36, 37, 38, 39, 40, 41, 43, 44, 46, 47, 48, 49, 50, 54, 60, 61, 62, 67, 68, 71, 75, 76, 77, 78, 81, 82], "subset": [1, 3, 4, 33, 34, 35, 43, 45, 46, 47, 48, 49, 50, 51, 52, 54, 75, 76, 77, 78, 82, 83], "__call__": [1, 2, 3, 4, 43, 44, 45, 59, 60, 61, 63, 65, 66, 67], "subit1": [1, 3], "n_subsets_osem": [1, 3], "none": [1, 2, 3, 4, 7, 8, 10, 12, 14, 15, 17, 18, 19, 20, 21, 22, 24, 25, 27, 30, 33, 34, 35, 36, 38, 39, 40, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 65, 77, 78, 81], "give": [1, 3, 10, 29, 57, 58, 75, 77, 82], "addit": [1, 2, 3, 13, 30, 31, 33, 35, 39, 40, 41, 44, 46, 47, 50, 54, 56, 57, 61, 62, 74, 75, 82, 83], "order": [1, 3, 4, 33, 34, 35, 43, 44, 50, 54, 75, 77, 79, 82], "The": [1, 3, 4, 5, 6, 7, 12, 13, 24, 25, 27, 31, 32, 33, 35, 36, 38, 39, 40, 41, 43, 44, 46, 47, 48, 49, 50, 54, 55, 57, 58, 59, 61, 62, 63, 65, 67, 68, 71, 72, 73, 75, 76, 77, 78, 79, 81, 83, 84], "quantiti": [1, 3, 4, 33, 35, 46, 47, 75], "subit2": [1, 3], "specifi": [1, 3, 4, 19, 22, 27, 30, 31, 33, 35, 36, 38, 39, 40, 41, 43, 44, 46, 47, 50, 54, 57, 58, 60, 61, 67, 71, 75, 76, 77, 78, 79, 81, 82], "paper": [1, 3], "control": [1, 3], "maxit": [1, 3], "retrain": [1, 3], "back": [2, 3, 33, 35, 36, 38, 41, 46, 47, 48, 49, 50, 51, 52, 54, 55, 56, 57, 58, 60, 61, 67, 71, 74, 75, 84], "filteredbackproject": [2, 3, 80], "angl": [2, 3, 24, 39, 40, 41, 42, 48, 49, 50, 51, 52, 54, 55, 57, 58, 61, 64, 67, 71, 75, 78, 80, 82], "hat": [2, 3, 4, 48, 49, 75, 76, 82], "frac": [2, 3, 4, 39, 40, 41, 43, 44, 45, 61, 62, 66, 67, 75, 76, 82], "pi": [2, 3, 39, 40, 41, 61, 64, 66, 67, 71, 75], "n_": [2, 3, 78], "text": [2, 3, 4, 46, 47, 55, 57, 75, 78], "proj": [2, 3, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 59, 60, 61, 65, 67, 68, 71, 79, 80, 83], "mathcal": [2, 3], "r": [2, 3, 19, 22, 39, 40, 41, 43, 44, 46, 47, 67, 68, 75, 76], "where": [2, 3, 4, 12, 24, 25, 39, 40, 41, 43, 44, 45, 46, 47, 50, 54, 56, 57, 58, 61, 62, 64, 67, 68, 71, 72, 75, 77, 78, 81, 82], "3d": [2, 3, 75, 80, 81, 82], "radon": [2, 3, 80], "2d": [2, 3, 12, 14, 39, 40, 41, 57, 58, 59, 75, 78, 82], "fourier": [2, 3], "appli": [2, 3, 36, 38, 41, 43, 45, 46, 47, 48, 49, 57, 58, 59, 60, 61, 63, 65, 67, 71, 80], "seper": [2, 3, 29, 31, 39, 40, 41, 46, 47, 75, 79, 81, 82], "ramp": [2, 3, 66, 67], "sequenc": [2, 3, 4, 10, 11, 12, 14, 19, 21, 22, 24, 25, 27, 29, 31, 39, 40, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 53, 54, 55, 57, 58, 61, 62, 67, 68, 75, 79, 82], "correspond": [2, 3, 4, 7, 8, 10, 12, 24, 25, 27, 29, 30, 31, 32, 36, 37, 39, 40, 41, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 61, 62, 63, 64, 67, 68, 69, 71, 72, 75, 76, 77, 78, 79, 81, 82, 83], "callabl": [2, 3, 4, 16, 33, 35, 43, 44, 57, 58, 61, 62], "dure": [2, 3, 50, 51, 53, 54, 55, 56, 57, 58, 75, 77, 80, 81, 82], "modul": [3, 28, 41, 43, 50, 59, 67], "all": [3, 4, 7, 10, 12, 13, 14, 19, 22, 24, 25, 29, 30, 31, 33, 35, 36, 37, 38, 39, 40, 41, 42, 46, 47, 48, 49, 50, 51, 52, 54, 55, 57, 58, 59, 61, 63, 65, 67, 68, 72, 73, 74, 75, 76, 77, 78, 81, 82, 83], "avail": [3, 24, 67, 68, 74, 83], "preconditionedgradientascentalgorithm": [3, 4], "object_initi": [3, 4, 6, 7], "norm_bp_subset_method": [3, 4, 33, 35], "subset_specif": [3, 4, 33, 35], "kwarg": [3, 4, 33, 34, 43, 44, 50, 54], "precondit": [3, 4, 82], "gradient": [3, 4, 33, 34, 35, 43, 44, 45, 75, 82], "ascent": [3, 4, 82], "e": [3, 4, 10, 19, 22, 39, 40, 41, 43, 50, 54, 61, 62, 66, 67, 68, 71, 73, 75, 79], "those": [3, 4, 75], "have": [3, 4, 19, 22, 24, 25, 33, 35, 36, 38, 39, 40, 41, 44, 46, 47, 50, 54, 74, 75, 78, 82], "form": [3, 4, 43, 50, 67, 69, 75, 82], "n": [3, 4, 12, 25, 26, 36, 38, 41, 43, 44, 50, 54, 57, 58, 61, 62, 75, 76, 82], "c": [3, 4, 15, 77, 82], "left": [3, 4, 7, 8, 43, 44, 61, 62, 66, 67, 72, 74, 75, 76, 78, 81, 82], "nabla_": [3, 4, 33, 34, 35, 44, 75, 82], "l": [3, 4, 33, 34, 35, 43, 45, 75, 81, 82], "beta": [3, 4, 7, 8, 43, 44, 45, 46, 47, 48, 49, 61, 64, 67, 71, 75, 77, 82], "v": [3, 4, 7, 8, 10, 43, 44, 45, 50, 51, 53, 54, 56, 57, 67, 69, 73, 75, 82], "right": [3, 4, 7, 8, 43, 44, 61, 62, 66, 67, 72, 74, 75, 76, 81, 82], "facilit": [3, 4], "its": [3, 4, 13, 19, 23, 46, 47, 57, 58, 67, 71, 76, 77, 79, 80, 81, 82], "associ": [3, 4, 43, 44, 82], "deriv": [3, 4, 33, 35, 43, 44, 46, 47, 75, 79], "facili": [3, 4], "If": [3, 4, 5, 6, 7, 10, 24, 25, 27, 33, 35, 36, 38, 39, 40, 41, 43, 44, 46, 47, 48, 49, 51, 52, 61, 62, 67, 71, 72, 74, 75, 76, 78, 81, 82, 83], "initi": [3, 4, 13, 48, 49, 50, 54, 57, 58, 67, 68, 75, 77, 78], "everi": [3, 4, 14, 30, 31, 57, 58, 74, 76, 81, 83], "voxel": [3, 4, 24, 39, 40, 41, 43, 44, 46, 47, 48, 49, 58, 61, 62, 63, 67, 68, 75, 76, 78, 80, 81, 82], "str": [3, 4, 9, 10, 11, 12, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 29, 30, 31, 32, 33, 35, 36, 37, 39, 40, 41, 46, 47, 55, 56, 57, 59, 61, 63, 64, 65, 67, 68, 69, 71], "how": [3, 4, 33, 35, 36, 37, 41, 74, 76, 77, 81, 83], "calcul": [3, 4, 33, 35], "when": [3, 4, 12, 14, 19, 23, 33, 34, 35, 36, 37, 39, 40, 41, 43, 45, 48, 49, 50, 54, 55, 56, 57, 58, 61, 62, 74, 75, 76, 77, 78, 79, 82, 83], "ar": [3, 4, 7, 11, 13, 15, 19, 22, 24, 25, 27, 30, 31, 33, 35, 36, 37, 38, 39, 40, 41, 43, 44, 45, 46, 47, 48, 49, 50, 54, 55, 56, 57, 58, 67, 68, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83], "h_n": [3, 4, 50, 54], "average_of_subset": [3, 4, 33, 35], "averag": [3, 4, 12, 24, 33, 35, 79, 81], "math": [3, 4, 12, 24, 25, 33, 35, 55, 61, 62], "": [3, 4, 19, 23, 33, 35, 43, 44, 67, 69, 71, 73, 74, 75, 76, 78, 79, 81, 82, 83], "ani": [3, 4, 15, 16, 17, 33, 35, 43, 45, 46, 47, 57, 58, 67, 71, 72, 74, 75, 78, 79, 82, 83], "given": [3, 4, 7, 8, 10, 12, 15, 19, 22, 24, 25, 29, 30, 31, 33, 35, 36, 38, 41, 43, 44, 46, 47, 48, 49, 51, 52, 57, 58, 61, 62, 66, 67, 68, 69, 71, 75, 78, 82], "scale": [3, 4, 27, 33, 35, 36, 38, 41, 43, 44, 45, 46, 47, 48, 49, 75, 82], "rel": [3, 4, 27, 33, 35, 43, 44, 46, 47, 48, 49, 77, 82, 83], "size": [3, 4, 15, 19, 22, 23, 24, 25, 33, 35, 39, 40, 41, 43, 45, 46, 47, 50, 54, 55, 56, 57, 58, 61, 62, 64, 71, 78, 80, 82], "equal": [3, 4, 19, 22, 33, 35, 56, 57, 76], "_set_n_subset": [3, 4, 33, 34], "set": [3, 4, 27, 33, 34, 43, 44, 45, 48, 49, 50, 54, 56, 57, 74, 75, 76, 79, 82], "abstract": [3, 4, 5, 6, 7, 15, 17, 18, 19, 20, 21, 33, 34, 43, 44, 45, 50, 51, 53, 54, 59, 65, 79], "_compute_precondition": [3, 4], "precondition": [3, 4, 82], "factor": [3, 4, 43, 45, 46, 47, 48, 49, 50, 51, 52, 54, 73, 75, 76, 77, 81, 82], "must": [3, 4, 5, 6, 7, 24, 25, 30, 31, 33, 34, 36, 38, 41, 44, 46, 47, 50, 54, 55, 57, 59, 61, 63, 65, 77, 78], "inherit": [3, 4, 7, 15, 17, 18, 19, 20, 23, 43, 45], "from": [3, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 22, 24, 25, 27, 29, 30, 31, 32, 39, 40, 41, 43, 45, 46, 47, 50, 51, 52, 54, 57, 58, 67, 68, 69, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83], "rais": [3, 4, 19, 23, 33, 34, 43, 44], "notimplementederror": [3, 4, 33, 34, 43, 44], "n_subset_specif": [3, 4], "_summary_": [3, 4], "arg": [3, 4, 15, 33, 34], "ignor": [3, 4, 15, 76], "updat": [3, 4, 30, 77, 81, 82, 83], "except": [3, 4, 15, 17, 18, 19, 20, 23], "call": [3, 4, 5, 6, 7, 39, 40, 41, 46, 47, 50, 54, 57, 58, 60, 61, 78, 81], "subiter": [3, 4, 5, 6, 7, 83], "base": [3, 4, 6, 7, 8, 14, 15, 17, 18, 19, 20, 21, 23, 27, 30, 31, 33, 35, 39, 40, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 62, 63, 64, 72, 75, 76, 81, 82], "linearpreconditionedgradientascentalgorithm": [3, 4], "expect": [3, 4, 13, 46, 47, 75, 77, 82], "maximum": [3, 4, 29, 31, 75, 82], "_linear_preconditioner_factor": [3, 4], "linear": [3, 4, 10, 11, 24, 25, 39, 40, 41, 67, 69], "d": [3, 4, 9, 24, 29, 30, 31, 57, 58, 79], "osmaposl": [3, 4, 74], "posteriori": [3, 4, 82], "one": [3, 4, 5, 6, 7, 15, 17, 18, 19, 20, 22, 29, 31, 44, 46, 47, 57, 58, 61, 62, 67, 71, 75, 78, 79, 82, 83], "step": [3, 4, 75, 82], "late": [3, 4, 75, 82], "nabla_f": [3, 4, 33, 35], "bsrem": [3, 4, 74, 77, 79, 83], "relaxation_sequ": [3, 4, 82], "lambda": [3, 4, 39, 40, 41, 82], "_": [3, 4, 75], "block": [3, 4, 14, 19, 22, 75, 82], "sequenti": [3, 4, 75, 82], "regular": [3, 4, 74, 75, 82], "alpha": [3, 4, 61, 62, 82], "omega_n": [3, 4, 82], "relxat": [3, 4], "futur": [3, 4, 13, 75, 77], "note": [3, 4, 24, 29, 31, 39, 40, 41, 46, 47, 55, 61, 64, 67, 71, 75, 77, 78, 79, 80, 81, 82], "provid": [3, 4, 7, 12, 13, 15, 17, 19, 23, 24, 25, 27, 36, 38, 41, 46, 47, 48, 49, 51, 52, 76, 78, 79, 82, 83], "so": [3, 4, 19, 22, 24, 25, 39, 40, 41, 46, 47, 59, 60, 61, 65, 67, 71, 72, 75, 76, 78, 80, 82], "4": [3, 4, 10, 43, 44, 67, 69, 74, 76, 77, 78, 79, 80, 81, 83], "8": [3, 4, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83], "would": [3, 4, 50, 51, 53, 54, 72, 75, 78], "final": [3, 4, 5, 6, 7, 57, 58, 81, 82], "fraction": [3, 4, 66, 67, 82], "tild": [3, 4, 36, 38, 41, 43, 45, 46, 47, 57, 58, 75, 76, 82], "_n": [3, 4], "k": [3, 4, 43, 44, 51, 52, 61, 62, 67, 68, 81, 82], "includ": [3, 4, 12, 13, 24, 30, 33, 35, 56, 57, 60, 61, 72, 74, 75, 76, 78, 81, 82], "kernel": [3, 4, 24, 25, 39, 40, 41, 57, 58, 60, 61, 62, 82], "reimplement": [3, 4], "becaus": [3, 4, 30, 31, 60, 61, 67, 69, 75, 77, 82], "need": [3, 4, 27, 36, 38, 39, 40, 41, 46, 47, 58, 67, 71, 74, 75, 76, 77, 78, 80, 81, 82, 83], "oppos": [3, 4], "consist": [4, 10, 12, 29, 31, 46, 47, 50, 51, 53, 54, 55, 57, 75, 78, 79, 82], "pga": 4, "both": [4, 78, 80, 81], "statist": [4, 5, 6, 7, 33, 35, 43, 74, 75, 81, 82], "sinc": [4, 19, 22, 27, 29, 30, 31, 55, 56, 57, 58, 61, 62, 67, 68, 75, 76, 78, 81, 82], "thei": [4, 15, 36, 38, 41, 44, 55, 57, 72, 75, 77, 78, 82], "depend": [4, 13, 19, 22, 24, 25, 33, 35, 39, 40, 41, 44, 57, 58, 67, 68, 75, 76, 81, 82], "common": 4, "clinic": [4, 81, 82], "subclass": [4, 5, 6, 7, 43, 44, 59, 61, 63, 65, 81], "character": [4, 80], "rule": 4, "scalar": 4, "special": [4, 79, 83], "case": [4, 15, 17, 39, 40, 41, 43, 44, 46, 47, 57, 58, 67, 71, 75, 76, 77, 78, 79, 81, 82], "wherebi": [4, 30, 31, 33, 35, 67, 68], "independ": [4, 29, 31, 75], "diag": 4, "m": [4, 19, 22, 46, 47, 48, 49, 51, 52, 72, 75, 82], "compute_uncertainti": [4, 83], "mask": [4, 24, 83], "data_storage_callback": [4, 83], "subiteration_numb": 4, "return_pct": [4, 83], "fals": [4, 9, 12, 14, 24, 25, 31, 32, 43, 44, 46, 47, 48, 49, 50, 51, 52, 54, 61, 62, 67, 71, 76, 77, 81, 82], "uncertainti": [4, 36, 37, 41, 74, 84], "sum": [4, 7, 8, 48, 49, 67, 68, 75, 79, 81], "region": [4, 10, 12, 27, 74, 76, 77, 79, 81, 82, 83], "well": [4, 46, 47, 76, 77, 80, 82], "datastoragecallback": [4, 6, 7, 83], "ha": [4, 43, 75, 76, 77, 78, 81, 82], "been": [4, 76, 77, 82], "storag": 4, "forward": [4, 33, 35, 36, 38, 41, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 75, 79, 80, 83], "boolean": 4, "last": [4, 19, 22, 56, 57], "addition": [4, 51, 52, 74], "percent": 4, "count": [4, 15, 46, 47, 51, 52, 67, 68, 74, 75, 78, 80, 81, 82, 83], "absolut": [4, 83], "OR": [4, 78], "_compute_uncertainty_matrix": 4, "chi": 4, "q": 4, "b": [4, 9, 15, 19, 23, 39, 40, 41, 56, 57, 75], "ff": [4, 33, 34, 35], "u": [4, 50, 51, 53, 54, 55, 57, 58, 61, 64, 75, 83], "gf": [4, 33, 34, 35], "meant": [4, 19, 23], "recurs": 4, "redefin": [5, 6, 7], "__init__": [5, 6, 7, 81], "run": [5, 6, 7, 8, 75, 76, 78, 81, 82], "argument": [5, 6, 7, 27, 30, 31, 56, 57, 58, 66, 67, 73, 76, 77, 78, 79, 82], "algorihtm": [5, 6, 7], "__run__": [5, 6, 7], "obj": [5, 6, 7, 81], "batch_siz": [5, 6, 7, 24, 25, 27, 31, 32, 43, 44, 45, 48, 49, 50, 54, 55, 56, 57, 58, 61, 64, 67, 68, 71], "lx": [5, 6, 7, 24, 25, 27, 31, 32, 39, 40, 41, 43, 44, 45, 48, 49, 50, 54, 55, 57, 58, 61, 64, 67, 68, 71], "ly": [5, 6, 7, 24, 25, 27, 31, 32, 39, 40, 41, 43, 44, 45, 48, 49, 50, 54, 55, 57, 58, 61, 64, 67, 68, 71], "lz": [5, 6, 7, 24, 25, 27, 31, 32, 39, 40, 41, 43, 44, 45, 48, 49, 50, 54, 55, 56, 57, 58, 61, 64, 67, 68, 71], "can": [5, 6, 7, 12, 15, 17, 18, 20, 36, 38, 41, 59, 60, 61, 65, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84], "variou": [5, 6, 7, 28, 50, 51, 53, 54, 81, 83], "metric": 7, "throughout": [7, 75, 77], "exampl": [7, 15, 17, 18, 20, 41, 61, 62, 72, 75, 76, 78, 80, 82], "you": [7, 72, 74, 75, 76, 78, 79, 81, 82, 83], "mai": [7, 30, 31, 41, 42, 46, 47, 48, 49, 61, 62, 75, 76, 77, 81, 82], "want": [7, 72, 74, 76, 77, 78, 81, 82, 83], "look": [7, 12, 31, 32, 67, 68, 75, 76, 78, 80, 81, 82], "nois": [7, 27, 81, 82], "liver": [7, 81, 82, 83], "A": [7, 12, 15, 17, 18, 19, 20, 22, 23, 50, 51, 53, 54, 55, 56, 57, 58, 61, 62, 64, 67, 68, 75, 77, 78, 81, 82], "simpli": [7, 75, 77, 80], "perform": [7, 14, 24, 36, 38, 41, 78, 79, 80, 81, 83], "oper": [7, 33, 35, 39, 40, 41, 50, 51, 53, 54, 59, 60, 61, 75, 80, 82], "input": [7, 11, 25, 27, 28, 30, 31, 58, 61, 63], "should": [7, 36, 38, 41, 43, 44, 45, 57, 58, 66, 67, 71, 72, 75, 77, 79, 82], "could": [7, 19, 22, 61, 62], "bia": [7, 81], "curv": [7, 10, 39, 40, 41, 67, 69, 81], "wa": [7, 13, 67, 69, 71, 73, 74, 76, 77, 78], "some": [7, 10, 19, 22, 24, 25, 30, 31, 74, 75, 76, 78, 81, 82], "ground": [7, 74, 81], "truth": [7, 74, 81], "compar": [7, 75, 78, 81], "loglikelihoodcallback": [7, 8], "log": [7, 8, 33, 35, 43, 44, 45, 75, 82], "liklihood": [7, 8, 43, 75], "measur": [7, 8, 27, 56, 57, 75, 77, 78, 82], "bayesian": [7, 8], "__version__": 9, "devic": [9, 46, 47, 59, 61, 63, 65, 76, 77], "dtype": [9, 15, 16, 17, 31, 32, 81], "delta": [9, 12, 43, 44], "1e": 9, "11": [9, 77, 78, 79, 80, 81, 82], "verbos": 9, "set_dtyp": 9, "dt": [9, 19, 23, 81, 82], "set_devic": 9, "set_verbos": 9, "map": [10, 12, 15, 17, 18, 20, 24, 25, 27, 31, 32, 46, 47, 48, 49, 50, 51, 53, 54, 55, 73, 74, 75, 76, 77, 78, 79, 80, 82], "correct": [10, 11, 25, 27, 31, 32, 36, 38, 39, 40, 41, 46, 47, 55, 57, 58, 59, 61, 64, 65, 67, 68, 73, 74, 76, 77, 78, 80], "module_path": 10, "datadir": 10, "file_wat": 10, "file_air": 10, "file_cbon": 10, "bilinear_transform": 10, "hu": [10, 11, 24, 25], "a1": 10, "a2": 10, "b1": 10, "b2": 10, "convert": [10, 11, 24, 25, 55, 73, 76, 78, 80, 81], "between": [10, 31, 36, 37, 39, 40, 41, 42, 43, 44, 50, 67, 68, 69, 75, 79, 81, 82], "hounsfield": [10, 24, 25, 29, 31], "unit": [10, 11, 12, 19, 22, 24, 25, 27, 29, 31, 75, 77, 78, 81, 82], "effect": [10, 29, 31, 46, 47, 55, 57, 58, 80, 83], "energi": [10, 11, 14, 19, 22, 24, 25, 27, 29, 31, 55, 57, 58, 67, 69, 73, 75, 78, 79, 80, 82, 83], "coeffici": [10, 24, 25, 51, 52, 55, 57, 61, 62, 67, 69, 73, 77, 78, 82], "radionuclid": [10, 24, 25, 74, 75], "It": [10, 19, 23, 28, 57, 58, 67, 69, 74, 75, 76, 77, 78, 82, 83], "distinct": [10, 50, 75], "geq": 10, "2": [10, 12, 33, 35, 36, 38, 39, 40, 41, 43, 44, 61, 62, 64, 66, 67, 68, 69, 71, 74, 75, 76, 77, 83], "3": [10, 12, 14, 24, 25, 36, 37, 38, 39, 40, 41, 60, 61, 64, 67, 69, 71, 75, 76, 77, 78, 79, 80, 83], "get_hu_from_spectrum_interp": 10, "file": [10, 11, 12, 13, 14, 24, 25, 27, 29, 30, 31, 32, 55, 57, 67, 69, 73, 74, 76, 77, 78, 79, 81, 82, 83], "obtain": [10, 11, 12, 14, 24, 25, 27, 29, 33, 35, 46, 47, 48, 49, 50, 54, 57, 58, 60, 61, 63, 67, 68, 73, 74, 75, 76, 78, 79, 82, 83], "materi": [10, 24, 25, 67, 69, 75], "filepath": [10, 12, 24, 25, 27, 29, 31, 55, 57, 67, 69, 78], "desir": [10, 24, 25, 67, 69], "np": [10, 12, 15, 17, 18, 20, 24, 29, 31, 32, 67, 68, 69, 76, 77, 78, 79, 80, 81, 83], "arrai": [10, 12, 14, 19, 22, 24, 29, 31, 46, 47, 50, 54, 57, 58, 67, 68, 69, 76, 81], "get_hu_mu_curv": 10, "files_ct": [10, 11, 24, 25, 78, 79, 83], "ct_kvp": [10, 11], "e_spect": [10, 11], "get": [10, 12, 19, 22, 24, 25, 27, 39, 40, 41, 43, 44, 46, 47, 48, 49, 50, 51, 52, 54, 57, 58, 67, 69, 71, 73, 76, 77, 78, 81, 82], "housnfield": 10, "air": 10, "water": [10, 80], "cortic": 10, "bone": [10, 79, 82], "point": [10, 12, 19, 22, 39, 40, 41, 57, 58, 75, 79, 81, 83], "slice": [10, 24, 25, 29, 30, 31, 55, 56, 57, 67, 68, 74, 76, 78, 80, 81, 82, 83], "kvp": [10, 11], "scan": [10, 11, 12, 24, 25, 27, 29, 31, 55, 57, 75, 76, 78, 81, 82], "photopeak": [10, 11, 19, 22, 24, 25, 27, 78, 79, 81, 82, 83], "tupl": [10, 12, 14, 15, 16, 17, 19, 43, 44, 67, 68, 69], "hu_to_mu": 10, "p_water_opt": 10, "p_air_opt": 10, "mu": [10, 11, 24, 25, 46, 47, 67, 69, 76, 80], "_description_": [10, 27, 30, 31, 46, 47, 61, 63, 67, 69, 71], "_type_": [10, 27, 30, 31, 61, 62, 63, 67, 71], "get_hu_corticalbon": 10, "found": [10, 77], "get_ect_from_corticalbone_hu": 10, "find": [10, 31, 32, 55, 57, 58, 67, 68, 81], "get_hu2mu_convers": [10, 11], "convers": [10, 11, 81], "cm": [10, 11, 24, 25, 27, 39, 40, 41, 55, 57, 67, 69, 78, 80, 81, 82], "output": [11, 24, 25, 27, 28, 31, 32, 46, 47, 55, 56, 57, 58, 74, 77, 78, 82], "modal": [11, 25, 28, 30, 31, 41, 42, 74, 75, 82], "support": [11, 13, 25, 59, 61, 62, 73, 77, 78, 82], "get_aligned_attenuation_map": [12, 77], "headerfil": [12, 25, 27, 31, 32, 81, 82], "object_meta": [12, 25, 26, 43, 44, 45, 46, 47, 48, 49, 50, 51, 53, 54, 55, 57, 58, 59, 60, 61, 62, 65, 76, 77, 78, 79, 80, 81, 82, 83], "align": [12, 24, 25, 55, 57, 67, 71, 74, 75, 77, 78, 79, 82, 83], "invers": [12, 43, 44, 67, 71, 74], "mm": [12, 19, 22, 27, 36, 37, 41, 76], "assum": [12, 19, 22, 33, 35, 36, 38, 41, 46, 47, 50, 54, 55, 57, 75, 77, 80, 82], "same": [12, 29, 31, 36, 38, 41, 46, 47, 48, 49, 50, 54, 55, 56, 57, 58, 60, 61, 62, 67, 71, 75, 79, 81], "center": [12, 36, 37, 41, 67, 68], "header": [12, 14, 18, 19, 20, 21, 22, 25, 27, 30, 31, 32, 77, 82], "objectmeta": [12, 24, 39, 40, 41, 42, 43, 44, 45, 50, 51, 53, 54, 59, 60, 61, 65, 76, 77], "inform": [12, 14, 19, 22, 24, 25, 27, 29, 30, 31, 36, 37, 38, 41, 43, 44, 46, 47, 57, 58, 74, 75, 77, 78], "about": [12, 19, 22, 72, 74, 75, 77], "dimens": [12, 24, 25, 36, 38, 39, 40, 41, 46, 47, 50, 54, 61, 64, 67, 71, 75, 78, 80, 81], "get_scanner_lut": [12, 76], "path": [12, 24, 25, 27, 31, 32, 48, 49, 76, 77, 78, 79, 81, 82, 83], "init_volume_nam": 12, "crystal": [12, 24, 25, 36, 38, 41, 76, 77], "final_volume_nam": 12, "world": 12, "mean_interaction_depth": [12, 76], "return_info": 12, "scanner": [12, 14, 19, 22, 24, 25, 36, 38, 41, 46, 47, 55, 58, 61, 64, 67, 68, 71, 73, 74, 75, 76, 77, 78], "lookup": [12, 14, 36, 38, 41, 46, 47, 74, 76, 77], "tabl": [12, 14, 36, 38, 41, 46, 47, 74, 76, 77], "three": [12, 67, 68, 78, 82], "particular": [12, 24, 30, 31, 33, 35, 44, 46, 47, 51, 52, 55, 57, 58, 67, 69, 71, 75, 76, 81], "index": [12, 15, 19, 22, 23, 24, 25, 46, 47, 48, 49, 50, 51, 52, 54, 58, 78, 80, 82], "y": [12, 19, 22, 57, 58, 67, 68, 75, 80, 81], "posit": [12, 24, 27, 43, 44, 75, 76, 78, 82, 84], "detector": [12, 14, 18, 19, 20, 22, 36, 38, 39, 40, 41, 46, 47, 55, 57, 58, 67, 68, 74, 75, 76, 77, 78, 82], "id": [12, 14, 19, 22, 36, 38, 41, 46, 47, 76, 77], "correpsond": 12, "mac": [12, 76], "geometri": [12, 74, 76], "volum": [12, 81], "name": [12, 19, 21, 22, 24, 25, 43, 44, 67, 68, 72, 74, 75, 79, 83], "lowest": 12, "level": 12, "element": [12, 30, 36, 38, 39, 40, 41, 46, 47, 61, 64, 67, 68, 69, 71, 73, 75, 77, 82], "highest": 12, "interact": [12, 76, 77], "depth": [12, 39, 40, 41, 76, 77], "photon": [12, 46, 47, 55, 57, 67, 69, 74, 75, 76, 78, 80], "get_n_compon": 12, "mac_fil": 12, "gantri": 12, "rsector": 12, "submodul": 12, "per": [12, 43, 45, 82], "macro": [12, 74, 76], "get_detector_id": [12, 14, 76, 77], "tof": [12, 14, 19, 22, 36, 37, 38, 41, 76, 77], "tof_bin_edg": [12, 19, 22, 76], "substr": 12, "coincid": [12, 19, 22, 36, 38, 41, 76], "same_source_po": [12, 76], "root": [12, 74, 76], "bin": [12, 14, 19, 22, 36, 37, 38, 41, 75, 76, 77, 81], "edg": [12, 14, 19, 22, 55, 57, 76], "onli": [12, 15, 36, 37, 38, 39, 40, 41, 43, 44, 48, 49, 50, 51, 52, 54, 55, 57, 58, 59, 67, 68, 75, 76, 77, 78, 80, 81, 82], "random": [12, 33, 35, 36, 38, 41, 75, 76, 77], "pair": [12, 36, 37, 38, 41, 46, 47, 75, 77], "detect": [12, 24, 36, 38, 41, 46, 47, 55, 56, 57, 67, 68, 74, 75, 76, 81], "lor": [12, 19, 22, 36, 37, 38, 41, 46, 47, 75, 76, 77], "get_radiu": 12, "detector_id": [12, 36, 38, 41, 76, 77], "scanner_lut": [12, 36, 38, 41, 76, 77], "radial": [12, 27, 39, 40, 41, 58, 67, 68, 75, 78], "up": [12, 19, 22, 29, 31, 46, 47, 48, 49, 74, 75, 82, 83], "radii": [12, 24, 39, 40, 41, 80, 82], "get_tabl": 12, "det_id": 12, "crystal1id": 12, "crystal2id": 12, "submoduleid": 12, "moduleid": 12, "rsectorid": 12, "fo": 12, "symmetri": [12, 36, 37, 41], "normal": [12, 36, 38, 41, 46, 47, 48, 49, 50, 51, 52, 54, 55, 56, 57, 58, 60, 61, 74, 77, 78, 81], "eta": [12, 46, 47, 76, 77], "time": [12, 14, 15, 17, 19, 22, 23, 24, 25, 27, 30, 36, 37, 38, 41, 46, 47, 48, 49, 74, 75, 76, 77, 82], "non": [12, 27, 36, 38, 41, 46, 47, 77, 82], "event": [12, 14, 19, 22, 36, 38, 41, 46, 47, 48, 49, 56, 57, 74, 76, 77], "list": [12, 15, 17, 19, 22, 24, 25, 27, 29, 31, 32, 39, 40, 41, 46, 47, 48, 49, 50, 54, 57, 58, 61, 62, 67, 68, 73, 77, 78, 82, 83], "get_eta_cylinder_calibr": [12, 76], "cylinder_radiu": [12, 76], "calibr": [12, 76], "cylindr": [12, 76], "shell": [12, 76], "radiu": [12, 57, 58, 76, 78, 80], "out": [12, 67, 71, 74, 76, 77, 82], "mean": [12, 14, 36, 37, 41, 55, 57, 72, 75, 76, 77, 81, 82], "remove_events_out_of_bound": [12, 76, 77], "remov": [12, 76, 77, 80], "outsid": [12, 19, 23, 48, 49], "reconstruc": 12, "coordin": [12, 14, 24, 29, 31, 36, 38, 41, 43, 44, 61, 63, 67, 71, 74, 76], "commit": [13, 72], "format": [13, 28, 77], "establish": [13, 75, 77, 82], "emiss": [13, 74, 75, 77], "tomographi": [13, 74, 75, 77], "standard": [13, 15, 17, 19, 23, 27, 46, 47, 75, 77, 81, 82], "etsi": [13, 77], "still": [13, 46, 47, 75, 76, 77], "earli": 13, "stage": 13, "onc": [13, 72, 76, 82], "offici": 13, "repositori": [13, 72, 74], "now": [13, 19, 23, 75, 76, 77, 78, 79, 80, 81, 82], "directori": [13, 78, 82], "github": [13, 72], "com": [13, 76], "etsin": [13, 77], "prddefinit": 13, "yardl": [13, 15], "In": [13, 30, 31, 41, 42, 43, 44, 46, 47, 57, 58, 67, 71, 75, 76, 77, 78, 79, 80, 81, 82, 83], "read_prd": 13, "py": 13, "borrow": 13, "etsihack": 13, "lmsimrecon": 13, "librari": [13, 74], "while": [13, 36, 38, 41, 42, 46, 47, 50, 51, 53, 54, 75, 77, 80], "code": [13, 24, 25, 44, 73, 81, 82, 83], "singl": [13, 19, 22, 24, 25, 29, 31, 57, 58, 74, 75, 79, 82], "manag": [13, 74], "own": [13, 74], "petsird_fil": 14, "read_tof": [14, 77], "read_energi": [14, 77], "time_block_id": [14, 77], "return_head": [14, 77], "read": [14, 15, 18, 74], "listmod": [14, 36, 38, 41, 46, 47, 74, 76, 77], "determin": [14, 43, 44, 57, 58, 76, 78, 83], "length": [14, 15, 17, 19, 22, 24, 36, 38, 39, 40, 41, 57, 58, 75], "attribut": [14, 24, 25, 29, 43, 45, 57, 58, 78], "get_scanner_lut_from_head": [14, 77], "relat": [14, 61, 64, 67, 71], "physic": 14, "get_tof_meta_from_head": [14, 77], "n_sigma": [14, 36, 37, 41, 60, 61, 76], "flight": [14, 36, 37, 38, 41, 46, 47, 74, 76, 77], "sigma": [14, 36, 37, 39, 40, 41, 57, 58, 60, 61, 62, 82], "consid": [14, 24, 25, 36, 37, 39, 40, 41, 46, 47, 48, 49, 51, 52, 75, 77, 82], "pettofmeta": [14, 36, 37, 38, 41, 76], "magic_byt": 15, "byte": [15, 75], "current_binary_format_vers": 15, "int8_min": [15, 17], "int8_max": [15, 17], "uint8_max": [15, 17], "int16_min": [15, 17], "int16_max": [15, 17], "uint16_max": [15, 17], "int32_min": [15, 17], "int32_max": [15, 17], "uint32_max": [15, 17], "int64_min": [15, 17], "int64_max": [15, 17], "uint64_max": [15, 17], "binaryprotocolwrit": [15, 18, 19], "stream": [15, 17, 18, 19, 20], "schema": [15, 17, 19, 21], "abc": [15, 17, 18, 19, 20, 21, 23, 43, 44, 51, 53], "helper": [15, 17, 19, 23, 24, 25, 43, 44], "wai": [15, 17, 19, 23, 60, 61, 82], "union": [15, 16, 17, 18, 19, 20, 23], "binaryio": [15, 18, 19], "close": [15, 17, 19, 21], "_end_stream": [15, 17, 19, 21], "binaryprotocolread": [15, 18, 19], "expected_schema": 15, "bufferedread": [15, 17, 18, 19, 20], "bytesio": [15, 18, 19], "codedoutputstream": [15, 18], "buffer_s": 15, "65536": 15, "ensure_capac": 15, "flush": 15, "write": [15, 18, 75], "formatt": 15, "struct": [15, 24], "write_byt": 15, "bytearrai": 15, "write_bytes_directli": 15, "memoryview": 15, "write_byte_no_check": 15, "write_unsigned_varint": 15, "uint8": [15, 17, 19, 23], "uint16": [15, 17, 19, 23], "uint32": [15, 17, 19, 22, 23], "uint64": [15, 17, 19, 23], "zigzag_encod": 15, "int8": [15, 17, 19, 23], "int16": [15, 17, 19, 23], "int32": [15, 17, 19, 23], "int64": [15, 17, 19, 23], "write_signed_varint": 15, "codedinputstream": [15, 18], "ellipsi": [15, 16, 17, 19], "read_byt": 15, "read_unsigned_varint": 15, "zigzag_decod": 15, "read_signed_varint": 15, "read_view": 15, "read_bytearrai": 15, "_fill_buff": 15, "min_count": 15, "t_np": [15, 17], "typeseri": 15, "typic": [15, 17, 18, 20, 43, 46, 47, 58, 75], "declar": [15, 17, 18, 20], "parameter": [15, 17, 18, 20], "variabl": [15, 17, 18, 20, 33, 35, 78], "might": [15, 17, 18, 19, 20, 22, 33, 35], "kt": [15, 17, 18, 20], "vt": [15, 17, 18, 20], "def": [15, 17, 18, 20, 79, 80, 81], "__getitem__": [15, 17, 18, 20], "self": [15, 17, 18, 19, 20, 22, 23, 39, 40, 41, 42, 43, 45, 50, 54, 81], "kei": [15, 17, 18, 20, 81], "etc": [15, 17, 18, 20, 41, 42, 78, 82], "follow": [15, 17, 18, 20, 61, 62, 72, 74, 75, 76, 78, 79, 81, 82, 83], "lookup_nam": [15, 17, 18, 20], "try": [15, 17, 18, 20, 80, 83], "keyerror": [15, 17, 18, 20], "numpi": [15, 16, 17, 19, 22, 23, 57, 58, 76, 77, 78, 79, 80, 81, 83], "dtypelik": [15, 17], "overall_dtyp": [15, 17], "struct_format_str": 15, "write_numpi": [15, 18], "read_numpi": 15, "is_trivially_serializ": 15, "structseri": 15, "numpy_typ": [15, 17], "format_str": 15, "boolseri": 15, "bool_": [15, 17], "bool_seri": 15, "int8seri": 15, "int8_seri": 15, "uint8seri": 15, "uint8_seri": 15, "int16seri": 15, "int16_seri": 15, "uint16seri": 15, "uint16_seri": 15, "int32seri": 15, "int32_seri": 15, "uint32seri": 15, "uint32_seri": 15, "int64seri": 15, "int64_seri": 15, "uint64seri": 15, "uint64_seri": 15, "sizeseri": 15, "size_seri": 15, "float32seri": 15, "float32": [15, 17, 19, 22, 23, 31, 32, 81], "float32_seri": 15, "float64seri": 15, "float64": [15, 17, 19, 23], "float64_seri": 15, "complex32seri": 15, "complexfloat": [15, 19, 23], "complex64": [15, 17], "complexfloat32_seri": 15, "complex64seri": 15, "complexdoubl": [15, 19, 23], "complex128": [15, 17], "complexfloat64_seri": 15, "stringseri": 15, "object_": [15, 17], "string_seri": 15, "epoch_ordinal_dai": 15, "datetime_days_dtyp": 15, "dateseri": 15, "datetim": [15, 17, 19, 22, 23], "date": [15, 17, 74], "datetime64": [15, 17, 19, 23], "date_seri": 15, "timedelta_nanoseconds_dtyp": 15, "timeseri": 15, "timedelta64": [15, 17, 19, 23], "time_seri": 15, "datetime_nanoseconds_dtyp": 15, "epoch_datetim": 15, "datetimeseri": 15, "datetime_seri": 15, "noneseri": 15, "none_seri": 15, "tenum": [15, 17], "enumseri": 15, "integer_seri": 15, "enum_typ": [15, 17], "optionalseri": 15, "element_seri": [15, 17], "void": [15, 17, 18, 20], "unioncaseprotocol": 15, "proto": 15, "meth": 15, "Such": 15, "primarili": [15, 28], "static": [15, 17, 19, 23], "checker": 15, "recogn": 15, "structur": 15, "subtyp": 15, "duck": 15, "func": 15, "pass": [15, 76, 83], "check": [15, 67, 68, 74, 78, 82], "pep": 15, "544": 15, "decor": 15, "runtime_check": 15, "act": [15, 82], "simpl": [15, 17, 74, 82], "mind": 15, "runtim": 15, "presenc": 15, "signatur": 15, "genproto": 15, "unionseri": 15, "union_typ": [15, 17], "streamseri": 15, "fixedvectorseri": 15, "vectorseri": 15, "tkei": [15, 17], "tkey_np": [15, 17], "tvalu": [15, 17], "tvalue_np": [15, 17], "mapseri": 15, "key_seri": 15, "value_seri": 15, "dict": [15, 16, 17], "ndarrayserializerbas": 15, "ndarrai": [15, 17, 19, 22], "_get_dtype_and_subarray_shap": [15, 17], "_write_data": 15, "_read_data": 15, "shape": [15, 17, 19, 22, 24, 25, 36, 38, 39, 40, 41, 42, 43, 44, 48, 49, 50, 54, 57, 58, 67, 68, 76, 77, 78, 80, 81, 82], "_is_current_array_trivially_serializ": 15, "dynamicndarrayseri": 15, "ndarrayseri": 15, "ndim": [15, 17], "fixedndarrayseri": 15, "recordseri": [15, 18], "field_seri": 15, "_write": 15, "_read": [15, 17], "int32_struct": 15, "write_fixed_int32": 15, "read_fixed_int32": 15, "make_get_dtype_func": 16, "dtype_map": 16, "genericalia": 16, "current_ndjson_format_vers": 17, "missing_sentinel": 17, "ndjsonprotocolwrit": [17, 19, 20], "textio": [17, 19, 20], "_write_json_lin": 17, "ndjsonprotocolread": [17, 19, 20], "_read_json_lin": 17, "stepnam": 17, "jsonconvert": [17, 20], "to_json": [17, 20], "numpy_to_json": [17, 20], "from_json": [17, 20], "json_object": [17, 20], "from_json_to_numpi": [17, 20], "supports_non": 17, "boolconvert": 17, "bool_convert": 17, "int8convert": 17, "int8_convert": 17, "uint8convert": 17, "uint8_convert": 17, "int16convert": 17, "int16_convert": 17, "uint16convert": 17, "uint16_convert": 17, "int32convert": 17, "int32_convert": 17, "uint32convert": 17, "uint32_convert": 17, "int64convert": 17, "int64_convert": 17, "uint64convert": 17, "uint64_convert": 17, "sizeconvert": 17, "size_convert": 17, "float32convert": 17, "float32_convert": 17, "float64convert": 17, "float64_convert": 17, "complex32convert": 17, "complex": 17, "complexfloat32_convert": 17, "complex64convert": 17, "complexfloat64_convert": 17, "stringconvert": 17, "string_convert": 17, "dateconvert": 17, "date_convert": 17, "timeconvert": 17, "time_convert": 17, "datetimeconvert": 17, "datetime_convert": 17, "enumconvert": 17, "name_to_valu": 17, "value_to_nam": 17, "tflag": 17, "flagsconvert": 17, "optionalconvert": 17, "element_convert": 17, "unionconvert": 17, "vectorconvert": 17, "fixedvectorconvert": 17, "mapconvert": 17, "key_convert": 17, "value_convert": 17, "ndarrayconverterbas": 17, "check_dtyp": 17, "input_dtyp": 17, "fixedndarrayconvert": 17, "dynamicndarrayconvert": 17, "ndarrayconvert": 17, "binaryprdexperimentwrit": [18, 19], "prdexperimentwriterbas": [18, 19, 20, 21], "writer": [18, 19, 20, 21], "prdexperi": [18, 19, 20, 21], "_write_head": [18, 19, 20, 21], "_write_time_block": [18, 19, 20, 21], "collect": [18, 19, 20, 21, 43, 44, 51, 53, 81], "timeblock": [18, 19, 20, 21, 22], "binaryprdexperimentread": [18, 19], "prdexperimentreaderbas": [18, 19, 20, 21], "_read_head": [18, 19, 20, 21], "_read_time_block": [18, 19, 20, 21], "_coincidenceeventseri": 18, "coincidenceev": [18, 19, 20, 22], "_subjectseri": 18, "subject": [18, 19, 20, 22], "_institutionseri": 18, "institut": [18, 19, 20, 22], "_examinformationseri": 18, "examinform": [18, 19, 20, 22], "_detectorseri": 18, "_scannerinformationseri": 18, "scannerinform": [18, 19, 20, 22], "_headerseri": 18, "_timeblockseri": 18, "_timeintervalseri": 18, "timeinterv": [18, 19, 20, 22], "_timeframeinformationseri": 18, "timeframeinform": [18, 19, 20, 22], "_min_numpy_vers": 19, "22": [19, 78, 82], "_parse_vers": 19, "version": [19, 46, 47, 77], "protocolerror": [19, 23], "contract": [19, 23], "respect": [19, 23, 33, 34, 80], "outofrangeenum": [19, 23], "enum": [19, 23], "allow": [19, 23, 72, 78, 83], "classmethod": [19, 23], "_missing_": [19, 23], "__eq__": [19, 22, 23], "other": [19, 22, 23, 67], "__hash__": [19, 23], "hash": [19, 23], "__str__": [19, 22, 23], "__repr__": [19, 22, 23, 39, 40, 41, 42], "repr": [19, 22, 23, 39, 40, 41, 42], "nanoseconds_from_epoch": [19, 23], "basic": [19, 23, 75], "nanosecond": [19, 23], "precis": [19, 23], "alwai": [19, 23, 46, 47, 82], "utc": [19, 23], "properti": [19, 23], "numpy_valu": [19, 23], "to_datetim": [19, 23], "from_compon": [19, 23], "year": [19, 23], "month": [19, 23], "dai": [19, 23], "hour": [19, 23], "minut": [19, 23, 81], "second": [19, 23, 33, 34, 35, 44, 46, 47, 75, 78, 82], "from_datetim": [19, 23], "pars": [19, 23, 76], "nanoseconds_since_midnight": [19, 23], "timezon": [19, 23], "awar": [19, 23], "repres": [19, 23, 43, 44, 45, 66, 67, 74, 75, 78, 80, 81, 82], "wall": [19, 23], "clock": [19, 23, 75], "_nanoseconds_per_dai": [19, 23], "from_tim": [19, 23], "structural_equ": [19, 23], "_t": [19, 23], "unioncas": [19, 23], "tag": [19, 23], "detector_1_id": [19, 22], "detector_2_id": [19, 22], "tof_idx": [19, 22], "energy_1_idx": [19, 22], "energy_2_idx": [19, 22], "identifi": [19, 22, 30, 31], "indic": [19, 22, 46, 47, 55, 57, 58, 75, 77], "discret": [19, 22, 36, 37, 41, 46, 47, 75], "todo": [19, 22], "too": [19, 22], "much": [19, 22, 76, 78, 82], "combin": [19, 22, 36, 38, 41, 74, 75, 77, 82], "necessari": [19, 22, 27, 57, 58], "locat": [19, 22, 24, 25, 29, 39, 40, 41, 55, 57, 67, 68, 69, 71, 75, 78, 82], "just": [19, 22, 75], "sampl": [19, 22, 74, 77], "we": [19, 22, 39, 40, 41, 72, 75, 76, 77, 78, 79, 80, 81, 82, 83], "plan": [19, 22, 75, 83], "full": [19, 22, 48, 49, 51, 52, 57, 58, 60, 61, 72, 79], "here": [19, 22, 44, 74, 75, 77, 78, 80, 81, 83, 84], "start_of_acquisit": [19, 22], "item": [19, 22, 75, 79, 81], "describ": [19, 22, 24, 43, 44, 45, 72], "exam": [19, 22], "incomplet": [19, 22], "address": [19, 22], "model_nam": [19, 22], "tof_resolut": [19, 22], "energy_bin_edg": [19, 22], "energy_resolution_at_511": [19, 22], "listmode_time_block_dur": [19, 22], "first": [19, 22, 24, 27, 31, 32, 36, 38, 41, 44, 55, 56, 57, 58, 67, 68, 74, 75, 77, 78, 79, 81, 82], "than": [19, 22, 24, 78], "stretch": [19, 22], "resolut": [19, 22, 24, 25, 36, 37, 41, 73, 74, 75], "window": [19, 22, 24, 25, 27, 75, 78, 79, 82], "kev": [19, 22, 24, 73], "fwhm": [19, 22, 24, 25, 36, 37, 41, 60, 61, 77], "incom": [19, 22], "gamma": [19, 22, 43, 44, 77, 82], "511": [19, 22, 73], "express": [19, 22, 43, 61, 62, 66, 67, 75], "ratio": [19, 22, 75], "w": [19, 22, 36, 38, 41, 46, 47, 66, 67], "durat": [19, 22], "number_of_detector": [19, 22], "number_of_tof_bin": [19, 22], "number_of_energy_bin": [19, 22], "prompt_ev": [19, 22], "delayed_ev": [19, 22], "multipli": [19, 22, 78, 82], "listmodetimeblockdur": [19, 22], "startofacquisit": [19, 22], "prompt": [19, 22], "better": [19, 22, 75], "delai": [19, 22], "time_fram": [19, 22], "interv": [19, 22, 75], "consecut": [19, 22], "number_of_time_fram": [19, 22], "start": [19, 22, 76, 80, 81, 82], "stop": [19, 22], "millisecond": [19, 22], "acquisit": [19, 22, 74, 76, 80], "get_dtyp": [19, 22], "reader": [19, 21], "__enter__": [19, 21], "__exit__": [19, 21], "exc_typ": [19, 21], "exc": [19, 21], "traceback": [19, 21], "baseexcept": [19, 21], "read_head": [19, 21], "ordin": [19, 21], "read_time_block": [19, 21], "copy_to": [19, 21], "_wrap_iter": [19, 21], "final_st": [19, 21], "_raise_unexpected_st": [19, 21], "actual": [19, 21, 36, 38, 41], "_state_to_method_nam": [19, 21], "state": [19, 21], "ti": [19, 21], "write_head": [19, 21], "write_time_block": [19, 21], "ndjsonprdexperimentread": [19, 20], "ndjsonprdexperimentwrit": [19, 20], "_coincidenceeventconvert": 20, "_subjectconvert": 20, "_institutionconvert": 20, "_examinformationconvert": 20, "_detectorconvert": 20, "_scannerinformationconvert": 20, "_headerconvert": 20, "_timeblockconvert": 20, "_timeintervalconvert": 20, "_timeframeinformationconvert": 20, "_mk_get_dtyp": 22, "parse_projection_dataset": 24, "dataset": [24, 29, 30, 31, 77], "pydicom": [24, 78, 79], "iii": [24, 57, 58], "iv": 24, "flag": 24, "multipl": [24, 30, 31, 74, 78, 81, 82, 84], "slot": [24, 25], "were": [24, 33, 35], "ewindow": 24, "timewindow": 24, "ltheta": [24, 25, 27, 50, 54, 56, 57, 67, 71], "lr": [24, 25, 27, 50, 54, 56, 57, 67, 71], "get_metadata": [24, 27, 78, 79, 81, 82, 83], "index_peak": [24, 25, 78, 79, 83], "dcm": [24, 25, 55, 57, 78, 79, 83], "energywindowinformationsequ": [24, 25, 78, 79], "projmeta": [24, 39, 40, 41, 42, 50, 51, 53, 54, 59, 60, 61, 65], "get_project": [24, 25, 27, 78, 79, 82, 83], "index_tim": [24, 25], "otherwis": [24, 25, 75], "spectobjectmeta": [24, 25, 27, 39, 40, 41, 46, 47, 48, 49, 55, 57, 58, 61, 62, 80], "spectprojmeta": [24, 25, 27, 39, 40, 41, 48, 49, 55, 57, 58, 61, 62, 80], "get_window_width": 24, "width": [24, 36, 37, 39, 40, 41, 57, 58, 60, 61, 67, 71, 78], "detectorinformationsequ": 24, "rang": [24, 75, 76, 79], "get_scatter_from_tew": [24, 25, 27, 78, 79, 83], "index_low": [24, 25, 78, 79, 83], "index_upp": [24, 25, 78, 79, 83], "tripl": [24, 25, 27, 75, 78, 82], "lower": [24, 25, 27, 78, 79, 80, 82], "upper": [24, 25, 27, 78, 79, 80, 82], "get_attenuation_map_from_fil": [24, 25], "file_am": [24, 25], "usual": [24, 25], "manufactur": [24, 25, 30], "atteun": [24, 25, 75, 78], "get_psfmeta_from_scanner_param": [24, 25, 73, 78, 79, 80, 83], "collimator_nam": [24, 25, 73, 78, 80], "energy_kev": [24, 25, 78, 79, 80, 83], "min_sigma": [24, 25, 39, 40, 41, 57, 58, 78], "lead": [24, 25, 73], "intrinsic_resolut": [24, 25], "uniqu": [24, 25, 30, 31], "collim": [24, 25, 57, 58, 67, 68, 74, 78, 80, 83], "extern": [24, 25, 74, 76, 77], "section": [24, 25, 75], "readthedoc": [24, 25], "minimum": [24, 25], "blur": [24, 25, 39, 40, 41, 50, 51, 53, 54, 57, 58, 67, 68, 75, 78], "fix": [24, 25, 39, 40, 41, 72], "convolut": [24, 25, 39, 40, 41, 58], "least": [24, 25, 39, 40, 41, 57, 58], "greater": [24, 25], "intrins": [24, 25], "scintil": [24, 25], "spectpsfmeta": [24, 25, 27, 39, 40, 41, 57, 58], "ct_to_mumap": [24, 25], "file_nm": [24, 25, 56, 57, 78, 79, 83], "alreadi": [24, 25, 46, 47, 78], "get_attenuation_map_from_ct_slic": [24, 25, 79, 83], "projectio": [24, 25], "ndata": [24, 25], "energyinformationsequ": [24, 25], "keep_as_hu": [24, 25], "mode": [24, 25, 46, 47, 55, 57, 61, 64, 67, 71, 75, 77], "constant": [24, 25, 39, 40, 41, 46, 47, 55, 57, 60, 61, 67, 71, 75], "ct_output_shap": [24, 25], "apply_affin": [24, 25], "usabl": [24, 25], "individu": [24, 25, 29, 31], "raw": [24, 25, 78], "done": [24, 25, 33, 35, 36, 38, 39, 40, 41, 59, 60, 61, 65, 67, 68, 75, 76, 78], "don": [24, 25, 67, 71, 76, 78], "keep": [24, 25], "nm": [24, 25], "_get_affine_spect_project": 24, "filenam": [24, 82], "affin": [24, 29, 31, 76, 77], "stitch_multib": [24, 79], "recon": [24, 74, 76, 79, 84], "files_nm": [24, 79], "midslic": [24, 79], "stitch": [24, 79], "togeth": [24, 27, 29, 31, 75, 79, 82], "differ": [24, 27, 29, 30, 31, 36, 38, 41, 42, 43, 44, 46, 47, 55, 57, 58, 61, 62, 73, 74, 75, 79, 80, 81, 82, 83], "bed": [24, 75, 84], "n_bed": 24, "doi": 24, "10": [24, 46, 47, 75, 76, 77, 78, 79, 80, 81, 82], "1117": 24, "12": [24, 75, 76, 77, 78, 80, 81, 82, 83], "2254096": 24, "crossfad": [24, 79], "tem": [24, 79], "transit": [24, 79], "error": [24, 44, 79], "minim": [24, 30, 79], "new": [24, 30, 31, 57, 58, 61, 63, 72, 75, 77, 78, 82], "l_z": [24, 75], "get_aligned_rtstruct": [24, 83], "file_rt": [24, 83], "dicom_series_path": [24, 83], "rt_struct_nam": [24, 83], "cutoff_valu": 24, "5": [24, 61, 62, 76, 77, 78, 79, 80, 81, 83], "load": [24, 76, 77, 82, 83], "rt": 24, "seri": [24, 30, 75], "link": [24, 73, 74, 84], "rtstruct": [24, 83], "interpol": [24, 61, 64, 67, 71, 79], "frame": [24, 61, 64, 67, 71], "less": [24, 73, 80], "exclud": 24, "save_dcm": [24, 78, 79], "save_path": [24, 78, 79, 83], "recon_nam": [24, 78, 79], "save": [24, 30, 31, 46, 47, 75, 76, 77, 79, 81, 82], "folder": [24, 55, 57, 75, 77, 78, 82], "studi": [24, 30, 31, 78], "recon_method_str": 24, "class": [24, 30, 68, 75, 80, 81], "get_attenuation_map": [25, 27, 81, 82], "open": [25, 27, 29, 31, 32, 72, 74, 76, 83], "reduce_amap": [25, 26], "amap": [25, 26, 77, 80], "reduce_project": [25, 26], "proj_meta": [25, 26, 46, 47, 48, 49, 50, 51, 53, 54, 55, 57, 58, 59, 60, 61, 62, 65, 76, 78, 79, 80, 81, 82, 83], "n_pixel": [25, 26], "n_angl": [25, 26], "n_angle_start": [25, 26], "subsample_project": 26, "relation_dict": 27, "distanc": [27, 39, 40, 41, 43, 44, 57, 58, 61, 62, 67, 68, 75, 82], "corrfil": 27, "doesn": [27, 82], "cor": 27, "circular": [27, 75], "orbit": [27, 75], "_get_projections_from_single_fil": 27, "simul": [27, 74, 76, 77, 81, 82], "weight": [27, 36, 38, 41, 43, 44, 45, 46, 47, 48, 49, 61, 62, 74, 76, 79, 82], "get_energy_window_width": [27, 82], "headerfile_peak": 27, "headerfile_low": 27, "headerfile_upp": 27, "activity_tim": 27, "product": 27, "activ": [27, 74, 81, 82, 83], "poisson": [27, 33, 35, 75, 81, 82], "taken": [27, 80, 81], "combine_projection_data": [27, 81], "add": [27, 30, 50, 54, 72, 75, 77, 80, 82], "amount": [27, 67, 68, 71, 75], "along": [27, 46, 47, 48, 49, 50, 54, 55, 57, 58, 67, 68, 71, 72, 75, 76, 77, 78, 79], "combine_scatter_data_tew": [27, 81], "headerfiles_peak": 27, "headerfiles_low": [27, 81, 82], "headerfiles_upp": [27, 81, 82], "get_psfmeta_from_head": [27, 81, 82], "model": [27, 33, 35, 36, 38, 39, 40, 41, 46, 47, 50, 51, 53, 54, 55, 56, 57, 58, 67, 68, 71, 73, 74, 75, 77, 82], "organ": [28, 74, 82, 83], "secondarili": 28, "_get_affine_multifil": [29, 31], "mani": [29, 31, 75], "why": [29, 31, 75, 77], "also": [29, 30, 31, 46, 47, 48, 49, 50, 51, 53, 54, 74, 75, 76, 77, 80, 82, 83], "across": [29, 31], "max_z": [29, 31], "axial": [29, 31, 39, 40, 41, 55, 56, 57, 74, 75, 78, 80], "make": [29, 31, 72, 74, 75, 78, 81, 82], "open_multifil": [29, 31], "them": [29, 31, 72, 74, 75, 77, 81, 82], "stack": [29, 31], "compute_max_slice_loc_multifil": 29, "compute_slice_thickness_multifil": 29, "thick": 29, "though": [29, 78], "often": [29, 56, 57, 75], "sometim": [29, 82], "inconsist": 29, "imagepositionpati": 29, "align_images_affin": [29, 31], "im_fix": [29, 31], "im_mov": [29, 31], "affine_fix": [29, 31], "affine_mov": [29, 31], "cval": [29, 31], "get_file_meta": 30, "sop_instance_uid": [30, 31], "sop_class_uid": [30, 31], "sop": 30, "uid": [30, 31], "filemetadataset": 30, "generate_base_dataset": 30, "filedataset": [30, 31], "add_required_elements_to_d": 30, "add_study_and_series_inform": 30, "reference_d": [30, 31], "refer": [30, 31, 61, 64, 67, 71, 74, 75, 83], "copi": [30, 31, 78, 83], "add_patient_inform": 30, "patient": [30, 31, 74, 75, 78, 79], "create_d": [30, 31], "potenti": [30, 31, 57, 58, 72, 78], "convent": [30, 31, 75], "import": [30, 31, 50, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83], "string": [30, 31, 32, 78], "get_header_valu": [31, 32], "list_of_attribut": [31, 32], "split_substr": [31, 32], "split_idx": [31, 32], "return_al": [31, 32], "entri": [31, 32, 76], "line": [31, 32, 72, 75, 78], "get_attenuation_map_interfil": [31, 32], "poissonloglikelihood": [33, 35, 76, 77, 78, 79, 82, 83], "additive_term": [33, 34, 35, 79, 82, 83], "sum_i": [33, 35, 75, 82], "g_i": [33, 35, 46, 47, 75, 82], "ln": [33, 35, 43, 45, 75], "_i": [33, 35, 46, 47, 75, 82], "term": [33, 35, 82], "acquir": [33, 35, 76, 82], "ad": [33, 35, 82], "thing": [33, 35, 78, 81], "like": [33, 35, 73, 75, 81, 82], "compute_gradi": [33, 34, 35], "subset_idx": [33, 35, 46, 47, 48, 49, 50, 51, 52, 54], "over": [33, 35, 44, 46, 47, 58, 75, 78, 82], "entir": [33, 35, 46, 47, 58, 67, 68, 71, 75], "compute_gradient_ff": [33, 34, 35], "precomputed_forward_project": [33, 35], "recomput": [33, 35], "compute_gradient_gf": [33, 34, 35], "sub": [33, 34], "twice": [33, 34], "petlmprojmeta": [36, 38, 41, 46, 47, 76, 77], "tof_meta": [36, 38, 41, 76, 77], "detector_ids_sensit": [36, 38, 41], "weights_sensit": [36, 38, 41, 76, 77], "denot": [36, 38, 41, 75, 82], "valid": [36, 38, 41, 46, 47, 76, 77], "param": [36, 38, 41, 67, 71], "construct": [36, 38, 41, 48, 49], "modifi": [36, 38, 41, 72, 75, 78, 81, 82], "aren": [36, 38, 41], "absenc": [36, 38, 41], "sensit": [36, 38, 41, 46, 47, 73, 76, 77], "As": [36, 38, 39, 40, 41, 61, 62, 75, 77, 80, 82], "sensitivti": [36, 38, 41, 46, 47], "becom": [36, 38, 41, 43, 75], "These": [36, 38, 41, 44, 46, 47, 61, 62, 78, 81, 82], "possibl": [36, 38, 41, 43, 44, 74, 76], "num_bin": [36, 37, 41], "bin_width": [36, 37, 41], "bin_typ": [36, 37, 41], "symmetr": [36, 37, 41, 57, 58, 60, 61, 62], "arrang": [36, 37, 41, 75, 76], "distribut": [36, 37, 41, 75], "evenli": [36, 37, 41], "side": [36, 37, 41, 67, 71, 72], "dr": [39, 40, 41, 42, 46, 47, 58, 73, 76, 77, 79, 80, 81, 83], "compute_padded_shap": [39, 40, 41], "pad": [39, 40, 41, 42, 55, 57, 67, 71], "rotat": [39, 40, 41, 48, 49, 57, 58, 61, 64, 67, 71, 75, 81], "avoid": [39, 40, 41], "anyth": [39, 40, 41], "cut": [39, 40, 41], "off": [39, 40, 41, 76, 77, 78, 79, 80, 81, 82, 83], "projection_shap": [39, 40, 41, 80], "certain": [39, 40, 41, 46, 47, 50, 54, 56, 57], "sigma_fit_param": [39, 40, 41, 78], "sigma_fit": [39, 40, 41], "kernel_dimens": [39, 40, 41, 78], "gaussian": [39, 40, 41, 46, 47, 57, 58, 60, 61, 77], "p": [39, 40, 41, 74, 75, 76], "By": [39, 40, 41, 48, 49, 50, 54, 82], "sqrt": [39, 40, 41, 67, 69], "spread": [39, 40, 41], "1d": [39, 40, 41, 57, 58, 76], "plane": [39, 40, 41, 55, 58, 67, 68, 71, 75], "dimension": [39, 40, 41], "mix": [39, 40, 41], "whose": [39, 40, 41], "extens": [39, 40, 41, 82], "infinit": [39, 40, 41], "crop": [39, 40, 41, 67, 71], "numer": [39, 40, 41], "pertain": [41, 55, 57], "interpret": [41, 75], "parent": [41, 42, 59, 61, 63, 65], "fairli": [41, 42], "similar": [41, 42, 43, 44, 75], "featur": [41, 42, 75], "significantli": [41, 42], "encorpor": [43, 82], "under": [43, 48, 49, 72, 78], "modif": 43, "sum_": [43, 44, 75], "w_": [43, 44, 82], "phi": [43, 44, 61, 64, 67, 71, 75], "f_r": [43, 44, 45], "f_": [43, 44, 75], "nearbi": 43, "obj2obj_transform": [43, 45, 46, 47, 48, 49, 50, 51, 53, 54, 76, 77, 78, 79, 80, 81, 82, 83], "posterior": [43, 45, 75], "probabl": [43, 45, 46, 47, 55, 75], "foward": [43, 45], "partial": [43, 45], "set_object_meta": [43, 44, 45], "set_beta_scal": [43, 45], "finit": [43, 45, 56, 57, 76], "set_object": [43, 45], "nearestneighbourprior": [43, 44], "nearest": [43, 44, 67, 68, 82], "neighbour": [43, 44, 67, 68, 82], "neighbourweight": [43, 44], "abov": [43, 44, 50, 54, 61, 62, 75, 76, 79, 82, 83], "euclideanneighbourweight": [43, 44], "euclidean": [43, 44, 67, 68], "_pair_contribut": [43, 44], "beta_scal": [43, 44], "second_order_derivative_object": [43, 44], "swap_object_and_neighbour": [43, 44], "phi0": [43, 44], "fr": [43, 44], "phi1": [43, 44], "phi2_1": [43, 44], "phi2_2": [43, 44], "derivative_ord": [43, 44], "higher": [43, 44], "without": [43, 44, 77, 80], "compon": [43, 44, 75, 82], "ouput": [43, 44], "quadraticprior": [43, 44], "quadrat": [43, 44], "phi_0": [43, 44], "phi_1": [43, 44], "equat": [43, 44, 75], "logcoshprior": [43, 44], "logcosh": [43, 44], "tanh": [43, 44], "cosh": [43, 44], "relativedifferenceprior": [43, 44, 77, 79, 82, 83], "3f_": [43, 44], "assign": [43, 44], "meta": [43, 44, 57, 58], "appropri": [43, 44], "coord": [43, 44], "j": [43, 44, 50, 54, 67, 68, 75], "shift": [43, 44, 67, 68], "anatomyneighbourweight": [43, 44], "anatomy_imag": [43, 44], "similarity_funct": [43, 44], "anatom": [43, 44, 74, 82], "mri": [43, 44, 61, 62, 74, 76, 82], "bound": [43, 44, 76, 77], "represet": [43, 44], "complet": [43, 44, 76, 81], "dissimilar": [43, 44], "topnanatomyneighbourweight": [43, 44, 79, 82, 83], "n_neighbour": [43, 44, 82], "top": [43, 44, 46, 47, 56, 57, 74, 81], "most": [43, 44, 57, 58, 75, 78, 79], "compute_inclusion_tensor": [43, 44], "summat": [44, 57, 58], "nabla_r": 44, "phi_2": 44, "wish": [44, 74, 75, 83], "petlmsystemmatrix": [46, 47, 76, 77], "n_split": [46, 47, 76, 77], "approxim": [46, 47], "int_": [46, 47], "incorpor": [46, 47, 77, 82], "integr": [46, 47, 74], "joseph3d": [46, 47], "meadata": [46, 47], "regard": [46, 47], "account": [46, 47, 80], "split": [46, 47], "memori": [46, 47, 82], "handl": [46, 47], "intern": [46, 47, 57, 58, 82], "reason": [46, 47, 75], "veri": [46, 47, 50], "larg": [46, 47, 58, 76], "enough": [46, 47, 58, 67, 71], "set_n_subset": [46, 47, 48, 49, 50, 54], "partit": [46, 47, 50, 54], "get_projection_subset": [46, 47, 48, 49, 50, 54], "subsampl": [46, 47, 48, 49], "g_m": [46, 47, 48, 49, 51, 52, 75, 82], "lm": [46, 47, 77], "s_m": [46, 47, 75, 82], "total": [46, 47, 48, 49, 75, 78, 81, 82], "get_weighting_subset": [46, 47, 48, 49], "reduc": [46, 47, 48, 49], "_m": [46, 47, 82], "compute_atteunation_probability_project": [46, 47], "idx": [46, 47, 48, 49], "being": [46, 47, 55, 57, 58, 61, 64, 67, 68, 75, 77, 82], "compute_sens_factor": [46, 47], "compute_normalization_factor": [46, 47, 48, 49, 50, 51, 52, 54], "backproject": [46, 47], "backward": [46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 75], "return_norm_const": [46, 47, 48, 49, 50, 51, 52, 54], "trace": [46, 47, 76], "spectsystemmatrix": [48, 49, 78, 79, 80, 81, 82, 83], "proj2proj_transform": [48, 49, 50, 54, 78, 79, 80, 81, 82, 83], "n_parallel": [48, 49, 82], "object_initial_based_on_camera_path": [48, 49], "occur": [48, 49, 50, 51, 53, 54], "parallel": [48, 49, 58, 67, 68, 73, 75], "speed": [48, 49], "increas": [48, 49], "usag": [48, 49, 84], "camera": [48, 49, 73], "zero": [48, 49, 55, 56, 57, 67, 68, 75, 81], "_get_object_initi": [48, 49, 50, 54], "ones": [48, 49, 50, 54, 80, 82], "t_m": [48, 49, 51, 52, 82], "h_mf": [48, 49, 75], "via": [48, 49, 72, 74, 76, 79, 82], "spectcompletesystemmatrix": [48, 49], "psf_kernel": [48, 49], "store_system_matrix": [48, 49], "mask_based_on_attenu": [48, 49], "present": [48, 49, 72, 80], "_get_proj_posit": [48, 49], "_get_object_posit": [48, 49], "_compute_system_matrix_compon": [48, 49], "_compute_projections_mask": [48, 49], "vector": [50, 61, 63, 75, 76], "One": [50, 75, 78, 82], "mathbb": [50, 51, 53, 54, 55, 56, 57, 58, 61, 64, 75], "produc": [50, 51, 53, 54], "characterist": [50, 51, 53, 54], "through": [50, 51, 53, 54, 75, 76, 80], "im2im_transform": [50, 51, 53, 54], "initialize_transform": [50, 54], "build": [50, 54, 59, 61, 62, 75, 78, 79, 81, 82, 83], "angle_subset": [50, 54], "formula": [50, 54], "sum_j": [50, 54, 75], "h_": [50, 54, 75], "ij": [50, 54, 75, 80, 82], "get_subset_split": [50, 54], "extendedsystemmatrix": [50, 51, 53, 54], "system_matric": [50, 51, 53, 54], "sum_n": [50, 54], "v_n": [50, 54], "otim": [50, 54, 75], "b_n": [50, 54], "a_n": [50, 54], "batch": [50, 54, 57, 58, 61, 64, 67, 71, 75, 78, 80], "n_gate": [50, 54], "extend": [50, 54, 73], "origin": [50, 54, 56, 57, 61, 63, 67, 68, 71, 72, 81], "kemsystemmatrix": [51, 52, 82], "kem_transform": [51, 52, 82], "hk": [51, 52, 82], "kemtransform": [51, 52, 61, 62, 82], "go": [51, 52, 72, 73, 74], "real": [51, 52, 81], "motionsystemmatrix": [51, 53], "motion_transform": [51, 53], "get_prob_of_detection_matrix": 55, "dx": [55, 67, 68], "emit": 55, "pixel": [55, 56, 57, 67, 71, 75, 82], "axi": [55, 57, 58, 67, 68, 71, 75, 76, 77, 78, 79, 80, 81, 82, 83], "spectattenuationtransform": [55, 57, 78, 79, 80, 81, 82, 83], "assume_pad": [55, 57, 58], "obj2obj": [55, 57, 58, 59, 61, 63, 64, 65], "accept": [55, 57, 72], "either": [55, 57, 75, 78], "extrapol": [55, 57], "beyond": [55, 57], "fed": [55, 57], "configur": [55, 57, 58, 59, 60, 61, 62, 65, 78], "init": [55, 57, 58, 61, 62], "object_i": [55, 57, 58, 61, 63], "ang_idx": [55, 57, 58], "norm_const": [55, 56, 57, 58, 60, 61, 62], "diagon": [55, 56, 57], "compute_average_prob_matrix": [55, 57], "cutofftransform": [56, 57, 79, 83], "proj2proj": [56, 57], "few": [56, 57, 58, 75, 77, 78, 81], "due": [56, 57, 75, 80], "field": [56, 57, 61, 63, 79], "view": [56, 57, 75, 76, 77, 78, 79, 81], "bottom": [56, 57, 74, 81], "sharp": [56, 57], "fov": [56, 57, 76, 77], "apppli": [56, 57], "spectpsftransform": [57, 58, 78, 79, 80, 81, 82, 83], "psf_meta": [57, 58, 78, 79, 80, 81, 82, 83], "kernel_f": [57, 58], "psf_net": [57, 58], "smooth": [57, 58, 60, 61, 82], "There": [57, 58, 75, 78, 79], "relev": [57, 58], "work": [57, 58, 75, 77, 80, 82], "low": [57, 58, 73, 74], "medium": [57, 58, 73, 78, 80, 83], "automat": [57, 58, 78, 82], "abl": [57, 58, 72], "accur": [57, 58], "respons": [57, 58], "_configure_gaussian_model": [57, 58], "_configure_kernel_model": [57, 58], "arbitrari": [57, 58], "_configure_manual_net": [57, 58], "net": [57, 58, 75], "_compute_kernel_s": [57, 58], "what": [57, 58, 72, 75], "encompass": [57, 58], "_get_sigma": [57, 58], "1st": [57, 58], "_apply_psf": [57, 58], "situat": [57, 58, 75], "transpos": [57, 58, 78, 81], "implemt": [57, 58], "gaussianblurnet": 58, "layer_r": 58, "layer_z": 58, "head": [58, 72], "conv1d": 58, "direct": [58, 75], "sup": [58, 67, 68], "inf": [58, 67, 68], "adjust": [58, 59, 60, 61, 65, 75], "cdr": 58, "arbitrarypsfnet": 58, "kernel_s": 58, "perpendicular": 58, "encapsul": [58, 75], "get_1d_psf_lay": 58, "layer": 58, "cover": 58, "l1": 58, "l2": 58, "treat": 58, "channel": [58, 78], "group": 58, "conv2d": 58, "im2im": [59, 61, 63, 65], "obj2im": [59, 61, 63, 65], "pytorch": [59, 61, 63, 65, 74, 75], "gaussianfilt": [60, 61, 76, 77, 82], "half": [60, 61], "max": [60, 61], "truncat": [60, 61], "_get_kernel": [60, 61], "altern": [60, 61, 76, 82], "support_object": [61, 62, 82], "support_kernel": [61, 62, 82], "support_kernels_param": [61, 62, 82], "distance_kernel": [61, 62, 82], "distance_kernel_param": [61, 62, 82], "top_n": [61, 62, 82], "kernel_on_gpu": [61, 62, 82], "basi": [61, 62], "v_i": [61, 62, 82], "v_j": [61, 62, 82], "exp": [61, 62, 82], "sublist": [61, 62], "semi": [61, 62], "colon": [61, 62, 83], "sai": [61, 62, 75], "support_kernel_param": [61, 62, 82], "40": [61, 62, 79, 82], "x_i": [61, 62, 82], "x_j": [61, 62, 82], "expleft": [61, 62], "2sigma": [61, 62], "compute_kernel": [61, 62], "rotationtransform": [61, 64], "bilinear": [61, 64, 67, 71], "azimuth": [61, 64, 67, 71, 75], "dvfmotiontransform": [61, 63], "dvf_forward": [61, 63], "dvf_backward": [61, 63], "_get_vol_ratio": [61, 63], "dvf": [61, 63], "_get_old_coordin": [61, 63], "meshgrid": [61, 63, 80], "_get_new_coordin": [61, 63], "old_coordin": [61, 63], "old": [61, 63], "deform": [61, 63], "_apply_dvf": [61, 63], "vol_ratio": [61, 63], "rampfilt": [66, 67], "omega": [66, 67], "hammingfilt": [66, 67, 80], "wl": [66, 67, 80], "wh": [66, 67, 80], "ham": [66, 67, 80], "co": [66, 67], "omega_l": [66, 67], "omega_h": [66, 67], "leq": [66, 67], "nyquist": [66, 67], "frequenc": [66, 67, 80], "93": [66, 67, 80], "rev_cumsum": [67, 68], "revers": [67, 68, 75], "cumul": [67, 68], "contribut": [67, 68, 72, 74, 75, 82], "get_dist": [67, 68], "thedist": [67, 68], "central": [67, 68, 80], "get_object_nearest_neighbour": [67, 68], "integ": [67, 68, 81], "get_blank_below_abov": [67, 68], "blank": [67, 68, 78], "blank_abov": [67, 68], "blank_below": [67, 68], "empirc": [67, 68], "print_collimator_paramet": [67, 68, 78, 79, 83], "print": [67, 68, 78, 79, 82, 83], "check_if_class_contains_method": [67, 68], "method_nam": [67, 68], "python": [67, 68, 74], "rotate_detector_z": [67, 71], "neg": [67, 71, 75], "cartesian": [67, 71, 75], "manual": [67, 71, 77, 78], "compute_pad_s": [67, 71], "retain": [67, 71], "pad_proj": [67, 71], "fill": [67, 71], "pad_object": [67, 71], "xy": [67, 71], "unpad_proj": [67, 71], "unpad": [67, 71], "unpad_object": [67, 71], "pad_object_z": [67, 71], "pad_siz": [67, 71], "unpad_object_z": [67, 71], "direcion": [67, 71], "dual_sqrt_exponenti": [67, 69], "c1": [67, 69], "c2": [67, 69], "d1": [67, 69], "d2": [67, 69], "nist": [67, 69], "c_1e": [67, 69], "d_1": [67, 69], "c_2e": [67, 69], "d_2": [67, 69], "chosen": [67, 69], "pure": [67, 69], "gave": [67, 69], "good": [67, 69, 80], "result": [67, 69, 79, 82], "get_e_mu_data_from_datasheet": [67, 69], "datafil": [67, 69], "mass": [67, 69], "50kev": [67, 69], "511kev": [67, 69], "get_mu_from_spectrum_interp": [67, 69], "compute_tew": [67, 70], "projection_low": [67, 70], "projection_upp": [67, 70], "width_low": [67, 70], "width_upp": [67, 70], "width_peak": [67, 70], "compute_pad_size_pad": 71, "team": 72, "highli": 72, "encourag": 72, "commun": 72, "believ": 72, "reach": [72, 75, 78], "multimod": 72, "framework": 72, "issu": [72, 75], "intend": [72, 75], "branch": 72, "do": [72, 75, 77, 78], "your": [72, 74, 78, 81, 82], "hand": 72, "On": 72, "local": 72, "clone": [72, 83], "Then": [72, 74, 76, 82, 83], "command": 72, "git": 72, "fetch": 72, "checkout": 72, "branchnam": 72, "replac": 72, "chang": [72, 76, 82], "essenti": 72, "pleas": [72, 74, 76, 79], "sure": [72, 74, 78, 82], "test": [72, 73], "proceed": 72, "made": 72, "messag": 72, "tens": 72, "statement": 72, "do_thi": 72, "do_that": 72, "someth": 72, "renam": 72, "push": 72, "pull": 72, "request": 72, "choos": [72, 75, 79], "merg": 72, "ref": 72, "someon": 72, "review": 72, "contact": 72, "comment": [72, 73], "ll": [72, 75, 76, 77, 78, 79, 80, 81, 82], "eventu": 72, "next": [72, 75, 76, 81], "releas": 72, "varieti": 73, "task": 73, "media": 73, "compound": 73, "col": 73, "mont": [73, 74, 76], "carlo": [73, 74, 76], "program": [73, 76], "column": 73, "below": [73, 76, 78, 79, 81, 82, 83], "millenium": 73, "vg": 73, "kameran": 73, "gv": 73, "legp": 73, "purpos": [73, 76, 83], "lehr": 73, "high": [73, 74, 80], "eegp": 73, "megp": [73, 79, 83], "hegp": 73, "leur": 73, "fan": 73, "beam": 73, "ultra": [73, 74], "ueuh": 73, "mpr": 73, "kamera": 73, "gm": 73, "ge": 73, "infinia": 73, "gi": [73, 79, 83], "eleg": 73, "lehx": 73, "870": 73, "g8": 73, "lhr": 73, "leh": 73, "luhr": 73, "ventri": 73, "gt": [73, 78, 80, 81], "640": 73, "optima": 73, "630": [73, 74], "670": 73, "czt": 73, "gz": [73, 76, 77], "crystalcam": 73, "hh": 73, "le": 73, "rect": 73, "me": [73, 76, 78, 80], "circ": [73, 75], "bw": 73, "philip": 73, "brightview": 73, "pb": 73, "cahr": 73, "cadiac": 73, "hr": 73, "von": 73, "gahlen": 73, "holland": 73, "lee": 73, "extra": [73, 78], "super": 73, "leu": 73, "leti": 73, "thyroid": 73, "me23": 73, "123": 73, "me19": 73, "190": 73, "me26": 73, "260": 73, "me30": 73, "300": 73, "me36": 73, "360": [73, 80], "meti": 73, "thyro333id": 73, "he51": 73, "engin": 73, "dynam": 73, "corpor": 73, "ed": 73, "lem": 73, "meu": 73, "meh": 73, "mehr": 73, "mediso": 73, "nuclin": 73, "spirit": 73, "dh": 73, "leuhr": 73, "ma": 73, "anyscan": 73, "lhrh": 73, "mlegp": 73, "mhegp": 73, "pr": 73, "prism": 73, "2000": 73, "3000": 73, "leap": 73, "re": [73, 75, 78, 81], "he": 73, "apfb": 73, "hrfb": 73, "urfb": 73, "ultrahigh": 73, "resol": 73, "si": 73, "siemen": [73, 74, 77, 78, 80], "medic": [73, 74, 75, 77, 79, 83], "cam": [73, 76], "512": [73, 81], "ther": 73, "therapi": [73, 74], "delu": 73, "se": 73, "lefb": 73, "uh": 73, "sy": [73, 78, 80], "symbia": [73, 78], "he1": 73, "he2": 73, "enabl": 74, "fast": 74, "acceler": 74, "permit": 74, "easi": [74, 76], "learn": 74, "tradit": 74, "research": 74, "cite": 74, "arxiv": 74, "ab": [74, 79], "2309": 74, "01977": 74, "positron": 74, "mlem": [74, 75, 76], "osemosl": [], "exist": [74, 76, 78], "datatyp": 74, "abil": 74, "firstli": [74, 76], "graphic": [74, 81], "card": [74, 81], "driver": 74, "To": [74, 75, 79, 82], "ensur": [74, 75, 78], "enter": 74, "download": [74, 82, 84], "newest": 74, "recommend": 74, "anaconda": 74, "environ": 74, "virtual": 74, "conda": 74, "pytomography_env": 74, "pip": 74, "instruct": 74, "parallelproj": 74, "Be": 74, "develop": 74, "guid": 74, "question": [74, 75], "softwar": [74, 76, 77], "feel": 74, "free": [74, 76], "ask": 74, "discours": 74, "receiv": 74, "target": 74, "lu177": 74, "dotat": 74, "neuroendocrin": 74, "tumour": 74, "cycl": [74, 75], "7": [74, 76, 77, 78, 79, 80, 81, 82], "gbq": 74, "administ": 74, "week": 74, "shown": 74, "50it": 74, "8ss": 74, "rdp": 74, "mr": 74, "brain": [74, 83], "phantom": [74, 81, 82], "mmr": 74, "550": [74, 76], "coron": [74, 81, 82, 83], "sagitt": [74, 82], "t1": 74, "contrast": 74, "concentr": [74, 75], "million": 74, "4it20ss": 74, "35": [74, 82], "80it": 74, "1ss": 74, "100it": 74, "api": [74, 75], "our": [75, 77, 78, 80, 81, 82], "choic": [75, 78], "anterior": 75, "inferior": 75, "superior": [75, 79], "counterclockwis": 75, "o": [75, 76, 77, 78, 79, 81, 82, 83], "primari": 75, "sinogram": 75, "impli": [75, 82], "90": [75, 78, 81, 82], "counterintuit": 75, "l_x": 75, "l_y": 75, "l_": 75, "l_r": 75, "transaxi": 75, "smaller": 75, "object_tensor": 75, "largest": 75, "smallest": 75, "anoth": [75, 82], "image_tensor": 75, "10th": 75, "unless": 75, "spcifi": 75, "symbol": 75, "f_j": 75, "paradigm": 75, "thu": [75, 82], "mostli": 75, "who": 75, "novel": 75, "howev": [75, 76], "everyon": 75, "know": [75, 78], "built": [75, 78, 82], "around": [75, 83], "fundament": 75, "b_i": 75, "a_j": 75, "discuss": 75, "128x128x128": 75, "64": [75, 76, 79, 80, 81, 82], "128x128": 75, "2097152": 75, "1048576": 75, "17": [75, 76, 78, 82], "6tb": 75, "harddriv": 75, "fortun": 75, "spars": 75, "effici": [75, 76], "practic": [75, 81, 82], "decompos": 75, "squar": [75, 82], "matric": [75, 77], "a_i": 75, "known": [75, 81], "phenomena": [75, 82], "peculiar": 75, "g_": 75, "specif": [75, 79], "therefor": 75, "lie": 75, "prod_i": 75, "written": [75, 76, 81, 82], "prod_": [75, 82], "a_1": 75, "a_2": 75, "travel": 75, "turn": 75, "b_1": 75, "b_2": 75, "unlik": 75, "fact": [75, 77, 78, 82], "predefin": 75, "realtiti": 75, "henc": [75, 77], "determinist": 75, "simplic": 75, "let": [75, 76, 77, 79, 80, 81, 82, 83], "hold": [75, 80], "begin": [75, 78], "ji": 75, "sim": 75, "seek": 75, "solut": 75, "densiti": 75, "prod_j": 75, "f_i": 75, "end": 75, "yield": [75, 80], "realiti": 75, "bar": 75, "e_": 75, "properli": [75, 78, 79], "understand": 75, "guess": 75, "doe": [75, 79, 80], "e_f": 75, "claim": 75, "g_j": 75, "_j": 75, "substitut": 75, "rewrit": 75, "vec": 75, "lh": 75, "box": 75, "converg": 75, "cost": 75, "small": 75, "previou": 75, "theta_0": 75, "theta_": 75, "theta_m": 75, "equiv": 75, "move": 75, "involv": [75, 79], "modififi": 75, "denomin": 75, "belief": 75, "adjac": 75, "radiopharmaceut": 75, "strength": 75, "temperatur": 75, "mechan": 75, "problem": 75, "approach": 75, "solv": 75, "osl": 75, "formal": 75, "bsr": 75, "alpha_n": [75, 82], "gain": 76, "access": [76, 81], "email": 76, "lukepolson": 76, "outlook": 76, "nibabel": [76, 77], "nib": [76, 77], "matplotlib": [76, 77, 78, 79, 80, 81, 82, 83], "pyplot": [76, 77, 78, 79, 80, 81, 82, 83], "plt": [76, 77, 78, 79, 80, 81, 82, 83], "disk1": [76, 77, 78, 79, 81, 82, 83], "pet_mri_scan": 76, "rai": 76, "slightli": [76, 77], "complic": [76, 80], "geomtric": 76, "everywher": 76, "thin": 76, "cell": [76, 83], "ran": 76, "long": [76, 80, 82], "part": 76, "macro_path": 76, "normalization_path": 76, "join": [76, 77, 78, 79, 81, 82, 83], "normalization_scan": 76, "mmr_norm_": 76, "37": 76, "9": [76, 77, 78, 79, 80, 81, 82, 83], "320": 76, "mmr_geometri": 76, "norm_factor_test": 76, "npy": [76, 77], "awhil": 76, "speed_of_light": 76, "fwhm_tof_resolut": 76, "scanner_diamet": 76, "348": 76, "num_tof_bin": 76, "125": 76, "linspac": [76, 80], "gate_simul": 76, "no_atten": 76, "19": [76, 78, 82], "faster": 76, "6": [76, 77, 78, 79, 80, 81, 82, 83], "128": [76, 77, 78, 79, 80, 81, 82], "96": [76, 79], "tof_bin_width": 76, "psf_transform": [76, 77, 78, 79, 80, 81, 82, 83], "14": [76, 77, 78, 80, 82], "15": [76, 78, 80, 81, 82], "recon_algorithm": [76, 82, 83], "28": 76, "16": [76, 78, 79, 82, 83], "And": [76, 77, 80, 82], "plot": [76, 77, 80, 81, 82], "fig": [76, 77, 80, 81], "ax": [76, 77, 80, 81], "subplot": [76, 77, 78, 79, 80, 81, 82], "figsiz": [76, 77, 78, 79, 80, 81, 82, 83], "131": 76, "pcolormesh": [76, 77, 78, 79, 80, 81, 82, 83], "48": 76, "cpu": [76, 77, 78, 79, 80, 81, 82, 83], "cmap": [76, 77, 78, 79, 80, 81, 82, 83], "magma": [76, 77, 78, 79, 81, 82, 83], "132": [76, 80], "133": 76, "tight_layout": [76, 77, 81], "show": [76, 78, 79, 80, 82, 83], "nifit": 76, "18": [76, 78, 82], "ey": [76, 77], "recon_nib": 76, "nifti1imag": [76, 77], "petgate_example_recon": 76, "nii": [76, 77], "offer": 77, "capabl": [77, 81], "advoc": 77, "goal": 77, "major": [77, 81], "vendor": [77, 78], "electr": [77, 83], "canon": 77, "positrigo": 77, "synchropet": 77, "strongli": 77, "emphas": 77, "progress": 77, "continu": 77, "evolut": 77, "hackathon": 77, "demonstr": 77, "caveat": 77, "yet": [77, 83], "formul": 77, "pytomography_tutorial_data": [77, 78, 79, 81, 82, 83], "petsird_tutori": 77, "petsird_path": 77, "miec_etsipetscanner_1": 77, "eta_path": 77, "44": [77, 82], "limit": [77, 79], "setup": 77, "proj_meta_nontof": 77, "proj_meta_tof": 77, "accompani": [77, 80], "home": 77, "gpuvmadm": 77, "notebook_test": 77, "etsipet_acmap_iec_10cmradiu": 77, "hv": 77, "third": [77, 78], "4mm": 77, "system_matrix_nontof": 77, "system_matrix_tof": 77, "Of": [77, 79, 83], "insid": [77, 81], "observ": 77, "record": 77, "likelihood_tof": 77, "likelihood_nontof": 77, "prior_rdp": [77, 82], "75": 77, "recon_algorithm_nontof": 77, "recon_algorithm_tof": 77, "100": [77, 79, 81, 82], "noisi": 77, "recon_tof": 77, "recon_nontof": 77, "13": [77, 78, 80, 81, 82], "vmax": [77, 78, 79, 80], "02": [77, 80], "slc": 77, "29": [77, 82], "121": [77, 78, 79, 80, 82], "titl": [77, 78, 80, 82], "122": [77, 78, 79, 80, 82], "nifti": 77, "recon_tof_nib": 77, "bsrem_nopsf_tof": 77, "recon_nontof_nib": 77, "bsrem_nopsf_nontof": 77, "orient": 77, "skew": 77, "dicom_tutori": 78, "path_ct": [78, 79, 83], "ct_file": 78, "listdir": [78, 79, 83], "projection_data": 78, "informaiton": 78, "isn": 78, "infom": 78, "180": 78, "height": 78, "compat": 78, "ai": 78, "figur": [78, 79, 80, 81, 82, 83], "nipy_spectr": [78, 81], "colorbar": [78, 80, 81, 82], "label": [78, 81, 82], "lt": [78, 80, 81], "0x7efb824b7a10": 78, "dicom_get_scattertew": 78, "peak": [78, 82], "easier": 78, "rescal": 78, "att_transform": [78, 79, 80, 81, 82, 83], "later": [78, 81, 83], "sample_slic": 78, "70": [78, 82], "greys_r": [78, 80], "0x7efb823fb010": 78, "uncom": 78, "208": [78, 79, 83], "03161992134409504": 78, "1248503046423388": 78, "proper": 78, "reconstruction_algorithm": [78, 79, 81], "reconstructed_object": [78, 81], "ds_recon": 78, "read_fil": [78, 79], "scanner_recon": 78, "recon_vendor": 78, "pixel_arrai": 78, "slice_pytomographi": 78, "slice_vendor": 78, "20": [78, 80, 81, 82, 83], "110": 78, "prevent": 78, "overwrit": 78, "itself": 78, "recon_ctslic": 78, "empti": 78, "comparison": 78, "objrct": 78, "osem_4it_10ss": 78, "export": 78, "viewer": 78, "thank": [79, 83], "peyman": [79, 83], "sheikhzadeh": [79, 83], "tehran": [79, 83], "univers": [79, 83], "scienc": [79, 83], "anonym": [79, 83], "lu": 79, "177": 79, "dicom_multibed_tutori": [79, 83], "bed1_project": 79, "bed2_project": [79, 83], "confirm": 79, "0054": 79, "0013": 79, "0014": 79, "39": [79, 83], "101": 79, "0015": 79, "124": 79, "0018": 79, "sh": 79, "lu177_em": 79, "187": 79, "228": 79, "229": 79, "63": 79, "251": 79, "sc4_sc": 79, "166": 79, "89": 79, "186": 79, "31": 79, "sc3_sc": 79, "32": 79, "134": 79, "68": 79, "sc2_sc": 79, "91": 79, "0_sc": 79, "examin": 79, "insur": 79, "wholebodi": 79, "projections1": 79, "projections2": 79, "attenuation_map1": 79, "attenuation_map2": 79, "221": 79, "222": 79, "223": 79, "224": 79, "unfamiliar": [79, 83], "introductori": 79, "reconstruct_singleb": 79, "unsqueez": [79, 80, 82, 83], "cutoff_transform": [79, 83], "recon_upp": 79, "recon_low": 79, "ui": 79, "adsab": 79, "harvard": 79, "edu": 79, "2017spie10133": 79, "21c": 79, "halfwai": 79, "best": 79, "job": [79, 80], "recon_stitch": 79, "cat": 79, "pytomo_recon": 79, "osem_4it_8ss": 79, "platform": 79, "rectangl": 80, "xv": 80, "yv": 80, "zv": 80, "object_truth": 80, "dim": 80, "0x7ff8e2ee8690": 80, "120": [80, 82], "angular": 80, "degre": [80, 82], "15cm": 80, "arang": 80, "len": 80, "ideal": [80, 82], "neglect": 80, "equival": 80, "perfect": 80, "unabl": 80, "system_matrix_radon": 80, "140kev": 80, "approx": 80, "140": 80, "system_matrix_spect": 80, "proj_radon": 80, "proj_spect": 80, "60": 80, "proj_idx": 80, "enumer": [80, 81], "25": 80, "set_titl": [80, 81], "set_ylabel": 80, "blurrier": 80, "filtered_back_project": 80, "object_predict": [80, 83], "object_radon_fbp_predict": 80, "object_spect_fbp_predict": 80, "central_slice_radon": 80, "central_slice_spect": 80, "seen": 80, "artifact": 80, "filtered_back_projection_ham": 80, "evalu": 81, "skimag": 81, "resiz": 81, "simind_tutori": [81, 82], "bkg": [81, 82], "l_lung": [81, 82], "r_lung": [81, 82], "l_kidnei": [81, 82], "r_kidnei": [81, 82], "salivari": [81, 82], "bladder": [81, 82], "2500": [81, 82], "450": [81, 82], "mbq": [81, 82], "activity_dict": 81, "zip": 81, "multi_project": [81, 82], "h00": [81, 82], "lowerscatt": [81, 82], "upperscatt": [81, 82], "did": 81, "384": [81, 82], "signifi": 81, "756": 81, "mask_idx_dict": 81, "dictionari": 81, "organ_vol_dict": 81, "ml": 81, "mask_vol_dict": 81, "gtfile": 81, "phantom_organ": 81, "_act_av": 81, "gt_shape": 81, "768": 81, "gt_space": 81, "075": 81, "gt_path": 81, "gti": 81, "fromfil": 81, "reshap": 81, "tranpos": 81, "astyp": 81, "prod": 81, "anti_alias": 81, "50": [81, 82], "quadmesh": 81, "0x7feea7bdead0": 81, "improv": 81, "mu208": [81, 82], "hct": [81, 82], "iteraton": 81, "comparetogroundtruth": 81, "avg_counts_per_ml": 81, "std_counts_per_ml": 81, "isnt": 81, "counts_per_ml": 81, "deviat": 81, "std": 81, "append": 81, "80": [81, 83], "inject": 81, "divid": [81, 82], "counts_to_mbq": 81, "visual": 81, "o1": 81, "0x7feea5951e50": 81, "plot_bvc": 81, "color": 81, "activity_mbq_per_ml": 81, "activity_noise_mbq_per_ml": 81, "true_activity_mbq_per_ml": 81, "activity_bias_pct": 81, "activity_noise_pct": 81, "marker": 81, "markers": 81, "lw": 81, "ravel": 81, "grid": 81, "tick_param": 81, "labels": 81, "minor": 81, "add_subplot": 81, "111": 81, "frameon": 81, "labelcolor": 81, "xlabel": 81, "fontsiz": 81, "ylabel": 81, "assess": 81, "__future__": 82, "annot": 82, "a00": 82, "photopeak_path": 82, "feed": 82, "upperscatter_path": 82, "lowerscatter_path": 82, "within": 82, "differenti": 82, "analog": 82, "realist": 82, "projections_r": 82, "p_": 82, "ww_peak": 82, "ww_lower": 82, "ww_upper": 82, "lower_scatt": 82, "upper_scatt": 82, "attenuation_path": 82, "sagit": 82, "270": 82, "141": 82, "142": 82, "143": 82, "144": 82, "maxim": 82, "With": 82, "focu": 82, "nth": 82, "mth": 82, "penal": 82, "h_t": 82, "recon_osem": [82, 83], "23": 82, "24": 82, "penalti": 82, "hyperparamet": 82, "34": 82, "weight_top8anatomi": 82, "prior_rdpap": 82, "recon_algorithm_osmaposl": 82, "recon_osmaposl": 82, "particularili": 82, "necessarili": 82, "misalign": 82, "36": 82, "funciton": 82, "omega_m": 82, "relax": 82, "21": 82, "recon_algorithm_bsrem": 82, "recon_bsrem": 82, "givenbi": 82, "k_": 82, "s_v": 82, "k_v": 82, "k_x": 82, "005": 82, "ram": 82, "portion": 82, "put": 82, "longer": 82, "3x": 82, "43": 82, "system_matrix_kem": 82, "45": 82, "likelihood_kem": 82, "46": 82, "recon_algorithm_kem": 82, "recon_kem": 82, "47": 82, "rt_util": 83, "rtstructbuild": 83, "explan": 83, "introduct": [83, 84], "ve": 83, "haven": 83, "voi": 83, "suppos": 83, "kidnei": 83, "segment": 83, "create_from": 83, "rt_struct_path": 83, "get_roi_nam": 83, "spleen": 83, "kidney_right": 83, "kidney_left": 83, "gallbladd": 83, "stomach": 83, "pancrea": 83, "adrenal_gland_right": 83, "adrenal_gland_left": 83, "lung_upper_lobe_left": 83, "lung_lower_lobe_left": 83, "lung_upper_lobe_right": 83, "lung_middle_lobe_right": 83, "lung_lower_lobe_right": 83, "esophagu": 83, "trachea": 83, "thyroid_gland": 83, "small_bowel": 83, "duodenum": 83, "urinary_bladd": 83, "sacrum": 83, "vertebrae_s1": 83, "vertebrae_l5": 83, "vertebrae_l4": 83, "vertebrae_l3": 83, "vertebrae_l2": 83, "vertebrae_l1": 83, "vertebrae_t12": 83, "vertebrae_t11": 83, "vertebrae_t10": 83, "vertebrae_t9": 83, "vertebrae_t8": 83, "vertebrae_t7": 83, "vertebrae_t6": 83, "vertebrae_t5": 83, "vertebrae_t4": 83, "vertebrae_t3": 83, "vertebrae_t2": 83, "vertebrae_t1": 83, "vertebrae_c7": 83, "vertebrae_c6": 83, "vertebrae_c5": 83, "vertebrae_c4": 83, "vertebrae_c3": 83, "vertebrae_c2": 83, "vertebrae_c1": 83, "heart": 83, "aorta": 83, "pulmonary_vein": 83, "brachiocephalic_trunk": 83, "subclavian_artery_right": 83, "subclavian_artery_left": 83, "common_carotid_artery_right": 83, "common_carotid_artery_left": 83, "brachiocephalic_vein_left": 83, "brachiocephalic_vein_right": 83, "atrial_appendage_left": 83, "superior_vena_cava": 83, "inferior_vena_cava": 83, "portal_vein_and_splenic_vein": 83, "iliac_artery_left": 83, "iliac_artery_right": 83, "iliac_vena_left": 83, "iliac_vena_right": 83, "humerus_left": 83, "humerus_right": 83, "scapula_left": 83, "scapula_right": 83, "clavicula_left": 83, "clavicula_right": 83, "femur_right": 83, "hip_left": 83, "hip_right": 83, "spinal_cord": 83, "gluteus_maximus_left": 83, "gluteus_maximus_right": 83, "gluteus_medius_left": 83, "gluteus_medius_right": 83, "gluteus_minimus_left": 83, "gluteus_minimus_right": 83, "autochthon_left": 83, "autochthon_right": 83, "iliopsoas_left": 83, "iliopsoas_right": 83, "skull": 83, "rib_right_4": 83, "rib_right_3": 83, "rib_left_1": 83, "rib_left_2": 83, "rib_left_3": 83, "rib_left_4": 83, "rib_left_5": 83, "rib_left_6": 83, "rib_left_7": 83, "rib_left_8": 83, "rib_left_9": 83, "rib_left_10": 83, "rib_left_11": 83, "rib_left_12": 83, "rib_right_1": 83, "rib_right_2": 83, "rib_right_5": 83, "rib_right_6": 83, "rib_right_7": 83, "rib_right_8": 83, "rib_right_9": 83, "rib_right_10": 83, "rib_right_11": 83, "rib_right_12": 83, "sternum": 83, "costal_cartilag": 83, "mask_nam": 83, "kidney_mask": 83, "uncertainty_ab": 83, "uncertainty_pct": 83, "2f": 83, "98": 83, "repeat": 83, "plai": 83, "even": 83}, "objects": {"": [[9, 0, 0, "-", "pytomography"]], "pytomography": [[9, 1, 1, "", "__version__"], [3, 0, 0, "-", "algorithms"], [7, 0, 0, "-", "callbacks"], [9, 1, 1, "", "delta"], [9, 1, 1, "", "device"], [9, 1, 1, "", "dtype"], [28, 0, 0, "-", "io"], [33, 0, 0, "-", "likelihoods"], [41, 0, 0, "-", "metadata"], [43, 0, 0, "-", "priors"], [50, 0, 0, "-", "projectors"], [9, 4, 1, "", "set_device"], [9, 4, 1, "", "set_dtype"], [9, 4, 1, "", "set_verbose"], [59, 0, 0, "-", "transforms"], [67, 0, 0, "-", "utils"], [9, 1, 1, "", "verbose"]], "pytomography.algorithms": [[3, 2, 1, "", "BSREM"], [3, 2, 1, "", "DIPRecon"], [3, 2, 1, "", "FilteredBackProjection"], [3, 2, 1, "", "KEM"], [3, 2, 1, "", "OSEM"], [3, 2, 1, "", "OSMAPOSL"], [3, 2, 1, "", "PreconditionedGradientAscentAlgorithm"], [1, 0, 0, "-", "dip_recon"], [2, 0, 0, "-", "fbp"], [4, 0, 0, "-", "preconditioned_gradient_ascent"]], "pytomography.algorithms.BSREM": [[3, 3, 1, "", "_linear_preconditioner_factor"]], "pytomography.algorithms.DIPRecon": [[3, 3, 1, "", "__call__"], [3, 3, 1, "", "_compute_callback"]], "pytomography.algorithms.FilteredBackProjection": [[3, 3, 1, "", "__call__"]], "pytomography.algorithms.KEM": [[3, 3, 1, "", "__call__"], [3, 3, 1, "", "_compute_callback"]], "pytomography.algorithms.OSEM": [[3, 3, 1, "", "_linear_preconditioner_factor"]], "pytomography.algorithms.OSMAPOSL": [[3, 3, 1, "", "_compute_preconditioner"]], "pytomography.algorithms.PreconditionedGradientAscentAlgorithm": [[3, 3, 1, "", "__call__"], [3, 3, 1, "", "_compute_callback"], [3, 3, 1, "", "_compute_preconditioner"], [3, 3, 1, "", "_set_n_subsets"]], "pytomography.algorithms.dip_recon": [[1, 2, 1, "", "DIPRecon"]], "pytomography.algorithms.dip_recon.DIPRecon": [[1, 3, 1, "", "__call__"], [1, 3, 1, "", "_compute_callback"]], "pytomography.algorithms.fbp": [[2, 2, 1, "", "FilteredBackProjection"]], "pytomography.algorithms.fbp.FilteredBackProjection": [[2, 3, 1, "", "__call__"]], "pytomography.algorithms.preconditioned_gradient_ascent": [[4, 2, 1, "", "BSREM"], [4, 2, 1, "", "KEM"], [4, 2, 1, "", "LinearPreconditionedGradientAscentAlgorithm"], [4, 2, 1, "", "OSEM"], [4, 2, 1, "", "OSMAPOSL"], [4, 2, 1, "", "PreconditionedGradientAscentAlgorithm"]], "pytomography.algorithms.preconditioned_gradient_ascent.BSREM": [[4, 3, 1, "", "_linear_preconditioner_factor"]], "pytomography.algorithms.preconditioned_gradient_ascent.KEM": [[4, 3, 1, "", "__call__"], [4, 3, 1, "", "_compute_callback"]], "pytomography.algorithms.preconditioned_gradient_ascent.LinearPreconditionedGradientAscentAlgorithm": [[4, 3, 1, "", "_compute_preconditioner"], [4, 3, 1, "", "_compute_uncertainty_matrix"], [4, 3, 1, "", "_linear_preconditioner_factor"], [4, 3, 1, "", "compute_uncertainty"]], "pytomography.algorithms.preconditioned_gradient_ascent.OSEM": [[4, 3, 1, "", "_linear_preconditioner_factor"]], "pytomography.algorithms.preconditioned_gradient_ascent.OSMAPOSL": [[4, 3, 1, "", "_compute_preconditioner"]], "pytomography.algorithms.preconditioned_gradient_ascent.PreconditionedGradientAscentAlgorithm": [[4, 3, 1, "", "__call__"], [4, 3, 1, "", "_compute_callback"], [4, 3, 1, "", "_compute_preconditioner"], [4, 3, 1, "", "_set_n_subsets"]], "pytomography.callbacks": [[7, 2, 1, "", "Callback"], [7, 2, 1, "", "DataStorageCallback"], [7, 2, 1, "", "LogLikelihoodCallback"], [5, 0, 0, "-", "callback"], [6, 0, 0, "-", "data_saving"], [8, 0, 0, "-", "likelihood"]], "pytomography.callbacks.Callback": [[7, 3, 1, "", "finalize"], [7, 3, 1, "", "run"]], "pytomography.callbacks.DataStorageCallback": [[7, 3, 1, "", "finalize"], [7, 3, 1, "", "run"]], "pytomography.callbacks.LogLikelihoodCallback": [[7, 3, 1, "", "run"]], "pytomography.callbacks.callback": [[5, 2, 1, "", "Callback"]], "pytomography.callbacks.callback.Callback": [[5, 3, 1, "", "finalize"], [5, 3, 1, "", "run"]], "pytomography.callbacks.data_saving": [[6, 2, 1, "", "DataStorageCallback"]], "pytomography.callbacks.data_saving.DataStorageCallback": [[6, 3, 1, "", "finalize"], [6, 3, 1, "", "run"]], "pytomography.callbacks.likelihood": [[8, 2, 1, "", "LogLikelihoodCallback"]], "pytomography.callbacks.likelihood.LogLikelihoodCallback": [[8, 3, 1, "", "run"]], "pytomography.io": [[11, 0, 0, "-", "CT"], [13, 0, 0, "-", "PET"], [25, 0, 0, "-", "SPECT"], [31, 0, 0, "-", "shared"]], "pytomography.io.CT": [[10, 0, 0, "-", "attenuation_map"], [11, 4, 1, "", "get_HU2mu_conversion"]], "pytomography.io.CT.attenuation_map": [[10, 1, 1, "", "DATADIR"], [10, 1, 1, "", "FILE_AIR"], [10, 1, 1, "", "FILE_CBONE"], [10, 1, 1, "", "FILE_WATER"], [10, 4, 1, "", "HU_to_mu"], [10, 4, 1, "", "bilinear_transform"], [10, 4, 1, "", "get_ECT_from_corticalbone_HU"], [10, 4, 1, "", "get_HU2mu_conversion"], [10, 4, 1, "", "get_HU_corticalbone"], [10, 4, 1, "", "get_HU_from_spectrum_interp"], [10, 4, 1, "", "get_HU_mu_curve"], [10, 1, 1, "", "module_path"]], "pytomography.io.PET": [[12, 0, 0, "-", "gate"], [14, 0, 0, "-", "petsird"], [19, 0, 0, "-", "prd"]], "pytomography.io.PET.gate": [[12, 4, 1, "", "get_N_components"], [12, 4, 1, "", "get_aligned_attenuation_map"], [12, 4, 1, "", "get_detector_ids"], [12, 4, 1, "", "get_eta_cylinder_calibration"], [12, 4, 1, "", "get_radius"], [12, 4, 1, "", "get_scanner_LUT"], [12, 4, 1, "", "get_table"], [12, 4, 1, "", "remove_events_out_of_bounds"]], "pytomography.io.PET.petsird": [[14, 4, 1, "", "get_TOF_meta_from_header"], [14, 4, 1, "", "get_detector_ids"], [14, 4, 1, "", "get_scanner_LUT_from_header"]], "pytomography.io.PET.prd": [[19, 2, 1, "", "BinaryPrdExperimentReader"], [19, 2, 1, "", "BinaryPrdExperimentWriter"], [19, 2, 1, "", "CoincidenceEvent"], [19, 1, 1, "", "ComplexDouble"], [19, 1, 1, "", "ComplexFloat"], [19, 2, 1, "", "DateTime"], [19, 2, 1, "", "Detector"], [19, 2, 1, "", "ExamInformation"], [19, 1, 1, "", "Float32"], [19, 1, 1, "", "Float64"], [19, 2, 1, "", "Header"], [19, 2, 1, "", "Institution"], [19, 1, 1, "", "Int16"], [19, 1, 1, "", "Int32"], [19, 1, 1, "", "Int64"], [19, 1, 1, "", "Int8"], [19, 2, 1, "", "NDJsonPrdExperimentReader"], [19, 2, 1, "", "NDJsonPrdExperimentWriter"], [19, 2, 1, "", "OutOfRangeEnum"], [19, 2, 1, "", "PrdExperimentReaderBase"], [19, 2, 1, "", "PrdExperimentWriterBase"], [19, 7, 1, "", "ProtocolError"], [19, 2, 1, "", "ScannerInformation"], [19, 1, 1, "", "Size"], [19, 2, 1, "", "Subject"], [19, 2, 1, "", "Time"], [19, 2, 1, "", "TimeBlock"], [19, 2, 1, "", "TimeFrameInformation"], [19, 2, 1, "", "TimeInterval"], [19, 1, 1, "", "UInt16"], [19, 1, 1, "", "UInt32"], [19, 1, 1, "", "UInt64"], [19, 1, 1, "", "UInt8"], [19, 2, 1, "", "UnionCase"], [19, 1, 1, "", "_MIN_NUMPY_VERSION"], [19, 1, 1, "", "_T"], [15, 0, 0, "-", "_binary"], [16, 0, 0, "-", "_dtypes"], [17, 0, 0, "-", "_ndjson"], [19, 4, 1, "", "_parse_version"], [18, 0, 0, "-", "binary"], [19, 1, 1, "", "get_dtype"], [20, 0, 0, "-", "ndjson"], [21, 0, 0, "-", "protocols"], [19, 4, 1, "", "structural_equal"], [22, 0, 0, "-", "types"], [23, 0, 0, "-", "yardl_types"]], "pytomography.io.PET.prd.BinaryPrdExperimentReader": [[19, 3, 1, "", "_read_header"], [19, 3, 1, "", "_read_time_blocks"]], "pytomography.io.PET.prd.BinaryPrdExperimentWriter": [[19, 3, 1, "", "_write_header"], [19, 3, 1, "", "_write_time_blocks"]], "pytomography.io.PET.prd.CoincidenceEvent": [[19, 3, 1, "", "__eq__"], [19, 3, 1, "", "__repr__"], [19, 3, 1, "", "__str__"], [19, 5, 1, "", "detector_1_id"], [19, 5, 1, "", "detector_2_id"], [19, 5, 1, "", "energy_1_idx"], [19, 5, 1, "", "energy_2_idx"], [19, 5, 1, "", "tof_idx"]], "pytomography.io.PET.prd.DateTime": [[19, 3, 1, "", "__eq__"], [19, 3, 1, "", "__hash__"], [19, 3, 1, "", "__repr__"], [19, 3, 1, "", "__str__"], [19, 3, 1, "", "from_components"], [19, 3, 1, "", "from_datetime"], [19, 3, 1, "", "now"], [19, 6, 1, "", "numpy_value"], [19, 3, 1, "", "parse"], [19, 3, 1, "", "to_datetime"]], "pytomography.io.PET.prd.Detector": [[19, 3, 1, "", "__eq__"], [19, 3, 1, "", "__repr__"], [19, 3, 1, "", "__str__"], [19, 5, 1, "", "id"], [19, 5, 1, "", "x"], [19, 5, 1, "", "y"], [19, 5, 1, "", "z"]], "pytomography.io.PET.prd.ExamInformation": [[19, 3, 1, "", "__eq__"], [19, 3, 1, "", "__repr__"], [19, 3, 1, "", "__str__"], [19, 5, 1, "", "institution"], [19, 5, 1, "", "protocol"], [19, 5, 1, "", "start_of_acquisition"], [19, 5, 1, "", "subject"]], "pytomography.io.PET.prd.Header": [[19, 3, 1, "", "__eq__"], [19, 3, 1, "", "__repr__"], [19, 3, 1, "", "__str__"], [19, 5, 1, "", "exam"], [19, 5, 1, "", "scanner"]], "pytomography.io.PET.prd.Institution": [[19, 3, 1, "", "__eq__"], [19, 3, 1, "", "__repr__"], [19, 3, 1, "", "__str__"], [19, 5, 1, "", "address"], [19, 5, 1, "", "name"]], "pytomography.io.PET.prd.NDJsonPrdExperimentReader": [[19, 3, 1, "", "_read_header"], [19, 3, 1, "", "_read_time_blocks"]], "pytomography.io.PET.prd.NDJsonPrdExperimentWriter": [[19, 3, 1, "", "_write_header"], [19, 3, 1, "", "_write_time_blocks"]], "pytomography.io.PET.prd.OutOfRangeEnum": [[19, 3, 1, "", "__eq__"], [19, 3, 1, "", "__hash__"], [19, 3, 1, "", "__repr__"], [19, 3, 1, "", "__str__"], [19, 3, 1, "", "_missing_"]], "pytomography.io.PET.prd.PrdExperimentReaderBase": [[19, 5, 1, "", "T"], [19, 3, 1, "", "__enter__"], [19, 3, 1, "", "__exit__"], [19, 3, 1, "", "_raise_unexpected_state"], [19, 3, 1, "", "_read_header"], [19, 3, 1, "", "_read_time_blocks"], [19, 3, 1, "", "_state_to_method_name"], [19, 3, 1, "", "_wrap_iterable"], [19, 3, 1, "", "close"], [19, 3, 1, "", "copy_to"], [19, 3, 1, "", "read_header"], [19, 3, 1, "", "read_time_blocks"], [19, 5, 1, "", "schema"]], "pytomography.io.PET.prd.PrdExperimentWriterBase": [[19, 3, 1, "", "__enter__"], [19, 3, 1, "", "__exit__"], [19, 3, 1, "", "_end_stream"], [19, 3, 1, "", "_raise_unexpected_state"], [19, 3, 1, "", "_state_to_method_name"], [19, 3, 1, "", "_write_header"], [19, 3, 1, "", "_write_time_blocks"], [19, 3, 1, "", "close"], [19, 5, 1, "", "schema"], [19, 3, 1, "", "write_header"], [19, 3, 1, "", "write_time_blocks"]], "pytomography.io.PET.prd.ScannerInformation": [[19, 3, 1, "", "__eq__"], [19, 3, 1, "", "__repr__"], [19, 3, 1, "", "__str__"], [19, 5, 1, "", "detectors"], [19, 5, 1, "", "energy_bin_edges"], [19, 5, 1, "", "energy_resolution_at_511"], [19, 5, 1, "", "listmode_time_block_duration"], [19, 5, 1, "", "model_name"], [19, 3, 1, "", "number_of_detectors"], [19, 3, 1, "", "number_of_energy_bins"], [19, 3, 1, "", "number_of_tof_bins"], [19, 5, 1, "", "tof_bin_edges"], [19, 5, 1, "", "tof_resolution"]], "pytomography.io.PET.prd.Subject": [[19, 3, 1, "", "__eq__"], [19, 3, 1, "", "__repr__"], [19, 3, 1, "", "__str__"], [19, 5, 1, "", "id"], [19, 5, 1, "", "name"]], "pytomography.io.PET.prd.Time": [[19, 5, 1, "", "_NANOSECONDS_PER_DAY"], [19, 3, 1, "", "__eq__"], [19, 3, 1, "", "__repr__"], [19, 3, 1, "", "__str__"], [19, 3, 1, "", "from_components"], [19, 3, 1, "", "from_time"], [19, 6, 1, "", "numpy_value"], [19, 3, 1, "", "parse"]], "pytomography.io.PET.prd.TimeBlock": [[19, 3, 1, "", "__eq__"], [19, 3, 1, "", "__repr__"], [19, 3, 1, "", "__str__"], [19, 5, 1, "", "delayed_events"], [19, 5, 1, "", "id"], [19, 5, 1, "", "prompt_events"]], "pytomography.io.PET.prd.TimeFrameInformation": [[19, 3, 1, "", "__eq__"], [19, 3, 1, "", "__repr__"], [19, 3, 1, "", "__str__"], [19, 3, 1, "", "number_of_time_frames"], [19, 5, 1, "", "time_frames"]], "pytomography.io.PET.prd.TimeInterval": [[19, 3, 1, "", "__eq__"], [19, 3, 1, "", "__repr__"], [19, 3, 1, "", "__str__"], [19, 5, 1, "", "start"], [19, 5, 1, "", "stop"]], "pytomography.io.PET.prd.UnionCase": [[19, 3, 1, "", "__eq__"], [19, 3, 1, "", "__repr__"], [19, 3, 1, "", "__str__"], [19, 5, 1, "", "index"], [19, 5, 1, "", "tag"]], "pytomography.io.PET.prd._binary": [[15, 2, 1, "", "BinaryProtocolReader"], [15, 2, 1, "", "BinaryProtocolWriter"], [15, 2, 1, "", "BoolSerializer"], [15, 1, 1, "", "CURRENT_BINARY_FORMAT_VERSION"], [15, 2, 1, "", "CodedInputStream"], [15, 2, 1, "", "CodedOutputStream"], [15, 2, 1, "", "Complex32Serializer"], [15, 2, 1, "", "Complex64Serializer"], [15, 1, 1, "", "DATETIME_DAYS_DTYPE"], [15, 1, 1, "", "DATETIME_NANOSECONDS_DTYPE"], [15, 2, 1, "", "DateSerializer"], [15, 2, 1, "", "DateTimeSerializer"], [15, 2, 1, "", "DynamicNDArraySerializer"], [15, 1, 1, "", "EPOCH_DATETIME"], [15, 1, 1, "", "EPOCH_ORDINAL_DAYS"], [15, 2, 1, "", "EnumSerializer"], [15, 2, 1, "", "FixedNDArraySerializer"], [15, 2, 1, "", "FixedVectorSerializer"], [15, 2, 1, "", "Float32Serializer"], [15, 2, 1, "", "Float64Serializer"], [15, 1, 1, "", "INT16_MAX"], [15, 1, 1, "", "INT16_MIN"], [15, 1, 1, "", "INT32_MAX"], [15, 1, 1, "", "INT32_MIN"], [15, 1, 1, "", "INT64_MAX"], [15, 1, 1, "", "INT64_MIN"], [15, 1, 1, "", "INT8_MAX"], [15, 1, 1, "", "INT8_MIN"], [15, 2, 1, "", "Int16Serializer"], [15, 2, 1, "", "Int32Serializer"], [15, 2, 1, "", "Int64Serializer"], [15, 2, 1, "", "Int8Serializer"], [15, 1, 1, "", "MAGIC_BYTES"], [15, 2, 1, "", "MapSerializer"], [15, 2, 1, "", "NDArraySerializer"], [15, 2, 1, "", "NDArraySerializerBase"], [15, 2, 1, "", "NoneSerializer"], [15, 2, 1, "", "OptionalSerializer"], [15, 2, 1, "", "RecordSerializer"], [15, 2, 1, "", "SizeSerializer"], [15, 2, 1, "", "StreamSerializer"], [15, 2, 1, "", "StringSerializer"], [15, 2, 1, "", "StructSerializer"], [15, 1, 1, "", "T"], [15, 1, 1, "", "TEnum"], [15, 1, 1, "", "TIMEDELTA_NANOSECONDS_DTYPE"], [15, 1, 1, "", "TKey"], [15, 1, 1, "", "TKey_NP"], [15, 1, 1, "", "TValue"], [15, 1, 1, "", "TValue_NP"], [15, 1, 1, "", "T_NP"], [15, 2, 1, "", "TimeSerializer"], [15, 2, 1, "", "TypeSerializer"], [15, 1, 1, "", "UINT16_MAX"], [15, 1, 1, "", "UINT32_MAX"], [15, 1, 1, "", "UINT64_MAX"], [15, 1, 1, "", "UINT8_MAX"], [15, 2, 1, "", "UInt16Serializer"], [15, 2, 1, "", "UInt32Serializer"], [15, 2, 1, "", "UInt64Serializer"], [15, 2, 1, "", "UInt8Serializer"], [15, 2, 1, "", "UnionCaseProtocol"], [15, 2, 1, "", "UnionSerializer"], [15, 2, 1, "", "VectorSerializer"], [15, 1, 1, "", "bool_serializer"], [15, 1, 1, "", "complexfloat32_serializer"], [15, 1, 1, "", "complexfloat64_serializer"], [15, 1, 1, "", "date_serializer"], [15, 1, 1, "", "datetime_serializer"], [15, 1, 1, "", "float32_serializer"], [15, 1, 1, "", "float64_serializer"], [15, 1, 1, "", "int16_serializer"], [15, 1, 1, "", "int32_serializer"], [15, 1, 1, "", "int32_struct"], [15, 1, 1, "", "int64_serializer"], [15, 1, 1, "", "int8_serializer"], [15, 1, 1, "", "none_serializer"], [15, 4, 1, "", "read_fixed_int32"], [15, 1, 1, "", "size_serializer"], [15, 1, 1, "", "string_serializer"], [15, 1, 1, "", "time_serializer"], [15, 1, 1, "", "uint16_serializer"], [15, 1, 1, "", "uint32_serializer"], [15, 1, 1, "", "uint64_serializer"], [15, 1, 1, "", "uint8_serializer"], [15, 4, 1, "", "write_fixed_int32"]], "pytomography.io.PET.prd._binary.BinaryProtocolReader": [[15, 3, 1, "", "close"]], "pytomography.io.PET.prd._binary.BinaryProtocolWriter": [[15, 3, 1, "", "_end_stream"], [15, 3, 1, "", "close"]], "pytomography.io.PET.prd._binary.BoolSerializer": [[15, 3, 1, "", "read"], [15, 3, 1, "", "read_numpy"]], "pytomography.io.PET.prd._binary.CodedInputStream": [[15, 3, 1, "", "_fill_buffer"], [15, 3, 1, "", "close"], [15, 3, 1, "", "read"], [15, 3, 1, "", "read_byte"], [15, 3, 1, "", "read_bytearray"], [15, 3, 1, "", "read_signed_varint"], [15, 3, 1, "", "read_unsigned_varint"], [15, 3, 1, "", "read_view"], [15, 3, 1, "", "zigzag_decode"]], "pytomography.io.PET.prd._binary.CodedOutputStream": [[15, 3, 1, "", "close"], [15, 3, 1, "", "ensure_capacity"], [15, 3, 1, "", "flush"], [15, 3, 1, "", "write"], [15, 3, 1, "", "write_byte_no_check"], [15, 3, 1, "", "write_bytes"], [15, 3, 1, "", "write_bytes_directly"], [15, 3, 1, "", "write_signed_varint"], [15, 3, 1, "", "write_unsigned_varint"], [15, 3, 1, "", "zigzag_encode"]], "pytomography.io.PET.prd._binary.Complex32Serializer": [[15, 3, 1, "", "is_trivially_serializable"], [15, 3, 1, "", "read"], [15, 3, 1, "", "read_numpy"], [15, 3, 1, "", "write"]], "pytomography.io.PET.prd._binary.Complex64Serializer": [[15, 3, 1, "", "is_trivially_serializable"], [15, 3, 1, "", "read"], [15, 3, 1, "", "read_numpy"], [15, 3, 1, "", "write"]], "pytomography.io.PET.prd._binary.DateSerializer": [[15, 3, 1, "", "read"], [15, 3, 1, "", "read_numpy"], [15, 3, 1, "", "write"], [15, 3, 1, "", "write_numpy"]], "pytomography.io.PET.prd._binary.DateTimeSerializer": [[15, 3, 1, "", "read"], [15, 3, 1, "", "read_numpy"], [15, 3, 1, "", "write"], [15, 3, 1, "", "write_numpy"]], "pytomography.io.PET.prd._binary.DynamicNDArraySerializer": [[15, 3, 1, "", "read"], [15, 3, 1, "", "read_numpy"], [15, 3, 1, "", "write"], [15, 3, 1, "", "write_numpy"]], "pytomography.io.PET.prd._binary.EnumSerializer": [[15, 3, 1, "", "is_trivially_serializable"], [15, 3, 1, "", "read"], [15, 3, 1, "", "read_numpy"], [15, 3, 1, "", "write"], [15, 3, 1, "", "write_numpy"]], "pytomography.io.PET.prd._binary.FixedNDArraySerializer": [[15, 3, 1, "", "is_trivially_serializable"], [15, 3, 1, "", "read"], [15, 3, 1, "", "read_numpy"], [15, 3, 1, "", "write"], [15, 3, 1, "", "write_numpy"]], "pytomography.io.PET.prd._binary.FixedVectorSerializer": [[15, 3, 1, "", "is_trivially_serializable"], [15, 3, 1, "", "read"], [15, 3, 1, "", "read_numpy"], [15, 3, 1, "", "write"], [15, 3, 1, "", "write_numpy"]], "pytomography.io.PET.prd._binary.Float32Serializer": [[15, 3, 1, "", "is_trivially_serializable"], [15, 3, 1, "", "read"]], "pytomography.io.PET.prd._binary.Float64Serializer": [[15, 3, 1, "", "is_trivially_serializable"], [15, 3, 1, "", "read"]], "pytomography.io.PET.prd._binary.Int16Serializer": [[15, 3, 1, "", "read"], [15, 3, 1, "", "read_numpy"], [15, 3, 1, "", "write"], [15, 3, 1, "", "write_numpy"]], "pytomography.io.PET.prd._binary.Int32Serializer": [[15, 3, 1, "", "read"], [15, 3, 1, "", "read_numpy"], [15, 3, 1, "", "write"], [15, 3, 1, "", "write_numpy"]], "pytomography.io.PET.prd._binary.Int64Serializer": [[15, 3, 1, "", "read"], [15, 3, 1, "", "read_numpy"], [15, 3, 1, "", "write"], [15, 3, 1, "", "write_numpy"]], "pytomography.io.PET.prd._binary.Int8Serializer": [[15, 3, 1, "", "is_trivially_serializable"], [15, 3, 1, "", "read"]], "pytomography.io.PET.prd._binary.MapSerializer": [[15, 3, 1, "", "read"], [15, 3, 1, "", "read_numpy"], [15, 3, 1, "", "write"], [15, 3, 1, "", "write_numpy"]], "pytomography.io.PET.prd._binary.NDArraySerializer": [[15, 3, 1, "", "read"], [15, 3, 1, "", "read_numpy"], [15, 3, 1, "", "write"], [15, 3, 1, "", "write_numpy"]], "pytomography.io.PET.prd._binary.NDArraySerializerBase": [[15, 3, 1, "", "_get_dtype_and_subarray_shape"], [15, 3, 1, "", "_is_current_array_trivially_serializable"], [15, 3, 1, "", "_read_data"], [15, 3, 1, "", "_write_data"]], "pytomography.io.PET.prd._binary.NoneSerializer": [[15, 3, 1, "", "read"], [15, 3, 1, "", "read_numpy"], [15, 3, 1, "", "write"], [15, 3, 1, "", "write_numpy"]], "pytomography.io.PET.prd._binary.OptionalSerializer": [[15, 3, 1, "", "is_trivially_serializable"], [15, 3, 1, "", "read"], [15, 3, 1, "", "read_numpy"], [15, 3, 1, "", "write"], [15, 3, 1, "", "write_numpy"]], "pytomography.io.PET.prd._binary.RecordSerializer": [[15, 3, 1, "", "_read"], [15, 3, 1, "", "_write"], [15, 3, 1, "", "is_trivially_serializable"], [15, 3, 1, "", "read_numpy"]], "pytomography.io.PET.prd._binary.SizeSerializer": [[15, 3, 1, "", "read"], [15, 3, 1, "", "read_numpy"], [15, 3, 1, "", "write"], [15, 3, 1, "", "write_numpy"]], "pytomography.io.PET.prd._binary.StreamSerializer": [[15, 3, 1, "", "read"], [15, 3, 1, "", "read_numpy"], [15, 3, 1, "", "write"], [15, 3, 1, "", "write_numpy"]], "pytomography.io.PET.prd._binary.StringSerializer": [[15, 3, 1, "", "read"], [15, 3, 1, "", "read_numpy"], [15, 3, 1, "", "write"], [15, 3, 1, "", "write_numpy"]], "pytomography.io.PET.prd._binary.StructSerializer": [[15, 3, 1, "", "read"], [15, 3, 1, "", "read_numpy"], [15, 3, 1, "", "struct_format_str"], [15, 3, 1, "", "write"], [15, 3, 1, "", "write_numpy"]], "pytomography.io.PET.prd._binary.TimeSerializer": [[15, 3, 1, "", "read"], [15, 3, 1, "", "read_numpy"], [15, 3, 1, "", "write"], [15, 3, 1, "", "write_numpy"]], "pytomography.io.PET.prd._binary.TypeSerializer": [[15, 3, 1, "", "is_trivially_serializable"], [15, 3, 1, "", "overall_dtype"], [15, 3, 1, "", "read"], [15, 3, 1, "", "read_numpy"], [15, 3, 1, "", "struct_format_str"], [15, 3, 1, "", "write"], [15, 3, 1, "", "write_numpy"]], "pytomography.io.PET.prd._binary.UInt16Serializer": [[15, 3, 1, "", "read"], [15, 3, 1, "", "read_numpy"], [15, 3, 1, "", "write"], [15, 3, 1, "", "write_numpy"]], "pytomography.io.PET.prd._binary.UInt32Serializer": [[15, 3, 1, "", "read"], [15, 3, 1, "", "read_numpy"], [15, 3, 1, "", "write"], [15, 3, 1, "", "write_numpy"]], "pytomography.io.PET.prd._binary.UInt64Serializer": [[15, 3, 1, "", "read"], [15, 3, 1, "", "read_numpy"], [15, 3, 1, "", "write"], [15, 3, 1, "", "write_numpy"]], "pytomography.io.PET.prd._binary.UInt8Serializer": [[15, 3, 1, "", "is_trivially_serializable"], [15, 3, 1, "", "read"]], "pytomography.io.PET.prd._binary.UnionCaseProtocol": [[15, 5, 1, "", "index"], [15, 5, 1, "", "value"]], "pytomography.io.PET.prd._binary.UnionSerializer": [[15, 3, 1, "", "read"], [15, 3, 1, "", "read_numpy"], [15, 3, 1, "", "write"], [15, 3, 1, "", "write_numpy"]], "pytomography.io.PET.prd._binary.VectorSerializer": [[15, 3, 1, "", "read"], [15, 3, 1, "", "read_numpy"], [15, 3, 1, "", "write"], [15, 3, 1, "", "write_numpy"]], "pytomography.io.PET.prd._dtypes": [[16, 4, 1, "", "make_get_dtype_func"]], "pytomography.io.PET.prd._ndjson": [[17, 2, 1, "", "BoolConverter"], [17, 1, 1, "", "CURRENT_NDJSON_FORMAT_VERSION"], [17, 2, 1, "", "Complex32Converter"], [17, 2, 1, "", "Complex64Converter"], [17, 2, 1, "", "DateConverter"], [17, 2, 1, "", "DateTimeConverter"], [17, 2, 1, "", "DynamicNDArrayConverter"], [17, 2, 1, "", "EnumConverter"], [17, 2, 1, "", "FixedNDArrayConverter"], [17, 2, 1, "", "FixedVectorConverter"], [17, 2, 1, "", "FlagsConverter"], [17, 2, 1, "", "Float32Converter"], [17, 2, 1, "", "Float64Converter"], [17, 1, 1, "", "INT16_MAX"], [17, 1, 1, "", "INT16_MIN"], [17, 1, 1, "", "INT32_MAX"], [17, 1, 1, "", "INT32_MIN"], [17, 1, 1, "", "INT64_MAX"], [17, 1, 1, "", "INT64_MIN"], [17, 1, 1, "", "INT8_MAX"], [17, 1, 1, "", "INT8_MIN"], [17, 2, 1, "", "Int16Converter"], [17, 2, 1, "", "Int32Converter"], [17, 2, 1, "", "Int64Converter"], [17, 2, 1, "", "Int8Converter"], [17, 2, 1, "", "JsonConverter"], [17, 1, 1, "", "MISSING_SENTINEL"], [17, 2, 1, "", "MapConverter"], [17, 2, 1, "", "NDArrayConverter"], [17, 2, 1, "", "NDArrayConverterBase"], [17, 2, 1, "", "NDJsonProtocolReader"], [17, 2, 1, "", "NDJsonProtocolWriter"], [17, 2, 1, "", "OptionalConverter"], [17, 2, 1, "", "SizeConverter"], [17, 2, 1, "", "StringConverter"], [17, 1, 1, "", "T"], [17, 1, 1, "", "TEnum"], [17, 1, 1, "", "TFlag"], [17, 1, 1, "", "TKey"], [17, 1, 1, "", "TKey_NP"], [17, 1, 1, "", "TValue"], [17, 1, 1, "", "TValue_NP"], [17, 1, 1, "", "T_NP"], [17, 2, 1, "", "TimeConverter"], [17, 1, 1, "", "UINT16_MAX"], [17, 1, 1, "", "UINT32_MAX"], [17, 1, 1, "", "UINT64_MAX"], [17, 1, 1, "", "UINT8_MAX"], [17, 2, 1, "", "UInt16Converter"], [17, 2, 1, "", "UInt32Converter"], [17, 2, 1, "", "UInt64Converter"], [17, 2, 1, "", "UInt8Converter"], [17, 2, 1, "", "UnionConverter"], [17, 2, 1, "", "VectorConverter"], [17, 1, 1, "", "bool_converter"], [17, 1, 1, "", "complexfloat32_converter"], [17, 1, 1, "", "complexfloat64_converter"], [17, 1, 1, "", "date_converter"], [17, 1, 1, "", "datetime_converter"], [17, 1, 1, "", "float32_converter"], [17, 1, 1, "", "float64_converter"], [17, 1, 1, "", "int16_converter"], [17, 1, 1, "", "int32_converter"], [17, 1, 1, "", "int64_converter"], [17, 1, 1, "", "int8_converter"], [17, 1, 1, "", "size_converter"], [17, 1, 1, "", "string_converter"], [17, 1, 1, "", "time_converter"], [17, 1, 1, "", "uint16_converter"], [17, 1, 1, "", "uint32_converter"], [17, 1, 1, "", "uint64_converter"], [17, 1, 1, "", "uint8_converter"]], "pytomography.io.PET.prd._ndjson.BoolConverter": [[17, 3, 1, "", "from_json"], [17, 3, 1, "", "from_json_to_numpy"], [17, 3, 1, "", "numpy_to_json"], [17, 3, 1, "", "to_json"]], "pytomography.io.PET.prd._ndjson.Complex32Converter": [[17, 3, 1, "", "from_json"], [17, 3, 1, "", "from_json_to_numpy"], [17, 3, 1, "", "numpy_to_json"], [17, 3, 1, "", "to_json"]], "pytomography.io.PET.prd._ndjson.Complex64Converter": [[17, 3, 1, "", "from_json"], [17, 3, 1, "", "from_json_to_numpy"], [17, 3, 1, "", "numpy_to_json"], [17, 3, 1, "", "to_json"]], "pytomography.io.PET.prd._ndjson.DateConverter": [[17, 3, 1, "", "from_json"], [17, 3, 1, "", "from_json_to_numpy"], [17, 3, 1, "", "numpy_to_json"], [17, 3, 1, "", "to_json"]], "pytomography.io.PET.prd._ndjson.DateTimeConverter": [[17, 3, 1, "", "from_json"], [17, 3, 1, "", "from_json_to_numpy"], [17, 3, 1, "", "numpy_to_json"], [17, 3, 1, "", "to_json"]], "pytomography.io.PET.prd._ndjson.DynamicNDArrayConverter": [[17, 3, 1, "", "from_json"], [17, 3, 1, "", "from_json_to_numpy"], [17, 3, 1, "", "numpy_to_json"], [17, 3, 1, "", "to_json"]], "pytomography.io.PET.prd._ndjson.EnumConverter": [[17, 3, 1, "", "from_json"], [17, 3, 1, "", "from_json_to_numpy"], [17, 3, 1, "", "numpy_to_json"], [17, 3, 1, "", "to_json"]], "pytomography.io.PET.prd._ndjson.FixedNDArrayConverter": [[17, 3, 1, "", "from_json"], [17, 3, 1, "", "from_json_to_numpy"], [17, 3, 1, "", "numpy_to_json"], [17, 3, 1, "", "to_json"]], "pytomography.io.PET.prd._ndjson.FixedVectorConverter": [[17, 3, 1, "", "from_json"], [17, 3, 1, "", "from_json_to_numpy"], [17, 3, 1, "", "numpy_to_json"], [17, 3, 1, "", "to_json"]], "pytomography.io.PET.prd._ndjson.FlagsConverter": [[17, 3, 1, "", "from_json"], [17, 3, 1, "", "from_json_to_numpy"], [17, 3, 1, "", "numpy_to_json"], [17, 3, 1, "", "to_json"]], "pytomography.io.PET.prd._ndjson.Float32Converter": [[17, 3, 1, "", "from_json"], [17, 3, 1, "", "from_json_to_numpy"], [17, 3, 1, "", "numpy_to_json"], [17, 3, 1, "", "to_json"]], "pytomography.io.PET.prd._ndjson.Float64Converter": [[17, 3, 1, "", "from_json"], [17, 3, 1, "", "from_json_to_numpy"], [17, 3, 1, "", "numpy_to_json"], [17, 3, 1, "", "to_json"]], "pytomography.io.PET.prd._ndjson.Int16Converter": [[17, 3, 1, "", "from_json"], [17, 3, 1, "", "from_json_to_numpy"], [17, 3, 1, "", "numpy_to_json"], [17, 3, 1, "", "to_json"]], "pytomography.io.PET.prd._ndjson.Int32Converter": [[17, 3, 1, "", "from_json"], [17, 3, 1, "", "from_json_to_numpy"], [17, 3, 1, "", "numpy_to_json"], [17, 3, 1, "", "to_json"]], "pytomography.io.PET.prd._ndjson.Int64Converter": [[17, 3, 1, "", "from_json"], [17, 3, 1, "", "from_json_to_numpy"], [17, 3, 1, "", "numpy_to_json"], [17, 3, 1, "", "to_json"]], "pytomography.io.PET.prd._ndjson.Int8Converter": [[17, 3, 1, "", "from_json"], [17, 3, 1, "", "from_json_to_numpy"], [17, 3, 1, "", "numpy_to_json"], [17, 3, 1, "", "to_json"]], "pytomography.io.PET.prd._ndjson.JsonConverter": [[17, 3, 1, "", "from_json"], [17, 3, 1, "", "from_json_to_numpy"], [17, 3, 1, "", "numpy_to_json"], [17, 3, 1, "", "overall_dtype"], [17, 3, 1, "", "supports_none"], [17, 3, 1, "", "to_json"]], "pytomography.io.PET.prd._ndjson.MapConverter": [[17, 3, 1, "", "from_json"], [17, 3, 1, "", "from_json_to_numpy"], [17, 3, 1, "", "numpy_to_json"], [17, 3, 1, "", "to_json"]], "pytomography.io.PET.prd._ndjson.NDArrayConverter": [[17, 3, 1, "", "from_json"], [17, 3, 1, "", "from_json_to_numpy"], [17, 3, 1, "", "numpy_to_json"], [17, 3, 1, "", "to_json"]], "pytomography.io.PET.prd._ndjson.NDArrayConverterBase": [[17, 3, 1, "", "_get_dtype_and_subarray_shape"], [17, 3, 1, "", "_read"], [17, 3, 1, "", "check_dtype"]], "pytomography.io.PET.prd._ndjson.NDJsonProtocolReader": [[17, 3, 1, "", "_read_json_line"], [17, 3, 1, "", "close"]], "pytomography.io.PET.prd._ndjson.NDJsonProtocolWriter": [[17, 3, 1, "", "_end_stream"], [17, 3, 1, "", "_write_json_line"], [17, 3, 1, "", "close"]], "pytomography.io.PET.prd._ndjson.OptionalConverter": [[17, 3, 1, "", "from_json"], [17, 3, 1, "", "from_json_to_numpy"], [17, 3, 1, "", "numpy_to_json"], [17, 3, 1, "", "supports_none"], [17, 3, 1, "", "to_json"]], "pytomography.io.PET.prd._ndjson.SizeConverter": [[17, 3, 1, "", "from_json"], [17, 3, 1, "", "from_json_to_numpy"], [17, 3, 1, "", "numpy_to_json"], [17, 3, 1, "", "to_json"]], "pytomography.io.PET.prd._ndjson.StringConverter": [[17, 3, 1, "", "from_json"], [17, 3, 1, "", "from_json_to_numpy"], [17, 3, 1, "", "numpy_to_json"], [17, 3, 1, "", "to_json"]], "pytomography.io.PET.prd._ndjson.TimeConverter": [[17, 3, 1, "", "from_json"], [17, 3, 1, "", "from_json_to_numpy"], [17, 3, 1, "", "numpy_to_json"], [17, 3, 1, "", "to_json"]], "pytomography.io.PET.prd._ndjson.UInt16Converter": [[17, 3, 1, "", "from_json"], [17, 3, 1, "", "from_json_to_numpy"], [17, 3, 1, "", "numpy_to_json"], [17, 3, 1, "", "to_json"]], "pytomography.io.PET.prd._ndjson.UInt32Converter": [[17, 3, 1, "", "from_json"], [17, 3, 1, "", "from_json_to_numpy"], [17, 3, 1, "", "numpy_to_json"], [17, 3, 1, "", "to_json"]], "pytomography.io.PET.prd._ndjson.UInt64Converter": [[17, 3, 1, "", "from_json"], [17, 3, 1, "", "from_json_to_numpy"], [17, 3, 1, "", "numpy_to_json"], [17, 3, 1, "", "to_json"]], "pytomography.io.PET.prd._ndjson.UInt8Converter": [[17, 3, 1, "", "from_json"], [17, 3, 1, "", "from_json_to_numpy"], [17, 3, 1, "", "numpy_to_json"], [17, 3, 1, "", "to_json"]], "pytomography.io.PET.prd._ndjson.UnionConverter": [[17, 3, 1, "", "from_json"], [17, 3, 1, "", "from_json_to_numpy"], [17, 3, 1, "", "numpy_to_json"], [17, 3, 1, "", "supports_none"], [17, 3, 1, "", "to_json"]], "pytomography.io.PET.prd._ndjson.VectorConverter": [[17, 3, 1, "", "from_json"], [17, 3, 1, "", "from_json_to_numpy"], [17, 3, 1, "", "numpy_to_json"], [17, 3, 1, "", "to_json"]], "pytomography.io.PET.prd.binary": [[18, 2, 1, "", "BinaryPrdExperimentReader"], [18, 2, 1, "", "BinaryPrdExperimentWriter"], [18, 2, 1, "", "_CoincidenceEventSerializer"], [18, 2, 1, "", "_DetectorSerializer"], [18, 2, 1, "", "_ExamInformationSerializer"], [18, 2, 1, "", "_HeaderSerializer"], [18, 2, 1, "", "_InstitutionSerializer"], [18, 2, 1, "", "_ScannerInformationSerializer"], [18, 2, 1, "", "_SubjectSerializer"], [18, 2, 1, "", "_TimeBlockSerializer"], [18, 2, 1, "", "_TimeFrameInformationSerializer"], [18, 2, 1, "", "_TimeIntervalSerializer"]], "pytomography.io.PET.prd.binary.BinaryPrdExperimentReader": [[18, 3, 1, "", "_read_header"], [18, 3, 1, "", "_read_time_blocks"]], "pytomography.io.PET.prd.binary.BinaryPrdExperimentWriter": [[18, 3, 1, "", "_write_header"], [18, 3, 1, "", "_write_time_blocks"]], "pytomography.io.PET.prd.binary._CoincidenceEventSerializer": [[18, 3, 1, "", "read"], [18, 3, 1, "", "write"], [18, 3, 1, "", "write_numpy"]], "pytomography.io.PET.prd.binary._DetectorSerializer": [[18, 3, 1, "", "read"], [18, 3, 1, "", "write"], [18, 3, 1, "", "write_numpy"]], "pytomography.io.PET.prd.binary._ExamInformationSerializer": [[18, 3, 1, "", "read"], [18, 3, 1, "", "write"], [18, 3, 1, "", "write_numpy"]], "pytomography.io.PET.prd.binary._HeaderSerializer": [[18, 3, 1, "", "read"], [18, 3, 1, "", "write"], [18, 3, 1, "", "write_numpy"]], "pytomography.io.PET.prd.binary._InstitutionSerializer": [[18, 3, 1, "", "read"], [18, 3, 1, "", "write"], [18, 3, 1, "", "write_numpy"]], "pytomography.io.PET.prd.binary._ScannerInformationSerializer": [[18, 3, 1, "", "read"], [18, 3, 1, "", "write"], [18, 3, 1, "", "write_numpy"]], "pytomography.io.PET.prd.binary._SubjectSerializer": [[18, 3, 1, "", "read"], [18, 3, 1, "", "write"], [18, 3, 1, "", "write_numpy"]], "pytomography.io.PET.prd.binary._TimeBlockSerializer": [[18, 3, 1, "", "read"], [18, 3, 1, "", "write"], [18, 3, 1, "", "write_numpy"]], "pytomography.io.PET.prd.binary._TimeFrameInformationSerializer": [[18, 3, 1, "", "read"], [18, 3, 1, "", "write"], [18, 3, 1, "", "write_numpy"]], "pytomography.io.PET.prd.binary._TimeIntervalSerializer": [[18, 3, 1, "", "read"], [18, 3, 1, "", "write"], [18, 3, 1, "", "write_numpy"]], "pytomography.io.PET.prd.ndjson": [[20, 2, 1, "", "NDJsonPrdExperimentReader"], [20, 2, 1, "", "NDJsonPrdExperimentWriter"], [20, 2, 1, "", "_CoincidenceEventConverter"], [20, 2, 1, "", "_DetectorConverter"], [20, 2, 1, "", "_ExamInformationConverter"], [20, 2, 1, "", "_HeaderConverter"], [20, 2, 1, "", "_InstitutionConverter"], [20, 2, 1, "", "_ScannerInformationConverter"], [20, 2, 1, "", "_SubjectConverter"], [20, 2, 1, "", "_TimeBlockConverter"], [20, 2, 1, "", "_TimeFrameInformationConverter"], [20, 2, 1, "", "_TimeIntervalConverter"]], "pytomography.io.PET.prd.ndjson.NDJsonPrdExperimentReader": [[20, 3, 1, "", "_read_header"], [20, 3, 1, "", "_read_time_blocks"]], "pytomography.io.PET.prd.ndjson.NDJsonPrdExperimentWriter": [[20, 3, 1, "", "_write_header"], [20, 3, 1, "", "_write_time_blocks"]], "pytomography.io.PET.prd.ndjson._CoincidenceEventConverter": [[20, 3, 1, "", "from_json"], [20, 3, 1, "", "from_json_to_numpy"], [20, 3, 1, "", "numpy_to_json"], [20, 3, 1, "", "to_json"]], "pytomography.io.PET.prd.ndjson._DetectorConverter": [[20, 3, 1, "", "from_json"], [20, 3, 1, "", "from_json_to_numpy"], [20, 3, 1, "", "numpy_to_json"], [20, 3, 1, "", "to_json"]], "pytomography.io.PET.prd.ndjson._ExamInformationConverter": [[20, 3, 1, "", "from_json"], [20, 3, 1, "", "from_json_to_numpy"], [20, 3, 1, "", "numpy_to_json"], [20, 3, 1, "", "to_json"]], "pytomography.io.PET.prd.ndjson._HeaderConverter": [[20, 3, 1, "", "from_json"], [20, 3, 1, "", "from_json_to_numpy"], [20, 3, 1, "", "numpy_to_json"], [20, 3, 1, "", "to_json"]], "pytomography.io.PET.prd.ndjson._InstitutionConverter": [[20, 3, 1, "", "from_json"], [20, 3, 1, "", "from_json_to_numpy"], [20, 3, 1, "", "numpy_to_json"], [20, 3, 1, "", "to_json"]], "pytomography.io.PET.prd.ndjson._ScannerInformationConverter": [[20, 3, 1, "", "from_json"], [20, 3, 1, "", "from_json_to_numpy"], [20, 3, 1, "", "numpy_to_json"], [20, 3, 1, "", "to_json"]], "pytomography.io.PET.prd.ndjson._SubjectConverter": [[20, 3, 1, "", "from_json"], [20, 3, 1, "", "from_json_to_numpy"], [20, 3, 1, "", "numpy_to_json"], [20, 3, 1, "", "to_json"]], "pytomography.io.PET.prd.ndjson._TimeBlockConverter": [[20, 3, 1, "", "from_json"], [20, 3, 1, "", "from_json_to_numpy"], [20, 3, 1, "", "numpy_to_json"], [20, 3, 1, "", "to_json"]], "pytomography.io.PET.prd.ndjson._TimeFrameInformationConverter": [[20, 3, 1, "", "from_json"], [20, 3, 1, "", "from_json_to_numpy"], [20, 3, 1, "", "numpy_to_json"], [20, 3, 1, "", "to_json"]], "pytomography.io.PET.prd.ndjson._TimeIntervalConverter": [[20, 3, 1, "", "from_json"], [20, 3, 1, "", "from_json_to_numpy"], [20, 3, 1, "", "numpy_to_json"], [20, 3, 1, "", "to_json"]], "pytomography.io.PET.prd.protocols": [[21, 2, 1, "", "PrdExperimentReaderBase"], [21, 2, 1, "", "PrdExperimentWriterBase"]], "pytomography.io.PET.prd.protocols.PrdExperimentReaderBase": [[21, 5, 1, "", "T"], [21, 3, 1, "", "__enter__"], [21, 3, 1, "", "__exit__"], [21, 3, 1, "", "_raise_unexpected_state"], [21, 3, 1, "", "_read_header"], [21, 3, 1, "", "_read_time_blocks"], [21, 3, 1, "", "_state_to_method_name"], [21, 3, 1, "", "_wrap_iterable"], [21, 3, 1, "", "close"], [21, 3, 1, "", "copy_to"], [21, 3, 1, "", "read_header"], [21, 3, 1, "", "read_time_blocks"], [21, 5, 1, "", "schema"]], "pytomography.io.PET.prd.protocols.PrdExperimentWriterBase": [[21, 3, 1, "", "__enter__"], [21, 3, 1, "", "__exit__"], [21, 3, 1, "", "_end_stream"], [21, 3, 1, "", "_raise_unexpected_state"], [21, 3, 1, "", "_state_to_method_name"], [21, 3, 1, "", "_write_header"], [21, 3, 1, "", "_write_time_blocks"], [21, 3, 1, "", "close"], [21, 5, 1, "", "schema"], [21, 3, 1, "", "write_header"], [21, 3, 1, "", "write_time_blocks"]], "pytomography.io.PET.prd.types": [[22, 2, 1, "", "CoincidenceEvent"], [22, 2, 1, "", "Detector"], [22, 2, 1, "", "ExamInformation"], [22, 2, 1, "", "Header"], [22, 2, 1, "", "Institution"], [22, 2, 1, "", "ScannerInformation"], [22, 2, 1, "", "Subject"], [22, 2, 1, "", "TimeBlock"], [22, 2, 1, "", "TimeFrameInformation"], [22, 2, 1, "", "TimeInterval"], [22, 4, 1, "", "_mk_get_dtype"], [22, 1, 1, "", "get_dtype"]], "pytomography.io.PET.prd.types.CoincidenceEvent": [[22, 3, 1, "", "__eq__"], [22, 3, 1, "", "__repr__"], [22, 3, 1, "", "__str__"], [22, 5, 1, "", "detector_1_id"], [22, 5, 1, "", "detector_2_id"], [22, 5, 1, "", "energy_1_idx"], [22, 5, 1, "", "energy_2_idx"], [22, 5, 1, "", "tof_idx"]], "pytomography.io.PET.prd.types.Detector": [[22, 3, 1, "", "__eq__"], [22, 3, 1, "", "__repr__"], [22, 3, 1, "", "__str__"], [22, 5, 1, "", "id"], [22, 5, 1, "", "x"], [22, 5, 1, "", "y"], [22, 5, 1, "", "z"]], "pytomography.io.PET.prd.types.ExamInformation": [[22, 3, 1, "", "__eq__"], [22, 3, 1, "", "__repr__"], [22, 3, 1, "", "__str__"], [22, 5, 1, "", "institution"], [22, 5, 1, "", "protocol"], [22, 5, 1, "", "start_of_acquisition"], [22, 5, 1, "", "subject"]], "pytomography.io.PET.prd.types.Header": [[22, 3, 1, "", "__eq__"], [22, 3, 1, "", "__repr__"], [22, 3, 1, "", "__str__"], [22, 5, 1, "", "exam"], [22, 5, 1, "", "scanner"]], "pytomography.io.PET.prd.types.Institution": [[22, 3, 1, "", "__eq__"], [22, 3, 1, "", "__repr__"], [22, 3, 1, "", "__str__"], [22, 5, 1, "", "address"], [22, 5, 1, "", "name"]], "pytomography.io.PET.prd.types.ScannerInformation": [[22, 3, 1, "", "__eq__"], [22, 3, 1, "", "__repr__"], [22, 3, 1, "", "__str__"], [22, 5, 1, "", "detectors"], [22, 5, 1, "", "energy_bin_edges"], [22, 5, 1, "", "energy_resolution_at_511"], [22, 5, 1, "", "listmode_time_block_duration"], [22, 5, 1, "", "model_name"], [22, 3, 1, "", "number_of_detectors"], [22, 3, 1, "", "number_of_energy_bins"], [22, 3, 1, "", "number_of_tof_bins"], [22, 5, 1, "", "tof_bin_edges"], [22, 5, 1, "", "tof_resolution"]], "pytomography.io.PET.prd.types.Subject": [[22, 3, 1, "", "__eq__"], [22, 3, 1, "", "__repr__"], [22, 3, 1, "", "__str__"], [22, 5, 1, "", "id"], [22, 5, 1, "", "name"]], "pytomography.io.PET.prd.types.TimeBlock": [[22, 3, 1, "", "__eq__"], [22, 3, 1, "", "__repr__"], [22, 3, 1, "", "__str__"], [22, 5, 1, "", "delayed_events"], [22, 5, 1, "", "id"], [22, 5, 1, "", "prompt_events"]], "pytomography.io.PET.prd.types.TimeFrameInformation": [[22, 3, 1, "", "__eq__"], [22, 3, 1, "", "__repr__"], [22, 3, 1, "", "__str__"], [22, 3, 1, "", "number_of_time_frames"], [22, 5, 1, "", "time_frames"]], "pytomography.io.PET.prd.types.TimeInterval": [[22, 3, 1, "", "__eq__"], [22, 3, 1, "", "__repr__"], [22, 3, 1, "", "__str__"], [22, 5, 1, "", "start"], [22, 5, 1, "", "stop"]], "pytomography.io.PET.prd.yardl_types": [[23, 1, 1, "", "ComplexDouble"], [23, 1, 1, "", "ComplexFloat"], [23, 2, 1, "", "DateTime"], [23, 1, 1, "", "Float32"], [23, 1, 1, "", "Float64"], [23, 1, 1, "", "Int16"], [23, 1, 1, "", "Int32"], [23, 1, 1, "", "Int64"], [23, 1, 1, "", "Int8"], [23, 2, 1, "", "OutOfRangeEnum"], [23, 7, 1, "", "ProtocolError"], [23, 1, 1, "", "Size"], [23, 2, 1, "", "Time"], [23, 1, 1, "", "UInt16"], [23, 1, 1, "", "UInt32"], [23, 1, 1, "", "UInt64"], [23, 1, 1, "", "UInt8"], [23, 2, 1, "", "UnionCase"], [23, 1, 1, "", "_T"], [23, 4, 1, "", "structural_equal"]], "pytomography.io.PET.prd.yardl_types.DateTime": [[23, 3, 1, "", "__eq__"], [23, 3, 1, "", "__hash__"], [23, 3, 1, "", "__repr__"], [23, 3, 1, "", "__str__"], [23, 3, 1, "", "from_components"], [23, 3, 1, "", "from_datetime"], [23, 3, 1, "", "now"], [23, 6, 1, "", "numpy_value"], [23, 3, 1, "", "parse"], [23, 3, 1, "", "to_datetime"]], "pytomography.io.PET.prd.yardl_types.OutOfRangeEnum": [[23, 3, 1, "", "__eq__"], [23, 3, 1, "", "__hash__"], [23, 3, 1, "", "__repr__"], [23, 3, 1, "", "__str__"], [23, 3, 1, "", "_missing_"]], "pytomography.io.PET.prd.yardl_types.Time": [[23, 5, 1, "", "_NANOSECONDS_PER_DAY"], [23, 3, 1, "", "__eq__"], [23, 3, 1, "", "__repr__"], [23, 3, 1, "", "__str__"], [23, 3, 1, "", "from_components"], [23, 3, 1, "", "from_time"], [23, 6, 1, "", "numpy_value"], [23, 3, 1, "", "parse"]], "pytomography.io.PET.prd.yardl_types.UnionCase": [[23, 3, 1, "", "__eq__"], [23, 3, 1, "", "__repr__"], [23, 3, 1, "", "__str__"], [23, 5, 1, "", "index"], [23, 5, 1, "", "tag"]], "pytomography.io.SPECT": [[25, 4, 1, "", "CT_to_mumap"], [24, 0, 0, "-", "dicom"], [25, 4, 1, "", "get_attenuation_map"], [25, 4, 1, "", "get_attenuation_map_from_CT_slices"], [25, 4, 1, "", "get_attenuation_map_from_file"], [25, 4, 1, "", "get_projections"], [25, 4, 1, "", "get_psfmeta_from_scanner_params"], [25, 4, 1, "", "get_scatter_from_TEW"], [25, 4, 1, "", "reduce_amap"], [25, 4, 1, "", "reduce_projections"], [26, 0, 0, "-", "shared"], [27, 0, 0, "-", "simind"]], "pytomography.io.SPECT.dicom": [[24, 4, 1, "", "CT_to_mumap"], [24, 4, 1, "", "_get_affine_spect_projections"], [24, 4, 1, "", "get_aligned_rtstruct"], [24, 4, 1, "", "get_attenuation_map_from_CT_slices"], [24, 4, 1, "", "get_attenuation_map_from_file"], [24, 4, 1, "", "get_metadata"], [24, 4, 1, "", "get_projections"], [24, 4, 1, "", "get_psfmeta_from_scanner_params"], [24, 4, 1, "", "get_scatter_from_TEW"], [24, 4, 1, "", "get_window_width"], [24, 4, 1, "", "parse_projection_dataset"], [24, 4, 1, "", "save_dcm"], [24, 4, 1, "", "stitch_multibed"]], "pytomography.io.SPECT.shared": [[26, 4, 1, "", "reduce_amap"], [26, 4, 1, "", "reduce_projections"], [26, 4, 1, "", "subsample_projections"]], "pytomography.io.SPECT.simind": [[27, 4, 1, "", "_get_projections_from_single_file"], [27, 4, 1, "", "combine_projection_data"], [27, 4, 1, "", "combine_scatter_data_TEW"], [27, 4, 1, "", "get_attenuation_map"], [27, 4, 1, "", "get_energy_window_width"], [27, 4, 1, "", "get_metadata"], [27, 4, 1, "", "get_projections"], [27, 4, 1, "", "get_psfmeta_from_header"], [27, 4, 1, "", "get_scatter_from_TEW"], [27, 1, 1, "", "relation_dict"]], "pytomography.io.shared": [[31, 4, 1, "", "_get_affine_multifile"], [31, 4, 1, "", "align_images_affine"], [31, 4, 1, "", "create_ds"], [29, 0, 0, "-", "dicom"], [30, 0, 0, "-", "dicom_creation"], [31, 4, 1, "", "get_attenuation_map_interfile"], [31, 4, 1, "", "get_header_value"], [32, 0, 0, "-", "interfile"], [31, 4, 1, "", "open_multifile"]], "pytomography.io.shared.dicom": [[29, 4, 1, "", "_get_affine_multifile"], [29, 4, 1, "", "align_images_affine"], [29, 4, 1, "", "compute_max_slice_loc_multifile"], [29, 4, 1, "", "compute_slice_thickness_multifile"], [29, 4, 1, "", "open_multifile"]], "pytomography.io.shared.dicom_creation": [[30, 4, 1, "", "add_patient_information"], [30, 4, 1, "", "add_required_elements_to_ds"], [30, 4, 1, "", "add_study_and_series_information"], [30, 4, 1, "", "create_ds"], [30, 4, 1, "", "generate_base_dataset"], [30, 4, 1, "", "get_file_meta"]], "pytomography.io.shared.interfile": [[32, 4, 1, "", "get_attenuation_map_interfile"], [32, 4, 1, "", "get_header_value"]], "pytomography.likelihoods": [[33, 2, 1, "", "Likelihood"], [33, 2, 1, "", "PoissonLogLikelihood"], [34, 0, 0, "-", "likelihood"], [35, 0, 0, "-", "poisson_log_likelihood"]], "pytomography.likelihoods.Likelihood": [[33, 3, 1, "", "_set_n_subsets"], [33, 3, 1, "", "compute_gradient"], [33, 3, 1, "", "compute_gradient_ff"], [33, 3, 1, "", "compute_gradient_gf"]], "pytomography.likelihoods.PoissonLogLikelihood": [[33, 3, 1, "", "compute_gradient"], [33, 3, 1, "", "compute_gradient_ff"], [33, 3, 1, "", "compute_gradient_gf"]], "pytomography.likelihoods.likelihood": [[34, 2, 1, "", "Likelihood"]], "pytomography.likelihoods.likelihood.Likelihood": [[34, 3, 1, "", "_set_n_subsets"], [34, 3, 1, "", "compute_gradient"], [34, 3, 1, "", "compute_gradient_ff"], [34, 3, 1, "", "compute_gradient_gf"]], "pytomography.likelihoods.poisson_log_likelihood": [[35, 2, 1, "", "PoissonLogLikelihood"]], "pytomography.likelihoods.poisson_log_likelihood.PoissonLogLikelihood": [[35, 3, 1, "", "compute_gradient"], [35, 3, 1, "", "compute_gradient_ff"], [35, 3, 1, "", "compute_gradient_gf"]], "pytomography.metadata": [[41, 2, 1, "", "ObjectMeta"], [36, 0, 0, "-", "PET"], [41, 2, 1, "", "PETLMProjMeta"], [41, 2, 1, "", "PETTOFMeta"], [41, 2, 1, "", "ProjMeta"], [39, 0, 0, "-", "SPECT"], [41, 2, 1, "", "SPECTObjectMeta"], [41, 2, 1, "", "SPECTPSFMeta"], [41, 2, 1, "", "SPECTProjMeta"], [42, 0, 0, "-", "metadata"]], "pytomography.metadata.ObjectMeta": [[41, 3, 1, "", "__repr__"]], "pytomography.metadata.PET": [[36, 2, 1, "", "PETLMProjMeta"], [36, 2, 1, "", "PETTOFMeta"], [37, 0, 0, "-", "pet_tof_metadata"], [38, 0, 0, "-", "petlm_metadata"]], "pytomography.metadata.PET.pet_tof_metadata": [[37, 2, 1, "", "PETTOFMeta"]], "pytomography.metadata.PET.petlm_metadata": [[38, 2, 1, "", "PETLMProjMeta"]], "pytomography.metadata.ProjMeta": [[41, 3, 1, "", "__repr__"]], "pytomography.metadata.SPECT": [[39, 2, 1, "", "SPECTObjectMeta"], [39, 2, 1, "", "SPECTPSFMeta"], [39, 2, 1, "", "SPECTProjMeta"], [40, 0, 0, "-", "spect_metadata"]], "pytomography.metadata.SPECT.SPECTObjectMeta": [[39, 3, 1, "", "compute_padded_shape"]], "pytomography.metadata.SPECT.SPECTPSFMeta": [[39, 3, 1, "", "__repr__"]], "pytomography.metadata.SPECT.SPECTProjMeta": [[39, 3, 1, "", "compute_padded_shape"]], "pytomography.metadata.SPECT.spect_metadata": [[40, 2, 1, "", "SPECTObjectMeta"], [40, 2, 1, "", "SPECTPSFMeta"], [40, 2, 1, "", "SPECTProjMeta"]], "pytomography.metadata.SPECT.spect_metadata.SPECTObjectMeta": [[40, 3, 1, "", "compute_padded_shape"]], "pytomography.metadata.SPECT.spect_metadata.SPECTPSFMeta": [[40, 3, 1, "", "__repr__"]], "pytomography.metadata.SPECT.spect_metadata.SPECTProjMeta": [[40, 3, 1, "", "compute_padded_shape"]], "pytomography.metadata.SPECTObjectMeta": [[41, 3, 1, "", "compute_padded_shape"]], "pytomography.metadata.SPECTPSFMeta": [[41, 3, 1, "", "__repr__"]], "pytomography.metadata.SPECTProjMeta": [[41, 3, 1, "", "compute_padded_shape"]], "pytomography.metadata.metadata": [[42, 2, 1, "", "ObjectMeta"], [42, 2, 1, "", "ProjMeta"]], "pytomography.metadata.metadata.ObjectMeta": [[42, 3, 1, "", "__repr__"]], "pytomography.metadata.metadata.ProjMeta": [[42, 3, 1, "", "__repr__"]], "pytomography.priors": [[43, 2, 1, "", "AnatomyNeighbourWeight"], [43, 2, 1, "", "EuclideanNeighbourWeight"], [43, 2, 1, "", "LogCoshPrior"], [43, 2, 1, "", "NearestNeighbourPrior"], [43, 2, 1, "", "NeighbourWeight"], [43, 2, 1, "", "Prior"], [43, 2, 1, "", "QuadraticPrior"], [43, 2, 1, "", "RelativeDifferencePrior"], [43, 2, 1, "", "TopNAnatomyNeighbourWeight"], [44, 0, 0, "-", "nearest_neighbour"], [45, 0, 0, "-", "prior"]], "pytomography.priors.AnatomyNeighbourWeight": [[43, 3, 1, "", "__call__"], [43, 3, 1, "", "set_object_meta"]], "pytomography.priors.EuclideanNeighbourWeight": [[43, 3, 1, "", "__call__"]], "pytomography.priors.LogCoshPrior": [[43, 3, 1, "", "phi0"], [43, 3, 1, "", "phi1"]], "pytomography.priors.NearestNeighbourPrior": [[43, 3, 1, "", "__call__"], [43, 3, 1, "", "_pair_contribution"], [43, 3, 1, "", "phi0"], [43, 3, 1, "", "phi1"], [43, 3, 1, "", "phi2_1"], [43, 3, 1, "", "phi2_2"], [43, 3, 1, "", "set_object_meta"]], "pytomography.priors.NeighbourWeight": [[43, 3, 1, "", "__call__"], [43, 3, 1, "", "set_object_meta"]], "pytomography.priors.Prior": [[43, 3, 1, "", "__call__"], [43, 3, 1, "", "set_beta_scale"], [43, 3, 1, "", "set_object"], [43, 3, 1, "", "set_object_meta"]], "pytomography.priors.QuadraticPrior": [[43, 3, 1, "", "phi0"], [43, 3, 1, "", "phi1"]], "pytomography.priors.RelativeDifferencePrior": [[43, 3, 1, "", "phi0"], [43, 3, 1, "", "phi1"], [43, 3, 1, "", "phi2_1"], [43, 3, 1, "", "phi2_2"]], "pytomography.priors.TopNAnatomyNeighbourWeight": [[43, 3, 1, "", "__call__"], [43, 3, 1, "", "compute_inclusion_tensor"], [43, 3, 1, "", "set_object_meta"]], "pytomography.priors.nearest_neighbour": [[44, 2, 1, "", "AnatomyNeighbourWeight"], [44, 2, 1, "", "EuclideanNeighbourWeight"], [44, 2, 1, "", "LogCoshPrior"], [44, 2, 1, "", "NearestNeighbourPrior"], [44, 2, 1, "", "NeighbourWeight"], [44, 2, 1, "", "QuadraticPrior"], [44, 2, 1, "", "RelativeDifferencePrior"], [44, 2, 1, "", "TopNAnatomyNeighbourWeight"]], "pytomography.priors.nearest_neighbour.AnatomyNeighbourWeight": [[44, 3, 1, "", "__call__"], [44, 3, 1, "", "set_object_meta"]], "pytomography.priors.nearest_neighbour.EuclideanNeighbourWeight": [[44, 3, 1, "", "__call__"]], "pytomography.priors.nearest_neighbour.LogCoshPrior": [[44, 3, 1, "", "phi0"], [44, 3, 1, "", "phi1"]], "pytomography.priors.nearest_neighbour.NearestNeighbourPrior": [[44, 3, 1, "", "__call__"], [44, 3, 1, "", "_pair_contribution"], [44, 3, 1, "", "phi0"], [44, 3, 1, "", "phi1"], [44, 3, 1, "", "phi2_1"], [44, 3, 1, "", "phi2_2"], [44, 3, 1, "", "set_object_meta"]], "pytomography.priors.nearest_neighbour.NeighbourWeight": [[44, 3, 1, "", "__call__"], [44, 3, 1, "", "set_object_meta"]], "pytomography.priors.nearest_neighbour.QuadraticPrior": [[44, 3, 1, "", "phi0"], [44, 3, 1, "", "phi1"]], "pytomography.priors.nearest_neighbour.RelativeDifferencePrior": [[44, 3, 1, "", "phi0"], [44, 3, 1, "", "phi1"], [44, 3, 1, "", "phi2_1"], [44, 3, 1, "", "phi2_2"]], "pytomography.priors.nearest_neighbour.TopNAnatomyNeighbourWeight": [[44, 3, 1, "", "__call__"], [44, 3, 1, "", "compute_inclusion_tensor"], [44, 3, 1, "", "set_object_meta"]], "pytomography.priors.prior": [[45, 2, 1, "", "Prior"]], "pytomography.priors.prior.Prior": [[45, 3, 1, "", "__call__"], [45, 3, 1, "", "set_beta_scale"], [45, 3, 1, "", "set_object"], [45, 3, 1, "", "set_object_meta"]], "pytomography.projectors": [[50, 2, 1, "", "ExtendedSystemMatrix"], [46, 0, 0, "-", "PET"], [48, 0, 0, "-", "SPECT"], [50, 2, 1, "", "SystemMatrix"], [51, 0, 0, "-", "shared"], [54, 0, 0, "-", "system_matrix"]], "pytomography.projectors.ExtendedSystemMatrix": [[50, 3, 1, "", "backward"], [50, 3, 1, "", "compute_normalization_factor"], [50, 3, 1, "", "forward"], [50, 3, 1, "", "get_projection_subset"], [50, 3, 1, "", "set_n_subsets"]], "pytomography.projectors.PET": [[46, 2, 1, "", "PETLMSystemMatrix"], [47, 0, 0, "-", "petlm_system_matrix"]], "pytomography.projectors.PET.PETLMSystemMatrix": [[46, 3, 1, "", "backward"], [46, 3, 1, "", "compute_atteunation_probability_projection"], [46, 3, 1, "", "compute_normalization_factor"], [46, 3, 1, "", "compute_sens_factor"], [46, 3, 1, "", "forward"], [46, 3, 1, "", "get_projection_subset"], [46, 3, 1, "", "get_weighting_subset"], [46, 3, 1, "", "set_n_subsets"]], "pytomography.projectors.PET.petlm_system_matrix": [[47, 2, 1, "", "PETLMSystemMatrix"]], "pytomography.projectors.PET.petlm_system_matrix.PETLMSystemMatrix": [[47, 3, 1, "", "backward"], [47, 3, 1, "", "compute_atteunation_probability_projection"], [47, 3, 1, "", "compute_normalization_factor"], [47, 3, 1, "", "compute_sens_factor"], [47, 3, 1, "", "forward"], [47, 3, 1, "", "get_projection_subset"], [47, 3, 1, "", "get_weighting_subset"], [47, 3, 1, "", "set_n_subsets"]], "pytomography.projectors.SPECT": [[48, 2, 1, "", "SPECTCompleteSystemMatrix"], [48, 2, 1, "", "SPECTSystemMatrix"], [49, 0, 0, "-", "spect_system_matrix"]], "pytomography.projectors.SPECT.SPECTCompleteSystemMatrix": [[48, 3, 1, "", "_compute_projections_mask"], [48, 3, 1, "", "_compute_system_matrix_components"], [48, 3, 1, "", "_get_object_positions"], [48, 3, 1, "", "_get_proj_positions"], [48, 3, 1, "", "backward"], [48, 3, 1, "", "forward"]], "pytomography.projectors.SPECT.SPECTSystemMatrix": [[48, 3, 1, "", "_get_object_initial"], [48, 3, 1, "", "backward"], [48, 3, 1, "", "compute_normalization_factor"], [48, 3, 1, "", "forward"], [48, 3, 1, "", "get_projection_subset"], [48, 3, 1, "", "get_weighting_subset"], [48, 3, 1, "", "set_n_subsets"]], "pytomography.projectors.SPECT.spect_system_matrix": [[49, 2, 1, "", "SPECTCompleteSystemMatrix"], [49, 2, 1, "", "SPECTSystemMatrix"]], "pytomography.projectors.SPECT.spect_system_matrix.SPECTCompleteSystemMatrix": [[49, 3, 1, "", "_compute_projections_mask"], [49, 3, 1, "", "_compute_system_matrix_components"], [49, 3, 1, "", "_get_object_positions"], [49, 3, 1, "", "_get_proj_positions"], [49, 3, 1, "", "backward"], [49, 3, 1, "", "forward"]], "pytomography.projectors.SPECT.spect_system_matrix.SPECTSystemMatrix": [[49, 3, 1, "", "_get_object_initial"], [49, 3, 1, "", "backward"], [49, 3, 1, "", "compute_normalization_factor"], [49, 3, 1, "", "forward"], [49, 3, 1, "", "get_projection_subset"], [49, 3, 1, "", "get_weighting_subset"], [49, 3, 1, "", "set_n_subsets"]], "pytomography.projectors.SystemMatrix": [[50, 3, 1, "", "_get_object_initial"], [50, 3, 1, "", "backward"], [50, 3, 1, "", "forward"], [50, 3, 1, "", "get_subset_splits"], [50, 3, 1, "", "initialize_transforms"]], "pytomography.projectors.shared": [[51, 2, 1, "", "KEMSystemMatrix"], [51, 2, 1, "", "MotionSystemMatrix"], [52, 0, 0, "-", "kem_system_matrix"], [53, 0, 0, "-", "motion_correction_system_matrix"]], "pytomography.projectors.shared.KEMSystemMatrix": [[51, 3, 1, "", "backward"], [51, 3, 1, "", "compute_normalization_factor"], [51, 3, 1, "", "forward"]], "pytomography.projectors.shared.kem_system_matrix": [[52, 2, 1, "", "KEMSystemMatrix"]], "pytomography.projectors.shared.kem_system_matrix.KEMSystemMatrix": [[52, 3, 1, "", "backward"], [52, 3, 1, "", "compute_normalization_factor"], [52, 3, 1, "", "forward"]], "pytomography.projectors.shared.motion_correction_system_matrix": [[53, 2, 1, "", "MotionSystemMatrix"]], "pytomography.projectors.system_matrix": [[54, 2, 1, "", "ExtendedSystemMatrix"], [54, 2, 1, "", "SystemMatrix"]], "pytomography.projectors.system_matrix.ExtendedSystemMatrix": [[54, 3, 1, "", "backward"], [54, 3, 1, "", "compute_normalization_factor"], [54, 3, 1, "", "forward"], [54, 3, 1, "", "get_projection_subset"], [54, 3, 1, "", "set_n_subsets"]], "pytomography.projectors.system_matrix.SystemMatrix": [[54, 3, 1, "", "_get_object_initial"], [54, 3, 1, "", "backward"], [54, 3, 1, "", "forward"], [54, 3, 1, "", "get_subset_splits"], [54, 3, 1, "", "initialize_transforms"]], "pytomography.transforms": [[57, 0, 0, "-", "SPECT"], [59, 2, 1, "", "Transform"], [61, 0, 0, "-", "shared"], [65, 0, 0, "-", "transform"]], "pytomography.transforms.SPECT": [[57, 2, 1, "", "CutOffTransform"], [57, 2, 1, "", "SPECTAttenuationTransform"], [57, 2, 1, "", "SPECTPSFTransform"], [55, 0, 0, "-", "attenuation"], [56, 0, 0, "-", "cutoff"], [58, 0, 0, "-", "psf"]], "pytomography.transforms.SPECT.CutOffTransform": [[57, 3, 1, "", "backward"], [57, 3, 1, "", "forward"]], "pytomography.transforms.SPECT.SPECTAttenuationTransform": [[57, 3, 1, "", "backward"], [57, 3, 1, "", "compute_average_prob_matrix"], [57, 3, 1, "", "configure"], [57, 3, 1, "", "forward"]], "pytomography.transforms.SPECT.SPECTPSFTransform": [[57, 3, 1, "", "_apply_psf"], [57, 3, 1, "", "_compute_kernel_size"], [57, 3, 1, "", "_configure_gaussian_model"], [57, 3, 1, "", "_configure_kernel_model"], [57, 3, 1, "", "_configure_manual_net"], [57, 3, 1, "", "_get_sigma"], [57, 3, 1, "", "backward"], [57, 3, 1, "", "configure"], [57, 3, 1, "", "forward"]], "pytomography.transforms.SPECT.attenuation": [[55, 2, 1, "", "SPECTAttenuationTransform"], [55, 4, 1, "", "get_prob_of_detection_matrix"]], "pytomography.transforms.SPECT.attenuation.SPECTAttenuationTransform": [[55, 3, 1, "", "backward"], [55, 3, 1, "", "compute_average_prob_matrix"], [55, 3, 1, "", "configure"], [55, 3, 1, "", "forward"]], "pytomography.transforms.SPECT.cutoff": [[56, 2, 1, "", "CutOffTransform"]], "pytomography.transforms.SPECT.cutoff.CutOffTransform": [[56, 3, 1, "", "backward"], [56, 3, 1, "", "forward"]], "pytomography.transforms.SPECT.psf": [[58, 2, 1, "", "ArbitraryPSFNet"], [58, 2, 1, "", "GaussianBlurNet"], [58, 2, 1, "", "SPECTPSFTransform"], [58, 4, 1, "", "get_1D_PSF_layer"]], "pytomography.transforms.SPECT.psf.ArbitraryPSFNet": [[58, 3, 1, "", "forward"]], "pytomography.transforms.SPECT.psf.GaussianBlurNet": [[58, 3, 1, "", "forward"]], "pytomography.transforms.SPECT.psf.SPECTPSFTransform": [[58, 3, 1, "", "_apply_psf"], [58, 3, 1, "", "_compute_kernel_size"], [58, 3, 1, "", "_configure_gaussian_model"], [58, 3, 1, "", "_configure_kernel_model"], [58, 3, 1, "", "_configure_manual_net"], [58, 3, 1, "", "_get_sigma"], [58, 3, 1, "", "backward"], [58, 3, 1, "", "configure"], [58, 3, 1, "", "forward"]], "pytomography.transforms.Transform": [[59, 3, 1, "", "backward"], [59, 3, 1, "", "configure"], [59, 3, 1, "", "forward"]], "pytomography.transforms.shared": [[61, 2, 1, "", "DVFMotionTransform"], [61, 2, 1, "", "GaussianFilter"], [61, 2, 1, "", "KEMTransform"], [61, 2, 1, "", "RotationTransform"], [60, 0, 0, "-", "filters"], [62, 0, 0, "-", "kem"], [63, 0, 0, "-", "motion"], [64, 0, 0, "-", "spatial"]], "pytomography.transforms.shared.DVFMotionTransform": [[61, 3, 1, "", "_apply_dvf"], [61, 3, 1, "", "_get_new_coordinates"], [61, 3, 1, "", "_get_old_coordinates"], [61, 3, 1, "", "_get_vol_ratio"], [61, 3, 1, "", "backward"], [61, 3, 1, "", "forward"]], "pytomography.transforms.shared.GaussianFilter": [[61, 3, 1, "", "__call__"], [61, 3, 1, "", "_get_kernels"], [61, 3, 1, "", "backward"], [61, 3, 1, "", "configure"], [61, 3, 1, "", "forward"]], "pytomography.transforms.shared.KEMTransform": [[61, 3, 1, "", "backward"], [61, 3, 1, "", "compute_kernel"], [61, 3, 1, "", "configure"], [61, 3, 1, "", "forward"]], "pytomography.transforms.shared.RotationTransform": [[61, 3, 1, "", "backward"], [61, 3, 1, "", "forward"]], "pytomography.transforms.shared.filters": [[60, 2, 1, "", "GaussianFilter"]], "pytomography.transforms.shared.filters.GaussianFilter": [[60, 3, 1, "", "__call__"], [60, 3, 1, "", "_get_kernels"], [60, 3, 1, "", "backward"], [60, 3, 1, "", "configure"], [60, 3, 1, "", "forward"]], "pytomography.transforms.shared.kem": [[62, 2, 1, "", "KEMTransform"]], "pytomography.transforms.shared.kem.KEMTransform": [[62, 3, 1, "", "backward"], [62, 3, 1, "", "compute_kernel"], [62, 3, 1, "", "configure"], [62, 3, 1, "", "forward"]], "pytomography.transforms.shared.motion": [[63, 2, 1, "", "DVFMotionTransform"]], "pytomography.transforms.shared.motion.DVFMotionTransform": [[63, 3, 1, "", "_apply_dvf"], [63, 3, 1, "", "_get_new_coordinates"], [63, 3, 1, "", "_get_old_coordinates"], [63, 3, 1, "", "_get_vol_ratio"], [63, 3, 1, "", "backward"], [63, 3, 1, "", "forward"]], "pytomography.transforms.shared.spatial": [[64, 2, 1, "", "RotationTransform"]], "pytomography.transforms.shared.spatial.RotationTransform": [[64, 3, 1, "", "backward"], [64, 3, 1, "", "forward"]], "pytomography.transforms.transform": [[65, 2, 1, "", "Transform"]], "pytomography.transforms.transform.Transform": [[65, 3, 1, "", "backward"], [65, 3, 1, "", "configure"], [65, 3, 1, "", "forward"]], "pytomography.utils": [[67, 2, 1, "", "HammingFilter"], [67, 2, 1, "", "RampFilter"], [67, 4, 1, "", "check_if_class_contains_method"], [67, 4, 1, "", "compute_TEW"], [67, 4, 1, "", "compute_pad_size"], [67, 4, 1, "", "dual_sqrt_exponential"], [66, 0, 0, "-", "fourier_filters"], [67, 4, 1, "", "get_E_mu_data_from_datasheet"], [67, 4, 1, "", "get_blank_below_above"], [67, 4, 1, "", "get_distance"], [67, 4, 1, "", "get_mu_from_spectrum_interp"], [67, 4, 1, "", "get_object_nearest_neighbour"], [68, 0, 0, "-", "misc"], [69, 0, 0, "-", "nist_data"], [67, 4, 1, "", "pad_object"], [67, 4, 1, "", "pad_object_z"], [67, 4, 1, "", "pad_proj"], [67, 4, 1, "", "print_collimator_parameters"], [67, 4, 1, "", "rev_cumsum"], [67, 4, 1, "", "rotate_detector_z"], [70, 0, 0, "-", "scatter"], [71, 0, 0, "-", "spatial"], [67, 4, 1, "", "unpad_object"], [67, 4, 1, "", "unpad_object_z"], [67, 4, 1, "", "unpad_proj"]], "pytomography.utils.HammingFilter": [[67, 3, 1, "", "__call__"]], "pytomography.utils.RampFilter": [[67, 3, 1, "", "__call__"]], "pytomography.utils.fourier_filters": [[66, 2, 1, "", "HammingFilter"], [66, 2, 1, "", "RampFilter"]], "pytomography.utils.fourier_filters.HammingFilter": [[66, 3, 1, "", "__call__"]], "pytomography.utils.fourier_filters.RampFilter": [[66, 3, 1, "", "__call__"]], "pytomography.utils.misc": [[68, 4, 1, "", "check_if_class_contains_method"], [68, 4, 1, "", "get_blank_below_above"], [68, 4, 1, "", "get_distance"], [68, 4, 1, "", "get_object_nearest_neighbour"], [68, 4, 1, "", "print_collimator_parameters"], [68, 4, 1, "", "rev_cumsum"]], "pytomography.utils.nist_data": [[69, 4, 1, "", "dual_sqrt_exponential"], [69, 4, 1, "", "get_E_mu_data_from_datasheet"], [69, 4, 1, "", "get_mu_from_spectrum_interp"]], "pytomography.utils.scatter": [[70, 4, 1, "", "compute_TEW"]], "pytomography.utils.spatial": [[71, 4, 1, "", "compute_pad_size"], [71, 4, 1, "", "compute_pad_size_padded"], [71, 4, 1, "", "pad_object"], [71, 4, 1, "", "pad_object_z"], [71, 4, 1, "", "pad_proj"], [71, 4, 1, "", "rotate_detector_z"], [71, 4, 1, "", "unpad_object"], [71, 4, 1, "", "unpad_object_z"], [71, 4, 1, "", "unpad_proj"]]}, "objtypes": {"0": "py:module", "1": "py:data", "2": "py:class", "3": "py:method", "4": "py:function", "5": "py:attribute", "6": "py:property", "7": "py:exception"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "data", "Python data"], "2": ["py", "class", "Python class"], "3": ["py", "method", "Python method"], "4": ["py", "function", "Python function"], "5": ["py", "attribute", "Python attribute"], "6": ["py", "property", "Python property"], "7": ["py", "exception", "Python exception"]}, "titleterms": {"api": 0, "refer": 0, "pytomographi": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 74], "algorithm": [1, 2, 3, 4, 75, 82], "dip_recon": 1, "modul": [1, 2, 4, 5, 6, 8, 10, 12, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 26, 27, 29, 30, 32, 34, 35, 37, 38, 40, 42, 44, 45, 47, 49, 52, 53, 54, 55, 56, 58, 60, 62, 63, 64, 65, 66, 68, 69, 70, 71], "content": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 74], "class": [1, 2, 3, 4, 5, 6, 7, 8, 15, 17, 18, 19, 20, 21, 22, 23, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67], "fbp": 2, "submodul": [3, 7, 11, 13, 19, 25, 31, 33, 36, 39, 41, 43, 46, 48, 50, 51, 57, 59, 61, 67], "packag": [3, 7, 9, 11, 19, 25, 31, 33, 36, 39, 41, 43, 46, 48, 50, 51, 57, 59, 61, 67], "preconditioned_gradient_asc": 4, "callback": [5, 6, 7, 8], "data_sav": 6, "likelihood": [8, 33, 34, 35, 78, 82], "subpackag": [9, 13, 28, 41, 50, 59], "function": [9, 10, 11, 12, 14, 15, 16, 19, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 55, 58, 67, 68, 69, 70, 71], "attribut": [9, 10, 15, 17, 19, 22, 23, 27], "io": [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32], "ct": [10, 11], "attenuation_map": 10, "pet": [12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 36, 37, 38, 46, 47, 84], "gate": [12, 76], "petsird": [14, 77], "prd": [15, 16, 17, 18, 19, 20, 21, 22, 23], "_binari": 15, "_dtype": 16, "_ndjson": 17, "binari": 18, "ndjson": 20, "protocol": 21, "type": 22, "yardl_typ": 23, "spect": [24, 25, 26, 27, 39, 40, 48, 49, 55, 56, 57, 58, 73, 75, 81, 84], "dicom": [24, 29, 78, 79], "share": [26, 29, 30, 31, 32, 51, 52, 53, 60, 61, 62, 63, 64], "simind": [27, 82], "dicom_cr": 30, "interfil": 32, "poisson_log_likelihood": 35, "metadata": [36, 37, 38, 39, 40, 41, 42], "pet_tof_metadata": 37, "petlm_metadata": 38, "spect_metadata": 40, "prior": [43, 44, 45, 75], "nearest_neighbour": 44, "projector": [46, 47, 48, 49, 50, 51, 52, 53, 54], "petlm_system_matrix": 47, "spect_system_matrix": 49, "kem_system_matrix": 52, "motion_correction_system_matrix": 53, "system_matrix": 54, "transform": [55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 75, 78], "attenu": [55, 78], "cutoff": 56, "psf": [58, 78], "filter": [60, 80], "kem": [62, 82], "motion": 63, "spatial": [64, 71], "util": [66, 67, 68, 69, 70, 71], "fourier_filt": 66, "misc": [68, 84], "nist_data": 69, "scatter": [70, 75], "develop": 72, "": 72, "guid": 72, "extern": 73, "data": [73, 76, 77, 78, 79, 80, 81, 82], "nist": 73, "collim": 73, "featur": 74, "instal": 74, "tutori": [74, 84], "user": 74, "forum": 74, "exampl": [74, 81], "manual": 75, "coordin": 75, "planar": 75, "head": 75, "imag": [75, 80], "datatyp": 75, "object": [75, 78, 80], "project": [75, 80, 81, 82], "mathemat": 75, "notat": 75, "reconstruct": [75, 76, 78, 79, 80, 81, 82], "introduct": [76, 77, 78, 82], "normal": 76, "comput": 76, "phantom": 76, "part": [78, 79, 81], "1": [78, 79, 80, 81, 82], "open": [78, 79, 81, 82], "2": [78, 79, 80, 81, 82], "model": [78, 80], "system": [78, 80, 82], "matrix": [78, 82], "save": 78, "multipl": 79, "bed": 79, "posit": 79, "back": 80, "creat": [80, 82], "The": [80, 82], "case": 80, "obtain": [80, 81], "addit": 80, "quantit": 81, "organ": 81, "mask": 81, "3": [81, 82], "defin": 82, "4": 82, "osem": 82, "osmaposl": 82, "bsrem": 82, "5": 82, "post": 82, "uncertainti": 83, "estim": 83, "listmod": 84}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.viewcode": 1, "nbsphinx": 4, "sphinx": 57}, "alltitles": {"Developer\u2019s Guide": [[72, "developer-s-guide"]], "External Data": [[73, "external-data"]], "NIST": [[73, "nist"]], "SPECT Collimator Data": [[73, "spect-collimator-data"]], "Manual": [[75, "Manual"]], "Coordinates": [[75, "Coordinates"]], "SPECT Planar Head Imaging": [[75, "SPECT-Planar-Head-Imaging"]], "Datatypes": [[75, "Datatypes"]], "Objects/Projections": [[75, "Objects/Projections"]], "Mathematical Notation": [[75, "Mathematical-Notation"]], "Projections": [[75, "Projections"]], "Transforms": [[75, "Transforms"]], "Reconstruction Algorithms": [[75, "Reconstruction-Algorithms"]], "Scatter": [[75, "Scatter"]], "Priors": [[75, "Priors"]], "GATE Data Introduction": [[76, "GATE-Data-Introduction"]], "Normalization Computation": [[76, "Normalization-Computation"]], "Phantom Reconstruction": [[76, "Phantom-Reconstruction"]], "PETSIRD Data Introduction": [[77, "PETSIRD-Data-Introduction"]], "DICOM Data Introduction": [[78, "DICOM-Data-Introduction"]], "Part 1: Opening Data": [[78, "Part-1:-Opening-Data"], [79, "Part-1:-Opening-Data"]], "Part 2: Modeling": [[78, "Part-2:-Modeling"]], "Attenuation Transform": [[78, "Attenuation-Transform"]], "PSF Modeling": [[78, "PSF-Modeling"]], "System Matrix": [[78, "System-Matrix"]], "Likelihood": [[78, "Likelihood"]], "Reconstruct the object": [[78, "Reconstruct-the-object"]], "Saving Data": [[78, "Saving-Data"]], "DICOM Multiple Bed Positions": [[79, "DICOM-Multiple-Bed-Positions"]], "Part 2: Reconstruction": [[79, "Part-2:-Reconstruction"]], "Filtered Back Projection": [[80, "Filtered-Back-Projection"]], "Creating The Object": [[80, "Creating-The-Object"]], "Modeling the Imaging System": [[80, "Modeling-the-Imaging-System"]], "Case 1:": [[80, "Case-1:"]], "Case 2:": [[80, "Case-2:"]], "Obtaining Imaging Data": [[80, "Obtaining-Imaging-Data"]], "Reconstruction": [[80, "Reconstruction"]], "Additional Filtering": [[80, "Additional-Filtering"]], "Quantitative Example": [[81, "Quantitative-Example"]], "Part 1: Open Projection Data": [[81, "Part-1:-Open-Projection-Data"]], "2. Obtain Organ Masks": [[81, "2.-Obtain-Organ-Masks"]], "Part 3: Reconstructing SPECT Data": [[81, "Part-3:-Reconstructing-SPECT-Data"]], "SIMIND Data Introduction": [[82, "SIMIND-Data-Introduction"]], "1. Opening Projection Data": [[82, "1.-Opening-Projection-Data"]], "2. Creating The System Matrix": [[82, "2.-Creating-The-System-Matrix"]], "3. Defining The Likelihood": [[82, "3.-Defining-The-Likelihood"]], "4. Reconstruction Algorithms": [[82, "4.-Reconstruction-Algorithms"]], "4.1 OSEM": [[82, "4.1-OSEM"]], "4.2 OSMAPOSL": [[82, "4.2-OSMAPOSL"]], "4.3 BSREM": [[82, "4.3-BSREM"]], "4.4 KEM": [[82, "4.4-KEM"]], "5. Post Reconstruction": [[82, "5.-Post-Reconstruction"]], "Uncertainty Estimation": [[83, "Uncertainty-Estimation"]], "Tutorials": [[84, "tutorials"], [74, "tutorials"]], "SPECT": [[84, "spect"]], "PET (Listmode)": [[84, "pet-listmode"]], "Misc": [[84, "misc"]], "PyTomography": [[74, "pytomography"]], "Features": [[74, "features"]], "Installation": [[74, "installation"]], "User Forum": [[74, "user-forum"]], "Examples": [[74, "examples"]], "Contents": [[74, "contents"]], "API Reference": [[0, "api-reference"]], "pytomography.algorithms.dip_recon": [[1, "module-pytomography.algorithms.dip_recon"]], "Module Contents": [[1, "module-contents"], [2, "module-contents"], [4, "module-contents"], [5, "module-contents"], [6, "module-contents"], [8, "module-contents"], [10, "module-contents"], [12, "module-contents"], [14, "module-contents"], [15, "module-contents"], [16, "module-contents"], [17, "module-contents"], [18, "module-contents"], [20, "module-contents"], [21, "module-contents"], [22, "module-contents"], [23, "module-contents"], [24, "module-contents"], [26, "module-contents"], [27, "module-contents"], [29, "module-contents"], [30, "module-contents"], [32, "module-contents"], [34, "module-contents"], [35, "module-contents"], [37, "module-contents"], [38, "module-contents"], [40, "module-contents"], [42, "module-contents"], [44, "module-contents"], [45, "module-contents"], [47, "module-contents"], [49, "module-contents"], [52, "module-contents"], [53, "module-contents"], [54, "module-contents"], [55, "module-contents"], [56, "module-contents"], [58, "module-contents"], [60, "module-contents"], [62, "module-contents"], [63, "module-contents"], [64, "module-contents"], [65, "module-contents"], [66, "module-contents"], [68, "module-contents"], [69, "module-contents"], [70, "module-contents"], [71, "module-contents"]], "Classes": [[1, "classes"], [2, "classes"], [3, "classes"], [4, "classes"], [5, "classes"], [6, "classes"], [7, "classes"], [8, "classes"], [15, "classes"], [17, "classes"], [18, "classes"], [19, "classes"], [20, "classes"], [21, "classes"], [22, "classes"], [23, "classes"], [33, "classes"], [34, "classes"], [35, "classes"], [36, "classes"], [37, "classes"], [38, "classes"], [39, "classes"], [40, "classes"], [41, "classes"], [42, "classes"], [43, "classes"], [44, "classes"], [45, "classes"], [46, "classes"], [47, "classes"], [48, "classes"], [49, "classes"], [50, "classes"], [51, "classes"], [52, "classes"], [53, "classes"], [54, "classes"], [55, "classes"], [56, "classes"], [57, "classes"], [58, "classes"], [59, "classes"], [60, "classes"], [61, "classes"], [62, "classes"], [63, "classes"], [64, "classes"], [65, "classes"], [66, "classes"], [67, "classes"]], "pytomography.algorithms.fbp": [[2, "module-pytomography.algorithms.fbp"]], "pytomography.algorithms": [[3, "module-pytomography.algorithms"]], "Submodules": [[3, "submodules"], [7, "submodules"], [11, "submodules"], [13, "submodules"], [19, "submodules"], [25, "submodules"], [31, "submodules"], [33, "submodules"], [36, "submodules"], [39, "submodules"], [41, "submodules"], [43, "submodules"], [46, "submodules"], [48, "submodules"], [50, "submodules"], [51, "submodules"], [57, "submodules"], [59, "submodules"], [61, "submodules"], [67, "submodules"]], "Package Contents": [[3, "package-contents"], [7, "package-contents"], [9, "package-contents"], [11, "package-contents"], [19, "package-contents"], [25, "package-contents"], [31, "package-contents"], [33, "package-contents"], [36, "package-contents"], [39, "package-contents"], [41, "package-contents"], [43, "package-contents"], [46, "package-contents"], [48, "package-contents"], [50, "package-contents"], [51, "package-contents"], [57, "package-contents"], [59, "package-contents"], [61, "package-contents"], [67, "package-contents"]], "pytomography.algorithms.preconditioned_gradient_ascent": [[4, "module-pytomography.algorithms.preconditioned_gradient_ascent"]], "pytomography.callbacks.callback": [[5, "module-pytomography.callbacks.callback"]], "pytomography.callbacks.data_saving": [[6, "module-pytomography.callbacks.data_saving"]], "pytomography.callbacks": [[7, "module-pytomography.callbacks"]], "pytomography.callbacks.likelihood": [[8, "module-pytomography.callbacks.likelihood"]], "pytomography": [[9, "module-pytomography"]], "Subpackages": [[9, "subpackages"], [13, "subpackages"], [28, "subpackages"], [41, "subpackages"], [50, "subpackages"], [59, "subpackages"]], "Functions": [[9, "functions"], [10, "functions"], [11, "functions"], [12, "functions"], [14, "functions"], [15, "functions"], [16, "functions"], [19, "functions"], [22, "functions"], [23, "functions"], [24, "functions"], [25, "functions"], [26, "functions"], [27, "functions"], [29, "functions"], [30, "functions"], [31, "functions"], [32, "functions"], [55, "functions"], [58, "functions"], [67, "functions"], [68, "functions"], [69, "functions"], [70, "functions"], [71, "functions"]], "Attributes": [[9, "attributes"], [10, "attributes"], [15, "attributes"], [17, "attributes"], [19, "attributes"], [22, "attributes"], [23, "attributes"], [27, "attributes"]], "pytomography.io.CT.attenuation_map": [[10, "module-pytomography.io.CT.attenuation_map"]], "pytomography.io.CT": [[11, "module-pytomography.io.CT"]], "pytomography.io.PET.gate": [[12, "module-pytomography.io.PET.gate"]], "pytomography.io.PET": [[13, "module-pytomography.io.PET"]], "pytomography.io.PET.petsird": [[14, "module-pytomography.io.PET.petsird"]], "pytomography.io.PET.prd._binary": [[15, "module-pytomography.io.PET.prd._binary"]], "pytomography.io.PET.prd._dtypes": [[16, "module-pytomography.io.PET.prd._dtypes"]], "pytomography.io.PET.prd._ndjson": [[17, "module-pytomography.io.PET.prd._ndjson"]], "pytomography.io.PET.prd.binary": [[18, "module-pytomography.io.PET.prd.binary"]], "pytomography.io.PET.prd": [[19, "module-pytomography.io.PET.prd"]], "pytomography.io.PET.prd.ndjson": [[20, "module-pytomography.io.PET.prd.ndjson"]], "pytomography.io.PET.prd.protocols": [[21, "module-pytomography.io.PET.prd.protocols"]], "pytomography.io.PET.prd.types": [[22, "module-pytomography.io.PET.prd.types"]], "pytomography.io.PET.prd.yardl_types": [[23, "module-pytomography.io.PET.prd.yardl_types"]], "pytomography.io.SPECT.dicom": [[24, "module-pytomography.io.SPECT.dicom"]], "pytomography.io.SPECT": [[25, "module-pytomography.io.SPECT"]], "pytomography.io.SPECT.shared": [[26, "module-pytomography.io.SPECT.shared"]], "pytomography.io.SPECT.simind": [[27, "module-pytomography.io.SPECT.simind"]], "pytomography.io": [[28, "module-pytomography.io"]], "pytomography.io.shared.dicom": [[29, "module-pytomography.io.shared.dicom"]], "pytomography.io.shared.dicom_creation": [[30, "module-pytomography.io.shared.dicom_creation"]], "pytomography.io.shared": [[31, "module-pytomography.io.shared"]], "pytomography.io.shared.interfile": [[32, "module-pytomography.io.shared.interfile"]], "pytomography.likelihoods": [[33, "module-pytomography.likelihoods"]], "pytomography.likelihoods.likelihood": [[34, "module-pytomography.likelihoods.likelihood"]], "pytomography.likelihoods.poisson_log_likelihood": [[35, "module-pytomography.likelihoods.poisson_log_likelihood"]], "pytomography.metadata.PET": [[36, "module-pytomography.metadata.PET"]], "pytomography.metadata.PET.pet_tof_metadata": [[37, "module-pytomography.metadata.PET.pet_tof_metadata"]], "pytomography.metadata.PET.petlm_metadata": [[38, "module-pytomography.metadata.PET.petlm_metadata"]], "pytomography.metadata.SPECT": [[39, "module-pytomography.metadata.SPECT"]], "pytomography.metadata.SPECT.spect_metadata": [[40, "module-pytomography.metadata.SPECT.spect_metadata"]], "pytomography.metadata": [[41, "module-pytomography.metadata"]], "pytomography.metadata.metadata": [[42, "module-pytomography.metadata.metadata"]], "pytomography.priors": [[43, "module-pytomography.priors"]], "pytomography.priors.nearest_neighbour": [[44, "module-pytomography.priors.nearest_neighbour"]], "pytomography.priors.prior": [[45, "module-pytomography.priors.prior"]], "pytomography.projectors.PET": [[46, "module-pytomography.projectors.PET"]], "pytomography.projectors.PET.petlm_system_matrix": [[47, "module-pytomography.projectors.PET.petlm_system_matrix"]], "pytomography.projectors.SPECT": [[48, "module-pytomography.projectors.SPECT"]], "pytomography.projectors.SPECT.spect_system_matrix": [[49, "module-pytomography.projectors.SPECT.spect_system_matrix"]], "pytomography.projectors": [[50, "module-pytomography.projectors"]], "pytomography.projectors.shared": [[51, "module-pytomography.projectors.shared"]], "pytomography.projectors.shared.kem_system_matrix": [[52, "module-pytomography.projectors.shared.kem_system_matrix"]], "pytomography.projectors.shared.motion_correction_system_matrix": [[53, "module-pytomography.projectors.shared.motion_correction_system_matrix"]], "pytomography.projectors.system_matrix": [[54, "module-pytomography.projectors.system_matrix"]], "pytomography.transforms.SPECT.attenuation": [[55, "module-pytomography.transforms.SPECT.attenuation"]], "pytomography.transforms.SPECT.cutoff": [[56, "module-pytomography.transforms.SPECT.cutoff"]], "pytomography.transforms.SPECT": [[57, "module-pytomography.transforms.SPECT"]], "pytomography.transforms.SPECT.psf": [[58, "module-pytomography.transforms.SPECT.psf"]], "pytomography.transforms": [[59, "module-pytomography.transforms"]], "pytomography.transforms.shared.filters": [[60, "module-pytomography.transforms.shared.filters"]], "pytomography.transforms.shared": [[61, "module-pytomography.transforms.shared"]], "pytomography.transforms.shared.kem": [[62, "module-pytomography.transforms.shared.kem"]], "pytomography.transforms.shared.motion": [[63, "module-pytomography.transforms.shared.motion"]], "pytomography.transforms.shared.spatial": [[64, "module-pytomography.transforms.shared.spatial"]], "pytomography.transforms.transform": [[65, "module-pytomography.transforms.transform"]], "pytomography.utils.fourier_filters": [[66, "module-pytomography.utils.fourier_filters"]], "pytomography.utils": [[67, "module-pytomography.utils"]], "pytomography.utils.misc": [[68, "module-pytomography.utils.misc"]], "pytomography.utils.nist_data": [[69, "module-pytomography.utils.nist_data"]], "pytomography.utils.scatter": [[70, "module-pytomography.utils.scatter"]], "pytomography.utils.spatial": [[71, "module-pytomography.utils.spatial"]]}, "indexentries": {"diprecon (class in pytomography.algorithms.dip_recon)": [[1, "pytomography.algorithms.dip_recon.DIPRecon"]], "__call__() (pytomography.algorithms.dip_recon.diprecon method)": [[1, "pytomography.algorithms.dip_recon.DIPRecon.__call__"]], "_compute_callback() (pytomography.algorithms.dip_recon.diprecon method)": [[1, "pytomography.algorithms.dip_recon.DIPRecon._compute_callback"]], "module": [[1, "module-pytomography.algorithms.dip_recon"], [2, "module-pytomography.algorithms.fbp"], [3, "module-pytomography.algorithms"], [4, "module-pytomography.algorithms.preconditioned_gradient_ascent"], [5, "module-pytomography.callbacks.callback"], [6, "module-pytomography.callbacks.data_saving"], [7, "module-pytomography.callbacks"], [8, "module-pytomography.callbacks.likelihood"], [9, "module-pytomography"], [10, "module-pytomography.io.CT.attenuation_map"], [11, "module-pytomography.io.CT"], [12, "module-pytomography.io.PET.gate"], [13, "module-pytomography.io.PET"], [14, "module-pytomography.io.PET.petsird"], [15, "module-pytomography.io.PET.prd._binary"], [16, "module-pytomography.io.PET.prd._dtypes"], [17, "module-pytomography.io.PET.prd._ndjson"], [18, "module-pytomography.io.PET.prd.binary"], [19, "module-pytomography.io.PET.prd"], [20, "module-pytomography.io.PET.prd.ndjson"], [21, "module-pytomography.io.PET.prd.protocols"], [22, "module-pytomography.io.PET.prd.types"], [23, "module-pytomography.io.PET.prd.yardl_types"], [24, "module-pytomography.io.SPECT.dicom"], [25, "module-pytomography.io.SPECT"], [26, "module-pytomography.io.SPECT.shared"], [27, "module-pytomography.io.SPECT.simind"], [28, "module-pytomography.io"], [29, "module-pytomography.io.shared.dicom"], [30, "module-pytomography.io.shared.dicom_creation"], [31, "module-pytomography.io.shared"], [32, "module-pytomography.io.shared.interfile"], [33, "module-pytomography.likelihoods"], [34, "module-pytomography.likelihoods.likelihood"], [35, "module-pytomography.likelihoods.poisson_log_likelihood"], [36, "module-pytomography.metadata.PET"], [37, "module-pytomography.metadata.PET.pet_tof_metadata"], [38, "module-pytomography.metadata.PET.petlm_metadata"], [39, "module-pytomography.metadata.SPECT"], [40, "module-pytomography.metadata.SPECT.spect_metadata"], [41, "module-pytomography.metadata"], [42, "module-pytomography.metadata.metadata"], [43, "module-pytomography.priors"], [44, "module-pytomography.priors.nearest_neighbour"], [45, "module-pytomography.priors.prior"], [46, "module-pytomography.projectors.PET"], [47, "module-pytomography.projectors.PET.petlm_system_matrix"], [48, "module-pytomography.projectors.SPECT"], [49, "module-pytomography.projectors.SPECT.spect_system_matrix"], [50, "module-pytomography.projectors"], [51, "module-pytomography.projectors.shared"], [52, "module-pytomography.projectors.shared.kem_system_matrix"], [53, "module-pytomography.projectors.shared.motion_correction_system_matrix"], [54, "module-pytomography.projectors.system_matrix"], [55, "module-pytomography.transforms.SPECT.attenuation"], [56, "module-pytomography.transforms.SPECT.cutoff"], [57, "module-pytomography.transforms.SPECT"], [58, "module-pytomography.transforms.SPECT.psf"], [59, "module-pytomography.transforms"], [60, "module-pytomography.transforms.shared.filters"], [61, "module-pytomography.transforms.shared"], [62, "module-pytomography.transforms.shared.kem"], [63, "module-pytomography.transforms.shared.motion"], [64, "module-pytomography.transforms.shared.spatial"], [65, "module-pytomography.transforms.transform"], [66, "module-pytomography.utils.fourier_filters"], [67, "module-pytomography.utils"], [68, "module-pytomography.utils.misc"], [69, "module-pytomography.utils.nist_data"], [70, "module-pytomography.utils.scatter"], [71, "module-pytomography.utils.spatial"]], "pytomography.algorithms.dip_recon": [[1, "module-pytomography.algorithms.dip_recon"]], "filteredbackprojection (class in pytomography.algorithms.fbp)": [[2, "pytomography.algorithms.fbp.FilteredBackProjection"]], "__call__() (pytomography.algorithms.fbp.filteredbackprojection method)": [[2, "pytomography.algorithms.fbp.FilteredBackProjection.__call__"]], "pytomography.algorithms.fbp": [[2, "module-pytomography.algorithms.fbp"]], "bsrem (class in pytomography.algorithms)": [[3, "pytomography.algorithms.BSREM"]], "diprecon (class in pytomography.algorithms)": [[3, "pytomography.algorithms.DIPRecon"]], "filteredbackprojection (class in pytomography.algorithms)": [[3, "pytomography.algorithms.FilteredBackProjection"]], "kem (class in pytomography.algorithms)": [[3, "pytomography.algorithms.KEM"]], "osem (class in pytomography.algorithms)": [[3, "pytomography.algorithms.OSEM"]], "osmaposl (class in pytomography.algorithms)": [[3, "pytomography.algorithms.OSMAPOSL"]], "preconditionedgradientascentalgorithm (class in pytomography.algorithms)": [[3, "pytomography.algorithms.PreconditionedGradientAscentAlgorithm"]], "__call__() (pytomography.algorithms.diprecon method)": [[3, "pytomography.algorithms.DIPRecon.__call__"]], "__call__() (pytomography.algorithms.filteredbackprojection method)": [[3, "pytomography.algorithms.FilteredBackProjection.__call__"]], "__call__() (pytomography.algorithms.kem method)": [[3, "pytomography.algorithms.KEM.__call__"]], "__call__() (pytomography.algorithms.preconditionedgradientascentalgorithm method)": [[3, "pytomography.algorithms.PreconditionedGradientAscentAlgorithm.__call__"]], "_compute_callback() (pytomography.algorithms.diprecon method)": [[3, "pytomography.algorithms.DIPRecon._compute_callback"]], "_compute_callback() (pytomography.algorithms.kem method)": [[3, "pytomography.algorithms.KEM._compute_callback"]], "_compute_callback() (pytomography.algorithms.preconditionedgradientascentalgorithm method)": [[3, "pytomography.algorithms.PreconditionedGradientAscentAlgorithm._compute_callback"]], "_compute_preconditioner() (pytomography.algorithms.osmaposl method)": [[3, "pytomography.algorithms.OSMAPOSL._compute_preconditioner"]], "_compute_preconditioner() (pytomography.algorithms.preconditionedgradientascentalgorithm method)": [[3, "pytomography.algorithms.PreconditionedGradientAscentAlgorithm._compute_preconditioner"]], "_linear_preconditioner_factor() (pytomography.algorithms.bsrem method)": [[3, "pytomography.algorithms.BSREM._linear_preconditioner_factor"]], "_linear_preconditioner_factor() (pytomography.algorithms.osem method)": [[3, "pytomography.algorithms.OSEM._linear_preconditioner_factor"]], "_set_n_subsets() (pytomography.algorithms.preconditionedgradientascentalgorithm method)": [[3, "pytomography.algorithms.PreconditionedGradientAscentAlgorithm._set_n_subsets"]], "pytomography.algorithms": [[3, "module-pytomography.algorithms"]], "bsrem (class in pytomography.algorithms.preconditioned_gradient_ascent)": [[4, "pytomography.algorithms.preconditioned_gradient_ascent.BSREM"]], "kem (class in pytomography.algorithms.preconditioned_gradient_ascent)": [[4, "pytomography.algorithms.preconditioned_gradient_ascent.KEM"]], "linearpreconditionedgradientascentalgorithm (class in pytomography.algorithms.preconditioned_gradient_ascent)": [[4, "pytomography.algorithms.preconditioned_gradient_ascent.LinearPreconditionedGradientAscentAlgorithm"]], "osem (class in pytomography.algorithms.preconditioned_gradient_ascent)": [[4, "pytomography.algorithms.preconditioned_gradient_ascent.OSEM"]], "osmaposl (class in pytomography.algorithms.preconditioned_gradient_ascent)": [[4, "pytomography.algorithms.preconditioned_gradient_ascent.OSMAPOSL"]], "preconditionedgradientascentalgorithm (class in pytomography.algorithms.preconditioned_gradient_ascent)": [[4, "pytomography.algorithms.preconditioned_gradient_ascent.PreconditionedGradientAscentAlgorithm"]], "__call__() (pytomography.algorithms.preconditioned_gradient_ascent.kem method)": [[4, "pytomography.algorithms.preconditioned_gradient_ascent.KEM.__call__"]], "__call__() (pytomography.algorithms.preconditioned_gradient_ascent.preconditionedgradientascentalgorithm method)": [[4, "pytomography.algorithms.preconditioned_gradient_ascent.PreconditionedGradientAscentAlgorithm.__call__"]], "_compute_callback() (pytomography.algorithms.preconditioned_gradient_ascent.kem method)": [[4, "pytomography.algorithms.preconditioned_gradient_ascent.KEM._compute_callback"]], "_compute_callback() (pytomography.algorithms.preconditioned_gradient_ascent.preconditionedgradientascentalgorithm method)": [[4, "pytomography.algorithms.preconditioned_gradient_ascent.PreconditionedGradientAscentAlgorithm._compute_callback"]], "_compute_preconditioner() (pytomography.algorithms.preconditioned_gradient_ascent.linearpreconditionedgradientascentalgorithm method)": [[4, "pytomography.algorithms.preconditioned_gradient_ascent.LinearPreconditionedGradientAscentAlgorithm._compute_preconditioner"]], "_compute_preconditioner() (pytomography.algorithms.preconditioned_gradient_ascent.osmaposl method)": [[4, "pytomography.algorithms.preconditioned_gradient_ascent.OSMAPOSL._compute_preconditioner"]], "_compute_preconditioner() (pytomography.algorithms.preconditioned_gradient_ascent.preconditionedgradientascentalgorithm method)": [[4, "pytomography.algorithms.preconditioned_gradient_ascent.PreconditionedGradientAscentAlgorithm._compute_preconditioner"]], "_compute_uncertainty_matrix() (pytomography.algorithms.preconditioned_gradient_ascent.linearpreconditionedgradientascentalgorithm method)": [[4, "pytomography.algorithms.preconditioned_gradient_ascent.LinearPreconditionedGradientAscentAlgorithm._compute_uncertainty_matrix"]], "_linear_preconditioner_factor() (pytomography.algorithms.preconditioned_gradient_ascent.bsrem method)": [[4, "pytomography.algorithms.preconditioned_gradient_ascent.BSREM._linear_preconditioner_factor"]], "_linear_preconditioner_factor() (pytomography.algorithms.preconditioned_gradient_ascent.linearpreconditionedgradientascentalgorithm method)": [[4, "pytomography.algorithms.preconditioned_gradient_ascent.LinearPreconditionedGradientAscentAlgorithm._linear_preconditioner_factor"]], "_linear_preconditioner_factor() (pytomography.algorithms.preconditioned_gradient_ascent.osem method)": [[4, "pytomography.algorithms.preconditioned_gradient_ascent.OSEM._linear_preconditioner_factor"]], "_set_n_subsets() (pytomography.algorithms.preconditioned_gradient_ascent.preconditionedgradientascentalgorithm method)": [[4, "pytomography.algorithms.preconditioned_gradient_ascent.PreconditionedGradientAscentAlgorithm._set_n_subsets"]], "compute_uncertainty() (pytomography.algorithms.preconditioned_gradient_ascent.linearpreconditionedgradientascentalgorithm method)": [[4, "pytomography.algorithms.preconditioned_gradient_ascent.LinearPreconditionedGradientAscentAlgorithm.compute_uncertainty"]], "pytomography.algorithms.preconditioned_gradient_ascent": [[4, "module-pytomography.algorithms.preconditioned_gradient_ascent"]], "callback (class in pytomography.callbacks.callback)": [[5, "pytomography.callbacks.callback.Callback"]], "finalize() (pytomography.callbacks.callback.callback method)": [[5, "pytomography.callbacks.callback.Callback.finalize"]], "pytomography.callbacks.callback": [[5, "module-pytomography.callbacks.callback"]], "run() (pytomography.callbacks.callback.callback method)": [[5, "pytomography.callbacks.callback.Callback.run"]], "datastoragecallback (class in pytomography.callbacks.data_saving)": [[6, "pytomography.callbacks.data_saving.DataStorageCallback"]], "finalize() (pytomography.callbacks.data_saving.datastoragecallback method)": [[6, "pytomography.callbacks.data_saving.DataStorageCallback.finalize"]], "pytomography.callbacks.data_saving": [[6, "module-pytomography.callbacks.data_saving"]], "run() (pytomography.callbacks.data_saving.datastoragecallback method)": [[6, "pytomography.callbacks.data_saving.DataStorageCallback.run"]], "callback (class in pytomography.callbacks)": [[7, "pytomography.callbacks.Callback"]], "datastoragecallback (class in pytomography.callbacks)": [[7, "pytomography.callbacks.DataStorageCallback"]], "loglikelihoodcallback (class in pytomography.callbacks)": [[7, "pytomography.callbacks.LogLikelihoodCallback"]], "finalize() (pytomography.callbacks.callback method)": [[7, "pytomography.callbacks.Callback.finalize"]], "finalize() (pytomography.callbacks.datastoragecallback method)": [[7, "pytomography.callbacks.DataStorageCallback.finalize"]], "pytomography.callbacks": [[7, "module-pytomography.callbacks"]], "run() (pytomography.callbacks.callback method)": [[7, "pytomography.callbacks.Callback.run"]], "run() (pytomography.callbacks.datastoragecallback method)": [[7, "pytomography.callbacks.DataStorageCallback.run"]], "run() (pytomography.callbacks.loglikelihoodcallback method)": [[7, "pytomography.callbacks.LogLikelihoodCallback.run"]], "loglikelihoodcallback (class in pytomography.callbacks.likelihood)": [[8, "pytomography.callbacks.likelihood.LogLikelihoodCallback"]], "pytomography.callbacks.likelihood": [[8, "module-pytomography.callbacks.likelihood"]], "run() (pytomography.callbacks.likelihood.loglikelihoodcallback method)": [[8, "pytomography.callbacks.likelihood.LogLikelihoodCallback.run"]], "__version__ (in module pytomography)": [[9, "pytomography.__version__"]], "delta (in module pytomography)": [[9, "pytomography.delta"]], "device (in module pytomography)": [[9, "pytomography.device"]], "dtype (in module pytomography)": [[9, "pytomography.dtype"]], "pytomography": [[9, "module-pytomography"]], "set_device() (in module pytomography)": [[9, "pytomography.set_device"]], "set_dtype() (in module pytomography)": [[9, "pytomography.set_dtype"]], "set_verbose() (in module pytomography)": [[9, "pytomography.set_verbose"]], "verbose (in module pytomography)": [[9, "pytomography.verbose"]], "datadir (in module pytomography.io.ct.attenuation_map)": [[10, "pytomography.io.CT.attenuation_map.DATADIR"]], "file_air (in module pytomography.io.ct.attenuation_map)": [[10, "pytomography.io.CT.attenuation_map.FILE_AIR"]], "file_cbone (in module pytomography.io.ct.attenuation_map)": [[10, "pytomography.io.CT.attenuation_map.FILE_CBONE"]], "file_water (in module pytomography.io.ct.attenuation_map)": [[10, "pytomography.io.CT.attenuation_map.FILE_WATER"]], "hu_to_mu() (in module pytomography.io.ct.attenuation_map)": [[10, "pytomography.io.CT.attenuation_map.HU_to_mu"]], "bilinear_transform() (in module pytomography.io.ct.attenuation_map)": [[10, "pytomography.io.CT.attenuation_map.bilinear_transform"]], "get_ect_from_corticalbone_hu() (in module pytomography.io.ct.attenuation_map)": [[10, "pytomography.io.CT.attenuation_map.get_ECT_from_corticalbone_HU"]], "get_hu2mu_conversion() (in module pytomography.io.ct.attenuation_map)": [[10, "pytomography.io.CT.attenuation_map.get_HU2mu_conversion"]], "get_hu_corticalbone() (in module pytomography.io.ct.attenuation_map)": [[10, "pytomography.io.CT.attenuation_map.get_HU_corticalbone"]], "get_hu_from_spectrum_interp() (in module pytomography.io.ct.attenuation_map)": [[10, "pytomography.io.CT.attenuation_map.get_HU_from_spectrum_interp"]], "get_hu_mu_curve() (in module pytomography.io.ct.attenuation_map)": [[10, "pytomography.io.CT.attenuation_map.get_HU_mu_curve"]], "module_path (in module pytomography.io.ct.attenuation_map)": [[10, "pytomography.io.CT.attenuation_map.module_path"]], "pytomography.io.ct.attenuation_map": [[10, "module-pytomography.io.CT.attenuation_map"]], "get_hu2mu_conversion() (in module pytomography.io.ct)": [[11, "pytomography.io.CT.get_HU2mu_conversion"]], "pytomography.io.ct": [[11, "module-pytomography.io.CT"]], "get_n_components() (in module pytomography.io.pet.gate)": [[12, "pytomography.io.PET.gate.get_N_components"]], "get_aligned_attenuation_map() (in module pytomography.io.pet.gate)": [[12, "pytomography.io.PET.gate.get_aligned_attenuation_map"]], "get_detector_ids() (in module pytomography.io.pet.gate)": [[12, "pytomography.io.PET.gate.get_detector_ids"]], "get_eta_cylinder_calibration() (in module pytomography.io.pet.gate)": [[12, "pytomography.io.PET.gate.get_eta_cylinder_calibration"]], "get_radius() (in module pytomography.io.pet.gate)": [[12, "pytomography.io.PET.gate.get_radius"]], "get_scanner_lut() (in module pytomography.io.pet.gate)": [[12, "pytomography.io.PET.gate.get_scanner_LUT"]], "get_table() (in module pytomography.io.pet.gate)": [[12, "pytomography.io.PET.gate.get_table"]], "pytomography.io.pet.gate": [[12, "module-pytomography.io.PET.gate"]], "remove_events_out_of_bounds() (in module pytomography.io.pet.gate)": [[12, "pytomography.io.PET.gate.remove_events_out_of_bounds"]], "pytomography.io.pet": [[13, "module-pytomography.io.PET"]], "get_tof_meta_from_header() (in module pytomography.io.pet.petsird)": [[14, "pytomography.io.PET.petsird.get_TOF_meta_from_header"]], "get_detector_ids() (in module pytomography.io.pet.petsird)": [[14, "pytomography.io.PET.petsird.get_detector_ids"]], "get_scanner_lut_from_header() (in module pytomography.io.pet.petsird)": [[14, "pytomography.io.PET.petsird.get_scanner_LUT_from_header"]], "pytomography.io.pet.petsird": [[14, "module-pytomography.io.PET.petsird"]], "binaryprotocolreader (class in pytomography.io.pet.prd._binary)": [[15, "pytomography.io.PET.prd._binary.BinaryProtocolReader"]], "binaryprotocolwriter (class in pytomography.io.pet.prd._binary)": [[15, "pytomography.io.PET.prd._binary.BinaryProtocolWriter"]], "boolserializer (class in pytomography.io.pet.prd._binary)": [[15, "pytomography.io.PET.prd._binary.BoolSerializer"]], "current_binary_format_version (in module pytomography.io.pet.prd._binary)": [[15, "pytomography.io.PET.prd._binary.CURRENT_BINARY_FORMAT_VERSION"]], "codedinputstream (class in pytomography.io.pet.prd._binary)": [[15, "pytomography.io.PET.prd._binary.CodedInputStream"]], "codedoutputstream (class in pytomography.io.pet.prd._binary)": [[15, "pytomography.io.PET.prd._binary.CodedOutputStream"]], "complex32serializer (class in pytomography.io.pet.prd._binary)": [[15, "pytomography.io.PET.prd._binary.Complex32Serializer"]], "complex64serializer (class in pytomography.io.pet.prd._binary)": [[15, "pytomography.io.PET.prd._binary.Complex64Serializer"]], "datetime_days_dtype (in module pytomography.io.pet.prd._binary)": [[15, "pytomography.io.PET.prd._binary.DATETIME_DAYS_DTYPE"]], "datetime_nanoseconds_dtype (in module pytomography.io.pet.prd._binary)": [[15, "pytomography.io.PET.prd._binary.DATETIME_NANOSECONDS_DTYPE"]], "dateserializer (class in pytomography.io.pet.prd._binary)": [[15, "pytomography.io.PET.prd._binary.DateSerializer"]], "datetimeserializer (class in pytomography.io.pet.prd._binary)": [[15, "pytomography.io.PET.prd._binary.DateTimeSerializer"]], "dynamicndarrayserializer (class in pytomography.io.pet.prd._binary)": [[15, "pytomography.io.PET.prd._binary.DynamicNDArraySerializer"]], "epoch_datetime (in module pytomography.io.pet.prd._binary)": [[15, "pytomography.io.PET.prd._binary.EPOCH_DATETIME"]], "epoch_ordinal_days (in module pytomography.io.pet.prd._binary)": [[15, "pytomography.io.PET.prd._binary.EPOCH_ORDINAL_DAYS"]], "enumserializer (class in pytomography.io.pet.prd._binary)": [[15, "pytomography.io.PET.prd._binary.EnumSerializer"]], "fixedndarrayserializer (class in pytomography.io.pet.prd._binary)": [[15, "pytomography.io.PET.prd._binary.FixedNDArraySerializer"]], "fixedvectorserializer (class in pytomography.io.pet.prd._binary)": [[15, "pytomography.io.PET.prd._binary.FixedVectorSerializer"]], "float32serializer (class in pytomography.io.pet.prd._binary)": [[15, "pytomography.io.PET.prd._binary.Float32Serializer"]], "float64serializer (class in pytomography.io.pet.prd._binary)": [[15, "pytomography.io.PET.prd._binary.Float64Serializer"]], "int16_max (in module pytomography.io.pet.prd._binary)": [[15, "pytomography.io.PET.prd._binary.INT16_MAX"]], "int16_min (in module pytomography.io.pet.prd._binary)": [[15, "pytomography.io.PET.prd._binary.INT16_MIN"]], "int32_max (in module pytomography.io.pet.prd._binary)": [[15, "pytomography.io.PET.prd._binary.INT32_MAX"]], "int32_min (in module pytomography.io.pet.prd._binary)": [[15, "pytomography.io.PET.prd._binary.INT32_MIN"]], "int64_max (in module pytomography.io.pet.prd._binary)": [[15, "pytomography.io.PET.prd._binary.INT64_MAX"]], "int64_min (in module pytomography.io.pet.prd._binary)": [[15, "pytomography.io.PET.prd._binary.INT64_MIN"]], "int8_max (in module pytomography.io.pet.prd._binary)": [[15, "pytomography.io.PET.prd._binary.INT8_MAX"]], "int8_min (in module pytomography.io.pet.prd._binary)": [[15, "pytomography.io.PET.prd._binary.INT8_MIN"]], "int16serializer (class in pytomography.io.pet.prd._binary)": [[15, "pytomography.io.PET.prd._binary.Int16Serializer"]], "int32serializer (class in pytomography.io.pet.prd._binary)": [[15, "pytomography.io.PET.prd._binary.Int32Serializer"]], "int64serializer (class in pytomography.io.pet.prd._binary)": [[15, "pytomography.io.PET.prd._binary.Int64Serializer"]], "int8serializer (class in pytomography.io.pet.prd._binary)": [[15, "pytomography.io.PET.prd._binary.Int8Serializer"]], "magic_bytes (in module pytomography.io.pet.prd._binary)": [[15, "pytomography.io.PET.prd._binary.MAGIC_BYTES"]], "mapserializer (class in pytomography.io.pet.prd._binary)": [[15, "pytomography.io.PET.prd._binary.MapSerializer"]], "ndarrayserializer (class in pytomography.io.pet.prd._binary)": [[15, "pytomography.io.PET.prd._binary.NDArraySerializer"]], "ndarrayserializerbase (class in pytomography.io.pet.prd._binary)": [[15, "pytomography.io.PET.prd._binary.NDArraySerializerBase"]], "noneserializer (class in pytomography.io.pet.prd._binary)": [[15, "pytomography.io.PET.prd._binary.NoneSerializer"]], "optionalserializer (class in pytomography.io.pet.prd._binary)": [[15, "pytomography.io.PET.prd._binary.OptionalSerializer"]], "recordserializer (class in pytomography.io.pet.prd._binary)": [[15, "pytomography.io.PET.prd._binary.RecordSerializer"]], "sizeserializer (class in pytomography.io.pet.prd._binary)": [[15, "pytomography.io.PET.prd._binary.SizeSerializer"]], "streamserializer (class in pytomography.io.pet.prd._binary)": [[15, "pytomography.io.PET.prd._binary.StreamSerializer"]], "stringserializer (class in pytomography.io.pet.prd._binary)": [[15, "pytomography.io.PET.prd._binary.StringSerializer"]], "structserializer (class in pytomography.io.pet.prd._binary)": [[15, "pytomography.io.PET.prd._binary.StructSerializer"]], "t (in module pytomography.io.pet.prd._binary)": [[15, "pytomography.io.PET.prd._binary.T"]], "tenum (in module pytomography.io.pet.prd._binary)": [[15, "pytomography.io.PET.prd._binary.TEnum"]], "timedelta_nanoseconds_dtype (in module pytomography.io.pet.prd._binary)": [[15, "pytomography.io.PET.prd._binary.TIMEDELTA_NANOSECONDS_DTYPE"]], "tkey (in module pytomography.io.pet.prd._binary)": [[15, "pytomography.io.PET.prd._binary.TKey"]], "tkey_np (in module pytomography.io.pet.prd._binary)": [[15, "pytomography.io.PET.prd._binary.TKey_NP"]], "tvalue (in module pytomography.io.pet.prd._binary)": [[15, "pytomography.io.PET.prd._binary.TValue"]], "tvalue_np (in module pytomography.io.pet.prd._binary)": [[15, "pytomography.io.PET.prd._binary.TValue_NP"]], "t_np (in module pytomography.io.pet.prd._binary)": [[15, "pytomography.io.PET.prd._binary.T_NP"]], "timeserializer (class in pytomography.io.pet.prd._binary)": [[15, "pytomography.io.PET.prd._binary.TimeSerializer"]], "typeserializer (class in pytomography.io.pet.prd._binary)": [[15, "pytomography.io.PET.prd._binary.TypeSerializer"]], "uint16_max (in module pytomography.io.pet.prd._binary)": [[15, "pytomography.io.PET.prd._binary.UINT16_MAX"]], "uint32_max (in module pytomography.io.pet.prd._binary)": [[15, "pytomography.io.PET.prd._binary.UINT32_MAX"]], "uint64_max (in module pytomography.io.pet.prd._binary)": [[15, "pytomography.io.PET.prd._binary.UINT64_MAX"]], "uint8_max (in module pytomography.io.pet.prd._binary)": [[15, "pytomography.io.PET.prd._binary.UINT8_MAX"]], "uint16serializer (class in pytomography.io.pet.prd._binary)": [[15, "pytomography.io.PET.prd._binary.UInt16Serializer"]], "uint32serializer (class in pytomography.io.pet.prd._binary)": [[15, "pytomography.io.PET.prd._binary.UInt32Serializer"]], "uint64serializer (class in pytomography.io.pet.prd._binary)": [[15, "pytomography.io.PET.prd._binary.UInt64Serializer"]], "uint8serializer (class in pytomography.io.pet.prd._binary)": [[15, "pytomography.io.PET.prd._binary.UInt8Serializer"]], "unioncaseprotocol (class in pytomography.io.pet.prd._binary)": [[15, "pytomography.io.PET.prd._binary.UnionCaseProtocol"]], "unionserializer (class in pytomography.io.pet.prd._binary)": [[15, "pytomography.io.PET.prd._binary.UnionSerializer"]], "vectorserializer (class in pytomography.io.pet.prd._binary)": [[15, "pytomography.io.PET.prd._binary.VectorSerializer"]], "_end_stream() (pytomography.io.pet.prd._binary.binaryprotocolwriter method)": [[15, "pytomography.io.PET.prd._binary.BinaryProtocolWriter._end_stream"]], "_fill_buffer() (pytomography.io.pet.prd._binary.codedinputstream method)": [[15, "pytomography.io.PET.prd._binary.CodedInputStream._fill_buffer"]], "_get_dtype_and_subarray_shape() (pytomography.io.pet.prd._binary.ndarrayserializerbase static method)": [[15, "pytomography.io.PET.prd._binary.NDArraySerializerBase._get_dtype_and_subarray_shape"]], "_is_current_array_trivially_serializable() (pytomography.io.pet.prd._binary.ndarrayserializerbase method)": [[15, "pytomography.io.PET.prd._binary.NDArraySerializerBase._is_current_array_trivially_serializable"]], "_read() (pytomography.io.pet.prd._binary.recordserializer method)": [[15, "pytomography.io.PET.prd._binary.RecordSerializer._read"]], "_read_data() (pytomography.io.pet.prd._binary.ndarrayserializerbase method)": [[15, "pytomography.io.PET.prd._binary.NDArraySerializerBase._read_data"]], "_write() (pytomography.io.pet.prd._binary.recordserializer method)": [[15, "pytomography.io.PET.prd._binary.RecordSerializer._write"]], "_write_data() (pytomography.io.pet.prd._binary.ndarrayserializerbase method)": [[15, "pytomography.io.PET.prd._binary.NDArraySerializerBase._write_data"]], "bool_serializer (in module pytomography.io.pet.prd._binary)": [[15, "pytomography.io.PET.prd._binary.bool_serializer"]], "close() (pytomography.io.pet.prd._binary.binaryprotocolreader method)": [[15, "pytomography.io.PET.prd._binary.BinaryProtocolReader.close"]], "close() (pytomography.io.pet.prd._binary.binaryprotocolwriter method)": [[15, "pytomography.io.PET.prd._binary.BinaryProtocolWriter.close"]], "close() (pytomography.io.pet.prd._binary.codedinputstream method)": [[15, "pytomography.io.PET.prd._binary.CodedInputStream.close"]], "close() (pytomography.io.pet.prd._binary.codedoutputstream method)": [[15, "pytomography.io.PET.prd._binary.CodedOutputStream.close"]], "complexfloat32_serializer (in module pytomography.io.pet.prd._binary)": [[15, "pytomography.io.PET.prd._binary.complexfloat32_serializer"]], "complexfloat64_serializer (in module pytomography.io.pet.prd._binary)": [[15, "pytomography.io.PET.prd._binary.complexfloat64_serializer"]], "date_serializer (in module pytomography.io.pet.prd._binary)": [[15, "pytomography.io.PET.prd._binary.date_serializer"]], "datetime_serializer (in module pytomography.io.pet.prd._binary)": [[15, "pytomography.io.PET.prd._binary.datetime_serializer"]], "ensure_capacity() (pytomography.io.pet.prd._binary.codedoutputstream method)": [[15, "pytomography.io.PET.prd._binary.CodedOutputStream.ensure_capacity"]], "float32_serializer (in module pytomography.io.pet.prd._binary)": [[15, "pytomography.io.PET.prd._binary.float32_serializer"]], "float64_serializer (in module pytomography.io.pet.prd._binary)": [[15, "pytomography.io.PET.prd._binary.float64_serializer"]], "flush() (pytomography.io.pet.prd._binary.codedoutputstream method)": [[15, "pytomography.io.PET.prd._binary.CodedOutputStream.flush"]], "index (pytomography.io.pet.prd._binary.unioncaseprotocol attribute)": [[15, "pytomography.io.PET.prd._binary.UnionCaseProtocol.index"]], "int16_serializer (in module pytomography.io.pet.prd._binary)": [[15, "pytomography.io.PET.prd._binary.int16_serializer"]], "int32_serializer (in module pytomography.io.pet.prd._binary)": [[15, "pytomography.io.PET.prd._binary.int32_serializer"]], "int32_struct (in module pytomography.io.pet.prd._binary)": [[15, "pytomography.io.PET.prd._binary.int32_struct"]], "int64_serializer (in module pytomography.io.pet.prd._binary)": [[15, "pytomography.io.PET.prd._binary.int64_serializer"]], "int8_serializer (in module pytomography.io.pet.prd._binary)": [[15, "pytomography.io.PET.prd._binary.int8_serializer"]], "is_trivially_serializable() (pytomography.io.pet.prd._binary.complex32serializer method)": [[15, "pytomography.io.PET.prd._binary.Complex32Serializer.is_trivially_serializable"]], "is_trivially_serializable() (pytomography.io.pet.prd._binary.complex64serializer method)": [[15, "pytomography.io.PET.prd._binary.Complex64Serializer.is_trivially_serializable"]], "is_trivially_serializable() (pytomography.io.pet.prd._binary.enumserializer method)": [[15, "pytomography.io.PET.prd._binary.EnumSerializer.is_trivially_serializable"]], "is_trivially_serializable() (pytomography.io.pet.prd._binary.fixedndarrayserializer method)": [[15, "pytomography.io.PET.prd._binary.FixedNDArraySerializer.is_trivially_serializable"]], "is_trivially_serializable() (pytomography.io.pet.prd._binary.fixedvectorserializer method)": [[15, "pytomography.io.PET.prd._binary.FixedVectorSerializer.is_trivially_serializable"]], "is_trivially_serializable() (pytomography.io.pet.prd._binary.float32serializer method)": [[15, "pytomography.io.PET.prd._binary.Float32Serializer.is_trivially_serializable"]], "is_trivially_serializable() (pytomography.io.pet.prd._binary.float64serializer method)": [[15, "pytomography.io.PET.prd._binary.Float64Serializer.is_trivially_serializable"]], "is_trivially_serializable() (pytomography.io.pet.prd._binary.int8serializer method)": [[15, "pytomography.io.PET.prd._binary.Int8Serializer.is_trivially_serializable"]], "is_trivially_serializable() (pytomography.io.pet.prd._binary.optionalserializer method)": [[15, "pytomography.io.PET.prd._binary.OptionalSerializer.is_trivially_serializable"]], "is_trivially_serializable() (pytomography.io.pet.prd._binary.recordserializer method)": [[15, "pytomography.io.PET.prd._binary.RecordSerializer.is_trivially_serializable"]], "is_trivially_serializable() (pytomography.io.pet.prd._binary.typeserializer method)": [[15, "pytomography.io.PET.prd._binary.TypeSerializer.is_trivially_serializable"]], "is_trivially_serializable() (pytomography.io.pet.prd._binary.uint8serializer method)": [[15, "pytomography.io.PET.prd._binary.UInt8Serializer.is_trivially_serializable"]], "none_serializer (in module pytomography.io.pet.prd._binary)": [[15, "pytomography.io.PET.prd._binary.none_serializer"]], "overall_dtype() (pytomography.io.pet.prd._binary.typeserializer method)": [[15, "pytomography.io.PET.prd._binary.TypeSerializer.overall_dtype"]], "pytomography.io.pet.prd._binary": [[15, "module-pytomography.io.PET.prd._binary"]], "read() (pytomography.io.pet.prd._binary.boolserializer method)": [[15, "pytomography.io.PET.prd._binary.BoolSerializer.read"]], "read() (pytomography.io.pet.prd._binary.codedinputstream method)": [[15, "pytomography.io.PET.prd._binary.CodedInputStream.read"]], "read() (pytomography.io.pet.prd._binary.complex32serializer method)": [[15, "pytomography.io.PET.prd._binary.Complex32Serializer.read"]], "read() (pytomography.io.pet.prd._binary.complex64serializer method)": [[15, "pytomography.io.PET.prd._binary.Complex64Serializer.read"]], "read() (pytomography.io.pet.prd._binary.dateserializer method)": [[15, "pytomography.io.PET.prd._binary.DateSerializer.read"]], "read() (pytomography.io.pet.prd._binary.datetimeserializer method)": [[15, "pytomography.io.PET.prd._binary.DateTimeSerializer.read"]], "read() (pytomography.io.pet.prd._binary.dynamicndarrayserializer method)": [[15, "pytomography.io.PET.prd._binary.DynamicNDArraySerializer.read"]], "read() (pytomography.io.pet.prd._binary.enumserializer method)": [[15, "pytomography.io.PET.prd._binary.EnumSerializer.read"]], "read() (pytomography.io.pet.prd._binary.fixedndarrayserializer method)": [[15, "pytomography.io.PET.prd._binary.FixedNDArraySerializer.read"]], "read() (pytomography.io.pet.prd._binary.fixedvectorserializer method)": [[15, "pytomography.io.PET.prd._binary.FixedVectorSerializer.read"]], "read() (pytomography.io.pet.prd._binary.float32serializer method)": [[15, "pytomography.io.PET.prd._binary.Float32Serializer.read"]], "read() (pytomography.io.pet.prd._binary.float64serializer method)": [[15, "pytomography.io.PET.prd._binary.Float64Serializer.read"]], "read() (pytomography.io.pet.prd._binary.int16serializer method)": [[15, "pytomography.io.PET.prd._binary.Int16Serializer.read"]], "read() (pytomography.io.pet.prd._binary.int32serializer method)": [[15, "pytomography.io.PET.prd._binary.Int32Serializer.read"]], "read() (pytomography.io.pet.prd._binary.int64serializer method)": [[15, "pytomography.io.PET.prd._binary.Int64Serializer.read"]], "read() (pytomography.io.pet.prd._binary.int8serializer method)": [[15, "pytomography.io.PET.prd._binary.Int8Serializer.read"]], "read() (pytomography.io.pet.prd._binary.mapserializer method)": [[15, "pytomography.io.PET.prd._binary.MapSerializer.read"]], "read() (pytomography.io.pet.prd._binary.ndarrayserializer method)": [[15, "pytomography.io.PET.prd._binary.NDArraySerializer.read"]], "read() (pytomography.io.pet.prd._binary.noneserializer method)": [[15, "pytomography.io.PET.prd._binary.NoneSerializer.read"]], "read() (pytomography.io.pet.prd._binary.optionalserializer method)": [[15, "pytomography.io.PET.prd._binary.OptionalSerializer.read"]], "read() (pytomography.io.pet.prd._binary.sizeserializer method)": [[15, "pytomography.io.PET.prd._binary.SizeSerializer.read"]], "read() (pytomography.io.pet.prd._binary.streamserializer method)": [[15, "pytomography.io.PET.prd._binary.StreamSerializer.read"]], "read() (pytomography.io.pet.prd._binary.stringserializer method)": [[15, "pytomography.io.PET.prd._binary.StringSerializer.read"]], "read() (pytomography.io.pet.prd._binary.structserializer method)": [[15, "pytomography.io.PET.prd._binary.StructSerializer.read"]], "read() (pytomography.io.pet.prd._binary.timeserializer method)": [[15, "pytomography.io.PET.prd._binary.TimeSerializer.read"]], "read() (pytomography.io.pet.prd._binary.typeserializer method)": [[15, "pytomography.io.PET.prd._binary.TypeSerializer.read"]], "read() (pytomography.io.pet.prd._binary.uint16serializer method)": [[15, "pytomography.io.PET.prd._binary.UInt16Serializer.read"]], "read() (pytomography.io.pet.prd._binary.uint32serializer method)": [[15, "pytomography.io.PET.prd._binary.UInt32Serializer.read"]], "read() (pytomography.io.pet.prd._binary.uint64serializer method)": [[15, "pytomography.io.PET.prd._binary.UInt64Serializer.read"]], "read() (pytomography.io.pet.prd._binary.uint8serializer method)": [[15, "pytomography.io.PET.prd._binary.UInt8Serializer.read"]], "read() (pytomography.io.pet.prd._binary.unionserializer method)": [[15, "pytomography.io.PET.prd._binary.UnionSerializer.read"]], "read() (pytomography.io.pet.prd._binary.vectorserializer method)": [[15, "pytomography.io.PET.prd._binary.VectorSerializer.read"]], "read_byte() (pytomography.io.pet.prd._binary.codedinputstream method)": [[15, "pytomography.io.PET.prd._binary.CodedInputStream.read_byte"]], "read_bytearray() (pytomography.io.pet.prd._binary.codedinputstream method)": [[15, "pytomography.io.PET.prd._binary.CodedInputStream.read_bytearray"]], "read_fixed_int32() (in module pytomography.io.pet.prd._binary)": [[15, "pytomography.io.PET.prd._binary.read_fixed_int32"]], "read_numpy() (pytomography.io.pet.prd._binary.boolserializer method)": [[15, "pytomography.io.PET.prd._binary.BoolSerializer.read_numpy"]], "read_numpy() (pytomography.io.pet.prd._binary.complex32serializer method)": [[15, "pytomography.io.PET.prd._binary.Complex32Serializer.read_numpy"]], "read_numpy() (pytomography.io.pet.prd._binary.complex64serializer method)": [[15, "pytomography.io.PET.prd._binary.Complex64Serializer.read_numpy"]], "read_numpy() (pytomography.io.pet.prd._binary.dateserializer method)": [[15, "pytomography.io.PET.prd._binary.DateSerializer.read_numpy"]], "read_numpy() (pytomography.io.pet.prd._binary.datetimeserializer method)": [[15, "pytomography.io.PET.prd._binary.DateTimeSerializer.read_numpy"]], "read_numpy() (pytomography.io.pet.prd._binary.dynamicndarrayserializer method)": [[15, "pytomography.io.PET.prd._binary.DynamicNDArraySerializer.read_numpy"]], "read_numpy() (pytomography.io.pet.prd._binary.enumserializer method)": [[15, "pytomography.io.PET.prd._binary.EnumSerializer.read_numpy"]], "read_numpy() (pytomography.io.pet.prd._binary.fixedndarrayserializer method)": [[15, "pytomography.io.PET.prd._binary.FixedNDArraySerializer.read_numpy"]], "read_numpy() (pytomography.io.pet.prd._binary.fixedvectorserializer method)": [[15, "pytomography.io.PET.prd._binary.FixedVectorSerializer.read_numpy"]], "read_numpy() (pytomography.io.pet.prd._binary.int16serializer method)": [[15, "pytomography.io.PET.prd._binary.Int16Serializer.read_numpy"]], "read_numpy() (pytomography.io.pet.prd._binary.int32serializer method)": [[15, "pytomography.io.PET.prd._binary.Int32Serializer.read_numpy"]], "read_numpy() (pytomography.io.pet.prd._binary.int64serializer method)": [[15, "pytomography.io.PET.prd._binary.Int64Serializer.read_numpy"]], "read_numpy() (pytomography.io.pet.prd._binary.mapserializer method)": [[15, "pytomography.io.PET.prd._binary.MapSerializer.read_numpy"]], "read_numpy() (pytomography.io.pet.prd._binary.ndarrayserializer method)": [[15, "pytomography.io.PET.prd._binary.NDArraySerializer.read_numpy"]], "read_numpy() (pytomography.io.pet.prd._binary.noneserializer method)": [[15, "pytomography.io.PET.prd._binary.NoneSerializer.read_numpy"]], "read_numpy() (pytomography.io.pet.prd._binary.optionalserializer method)": [[15, "pytomography.io.PET.prd._binary.OptionalSerializer.read_numpy"]], "read_numpy() (pytomography.io.pet.prd._binary.recordserializer method)": [[15, "pytomography.io.PET.prd._binary.RecordSerializer.read_numpy"]], "read_numpy() (pytomography.io.pet.prd._binary.sizeserializer method)": [[15, "pytomography.io.PET.prd._binary.SizeSerializer.read_numpy"]], "read_numpy() (pytomography.io.pet.prd._binary.streamserializer method)": [[15, "pytomography.io.PET.prd._binary.StreamSerializer.read_numpy"]], "read_numpy() (pytomography.io.pet.prd._binary.stringserializer method)": [[15, "pytomography.io.PET.prd._binary.StringSerializer.read_numpy"]], "read_numpy() (pytomography.io.pet.prd._binary.structserializer method)": [[15, "pytomography.io.PET.prd._binary.StructSerializer.read_numpy"]], "read_numpy() (pytomography.io.pet.prd._binary.timeserializer method)": [[15, "pytomography.io.PET.prd._binary.TimeSerializer.read_numpy"]], "read_numpy() (pytomography.io.pet.prd._binary.typeserializer method)": [[15, "pytomography.io.PET.prd._binary.TypeSerializer.read_numpy"]], "read_numpy() (pytomography.io.pet.prd._binary.uint16serializer method)": [[15, "pytomography.io.PET.prd._binary.UInt16Serializer.read_numpy"]], "read_numpy() (pytomography.io.pet.prd._binary.uint32serializer method)": [[15, "pytomography.io.PET.prd._binary.UInt32Serializer.read_numpy"]], "read_numpy() (pytomography.io.pet.prd._binary.uint64serializer method)": [[15, "pytomography.io.PET.prd._binary.UInt64Serializer.read_numpy"]], "read_numpy() (pytomography.io.pet.prd._binary.unionserializer method)": [[15, "pytomography.io.PET.prd._binary.UnionSerializer.read_numpy"]], "read_numpy() (pytomography.io.pet.prd._binary.vectorserializer method)": [[15, "pytomography.io.PET.prd._binary.VectorSerializer.read_numpy"]], "read_signed_varint() (pytomography.io.pet.prd._binary.codedinputstream method)": [[15, "pytomography.io.PET.prd._binary.CodedInputStream.read_signed_varint"]], "read_unsigned_varint() (pytomography.io.pet.prd._binary.codedinputstream method)": [[15, "pytomography.io.PET.prd._binary.CodedInputStream.read_unsigned_varint"]], "read_view() (pytomography.io.pet.prd._binary.codedinputstream method)": [[15, "pytomography.io.PET.prd._binary.CodedInputStream.read_view"]], "size_serializer (in module pytomography.io.pet.prd._binary)": [[15, "pytomography.io.PET.prd._binary.size_serializer"]], "string_serializer (in module pytomography.io.pet.prd._binary)": [[15, "pytomography.io.PET.prd._binary.string_serializer"]], "struct_format_str() (pytomography.io.pet.prd._binary.structserializer method)": [[15, "pytomography.io.PET.prd._binary.StructSerializer.struct_format_str"]], "struct_format_str() (pytomography.io.pet.prd._binary.typeserializer method)": [[15, "pytomography.io.PET.prd._binary.TypeSerializer.struct_format_str"]], "time_serializer (in module pytomography.io.pet.prd._binary)": [[15, "pytomography.io.PET.prd._binary.time_serializer"]], "uint16_serializer (in module pytomography.io.pet.prd._binary)": [[15, "pytomography.io.PET.prd._binary.uint16_serializer"]], "uint32_serializer (in module pytomography.io.pet.prd._binary)": [[15, "pytomography.io.PET.prd._binary.uint32_serializer"]], "uint64_serializer (in module pytomography.io.pet.prd._binary)": [[15, "pytomography.io.PET.prd._binary.uint64_serializer"]], "uint8_serializer (in module pytomography.io.pet.prd._binary)": [[15, "pytomography.io.PET.prd._binary.uint8_serializer"]], "value (pytomography.io.pet.prd._binary.unioncaseprotocol attribute)": [[15, "pytomography.io.PET.prd._binary.UnionCaseProtocol.value"]], "write() (pytomography.io.pet.prd._binary.codedoutputstream method)": [[15, "pytomography.io.PET.prd._binary.CodedOutputStream.write"]], "write() (pytomography.io.pet.prd._binary.complex32serializer method)": [[15, "pytomography.io.PET.prd._binary.Complex32Serializer.write"]], "write() (pytomography.io.pet.prd._binary.complex64serializer method)": [[15, "pytomography.io.PET.prd._binary.Complex64Serializer.write"]], "write() (pytomography.io.pet.prd._binary.dateserializer method)": [[15, "pytomography.io.PET.prd._binary.DateSerializer.write"]], "write() (pytomography.io.pet.prd._binary.datetimeserializer method)": [[15, "pytomography.io.PET.prd._binary.DateTimeSerializer.write"]], "write() (pytomography.io.pet.prd._binary.dynamicndarrayserializer method)": [[15, "pytomography.io.PET.prd._binary.DynamicNDArraySerializer.write"]], "write() (pytomography.io.pet.prd._binary.enumserializer method)": [[15, "pytomography.io.PET.prd._binary.EnumSerializer.write"]], "write() (pytomography.io.pet.prd._binary.fixedndarrayserializer method)": [[15, "pytomography.io.PET.prd._binary.FixedNDArraySerializer.write"]], "write() (pytomography.io.pet.prd._binary.fixedvectorserializer method)": [[15, "pytomography.io.PET.prd._binary.FixedVectorSerializer.write"]], "write() (pytomography.io.pet.prd._binary.int16serializer method)": [[15, "pytomography.io.PET.prd._binary.Int16Serializer.write"]], "write() (pytomography.io.pet.prd._binary.int32serializer method)": [[15, "pytomography.io.PET.prd._binary.Int32Serializer.write"]], "write() (pytomography.io.pet.prd._binary.int64serializer method)": [[15, "pytomography.io.PET.prd._binary.Int64Serializer.write"]], "write() (pytomography.io.pet.prd._binary.mapserializer method)": [[15, "pytomography.io.PET.prd._binary.MapSerializer.write"]], "write() (pytomography.io.pet.prd._binary.ndarrayserializer method)": [[15, "pytomography.io.PET.prd._binary.NDArraySerializer.write"]], "write() (pytomography.io.pet.prd._binary.noneserializer method)": [[15, "pytomography.io.PET.prd._binary.NoneSerializer.write"]], "write() (pytomography.io.pet.prd._binary.optionalserializer method)": [[15, "pytomography.io.PET.prd._binary.OptionalSerializer.write"]], "write() (pytomography.io.pet.prd._binary.sizeserializer method)": [[15, "pytomography.io.PET.prd._binary.SizeSerializer.write"]], "write() (pytomography.io.pet.prd._binary.streamserializer method)": [[15, "pytomography.io.PET.prd._binary.StreamSerializer.write"]], "write() (pytomography.io.pet.prd._binary.stringserializer method)": [[15, "pytomography.io.PET.prd._binary.StringSerializer.write"]], "write() (pytomography.io.pet.prd._binary.structserializer method)": [[15, "pytomography.io.PET.prd._binary.StructSerializer.write"]], "write() (pytomography.io.pet.prd._binary.timeserializer method)": [[15, "pytomography.io.PET.prd._binary.TimeSerializer.write"]], "write() (pytomography.io.pet.prd._binary.typeserializer method)": [[15, "pytomography.io.PET.prd._binary.TypeSerializer.write"]], "write() (pytomography.io.pet.prd._binary.uint16serializer method)": [[15, "pytomography.io.PET.prd._binary.UInt16Serializer.write"]], "write() (pytomography.io.pet.prd._binary.uint32serializer method)": [[15, "pytomography.io.PET.prd._binary.UInt32Serializer.write"]], "write() (pytomography.io.pet.prd._binary.uint64serializer method)": [[15, "pytomography.io.PET.prd._binary.UInt64Serializer.write"]], "write() (pytomography.io.pet.prd._binary.unionserializer method)": [[15, "pytomography.io.PET.prd._binary.UnionSerializer.write"]], "write() (pytomography.io.pet.prd._binary.vectorserializer method)": [[15, "pytomography.io.PET.prd._binary.VectorSerializer.write"]], "write_byte_no_check() (pytomography.io.pet.prd._binary.codedoutputstream method)": [[15, "pytomography.io.PET.prd._binary.CodedOutputStream.write_byte_no_check"]], "write_bytes() (pytomography.io.pet.prd._binary.codedoutputstream method)": [[15, "pytomography.io.PET.prd._binary.CodedOutputStream.write_bytes"]], "write_bytes_directly() (pytomography.io.pet.prd._binary.codedoutputstream method)": [[15, "pytomography.io.PET.prd._binary.CodedOutputStream.write_bytes_directly"]], "write_fixed_int32() (in module pytomography.io.pet.prd._binary)": [[15, "pytomography.io.PET.prd._binary.write_fixed_int32"]], "write_numpy() (pytomography.io.pet.prd._binary.dateserializer method)": [[15, "pytomography.io.PET.prd._binary.DateSerializer.write_numpy"]], "write_numpy() (pytomography.io.pet.prd._binary.datetimeserializer method)": [[15, "pytomography.io.PET.prd._binary.DateTimeSerializer.write_numpy"]], "write_numpy() (pytomography.io.pet.prd._binary.dynamicndarrayserializer method)": [[15, "pytomography.io.PET.prd._binary.DynamicNDArraySerializer.write_numpy"]], "write_numpy() (pytomography.io.pet.prd._binary.enumserializer method)": [[15, "pytomography.io.PET.prd._binary.EnumSerializer.write_numpy"]], "write_numpy() (pytomography.io.pet.prd._binary.fixedndarrayserializer method)": [[15, "pytomography.io.PET.prd._binary.FixedNDArraySerializer.write_numpy"]], "write_numpy() (pytomography.io.pet.prd._binary.fixedvectorserializer method)": [[15, "pytomography.io.PET.prd._binary.FixedVectorSerializer.write_numpy"]], "write_numpy() (pytomography.io.pet.prd._binary.int16serializer method)": [[15, "pytomography.io.PET.prd._binary.Int16Serializer.write_numpy"]], "write_numpy() (pytomography.io.pet.prd._binary.int32serializer method)": [[15, "pytomography.io.PET.prd._binary.Int32Serializer.write_numpy"]], "write_numpy() (pytomography.io.pet.prd._binary.int64serializer method)": [[15, "pytomography.io.PET.prd._binary.Int64Serializer.write_numpy"]], "write_numpy() (pytomography.io.pet.prd._binary.mapserializer method)": [[15, "pytomography.io.PET.prd._binary.MapSerializer.write_numpy"]], "write_numpy() (pytomography.io.pet.prd._binary.ndarrayserializer method)": [[15, "pytomography.io.PET.prd._binary.NDArraySerializer.write_numpy"]], "write_numpy() (pytomography.io.pet.prd._binary.noneserializer method)": [[15, "pytomography.io.PET.prd._binary.NoneSerializer.write_numpy"]], "write_numpy() (pytomography.io.pet.prd._binary.optionalserializer method)": [[15, "pytomography.io.PET.prd._binary.OptionalSerializer.write_numpy"]], "write_numpy() (pytomography.io.pet.prd._binary.sizeserializer method)": [[15, "pytomography.io.PET.prd._binary.SizeSerializer.write_numpy"]], "write_numpy() (pytomography.io.pet.prd._binary.streamserializer method)": [[15, "pytomography.io.PET.prd._binary.StreamSerializer.write_numpy"]], "write_numpy() (pytomography.io.pet.prd._binary.stringserializer method)": [[15, "pytomography.io.PET.prd._binary.StringSerializer.write_numpy"]], "write_numpy() (pytomography.io.pet.prd._binary.structserializer method)": [[15, "pytomography.io.PET.prd._binary.StructSerializer.write_numpy"]], "write_numpy() (pytomography.io.pet.prd._binary.timeserializer method)": [[15, "pytomography.io.PET.prd._binary.TimeSerializer.write_numpy"]], "write_numpy() (pytomography.io.pet.prd._binary.typeserializer method)": [[15, "pytomography.io.PET.prd._binary.TypeSerializer.write_numpy"]], "write_numpy() (pytomography.io.pet.prd._binary.uint16serializer method)": [[15, "pytomography.io.PET.prd._binary.UInt16Serializer.write_numpy"]], "write_numpy() (pytomography.io.pet.prd._binary.uint32serializer method)": [[15, "pytomography.io.PET.prd._binary.UInt32Serializer.write_numpy"]], "write_numpy() (pytomography.io.pet.prd._binary.uint64serializer method)": [[15, "pytomography.io.PET.prd._binary.UInt64Serializer.write_numpy"]], "write_numpy() (pytomography.io.pet.prd._binary.unionserializer method)": [[15, "pytomography.io.PET.prd._binary.UnionSerializer.write_numpy"]], "write_numpy() (pytomography.io.pet.prd._binary.vectorserializer method)": [[15, "pytomography.io.PET.prd._binary.VectorSerializer.write_numpy"]], "write_signed_varint() (pytomography.io.pet.prd._binary.codedoutputstream method)": [[15, "pytomography.io.PET.prd._binary.CodedOutputStream.write_signed_varint"]], "write_unsigned_varint() (pytomography.io.pet.prd._binary.codedoutputstream method)": [[15, "pytomography.io.PET.prd._binary.CodedOutputStream.write_unsigned_varint"]], "zigzag_decode() (pytomography.io.pet.prd._binary.codedinputstream method)": [[15, "pytomography.io.PET.prd._binary.CodedInputStream.zigzag_decode"]], "zigzag_encode() (pytomography.io.pet.prd._binary.codedoutputstream method)": [[15, "pytomography.io.PET.prd._binary.CodedOutputStream.zigzag_encode"]], "make_get_dtype_func() (in module pytomography.io.pet.prd._dtypes)": [[16, "pytomography.io.PET.prd._dtypes.make_get_dtype_func"]], "pytomography.io.pet.prd._dtypes": [[16, "module-pytomography.io.PET.prd._dtypes"]], "boolconverter (class in pytomography.io.pet.prd._ndjson)": [[17, "pytomography.io.PET.prd._ndjson.BoolConverter"]], "current_ndjson_format_version (in module pytomography.io.pet.prd._ndjson)": [[17, "pytomography.io.PET.prd._ndjson.CURRENT_NDJSON_FORMAT_VERSION"]], "complex32converter (class in pytomography.io.pet.prd._ndjson)": [[17, "pytomography.io.PET.prd._ndjson.Complex32Converter"]], "complex64converter (class in pytomography.io.pet.prd._ndjson)": [[17, "pytomography.io.PET.prd._ndjson.Complex64Converter"]], "dateconverter (class in pytomography.io.pet.prd._ndjson)": [[17, "pytomography.io.PET.prd._ndjson.DateConverter"]], "datetimeconverter (class in pytomography.io.pet.prd._ndjson)": [[17, "pytomography.io.PET.prd._ndjson.DateTimeConverter"]], "dynamicndarrayconverter (class in pytomography.io.pet.prd._ndjson)": [[17, "pytomography.io.PET.prd._ndjson.DynamicNDArrayConverter"]], "enumconverter (class in pytomography.io.pet.prd._ndjson)": [[17, "pytomography.io.PET.prd._ndjson.EnumConverter"]], "fixedndarrayconverter (class in pytomography.io.pet.prd._ndjson)": [[17, "pytomography.io.PET.prd._ndjson.FixedNDArrayConverter"]], "fixedvectorconverter (class in pytomography.io.pet.prd._ndjson)": [[17, "pytomography.io.PET.prd._ndjson.FixedVectorConverter"]], "flagsconverter (class in pytomography.io.pet.prd._ndjson)": [[17, "pytomography.io.PET.prd._ndjson.FlagsConverter"]], "float32converter (class in pytomography.io.pet.prd._ndjson)": [[17, "pytomography.io.PET.prd._ndjson.Float32Converter"]], "float64converter (class in pytomography.io.pet.prd._ndjson)": [[17, "pytomography.io.PET.prd._ndjson.Float64Converter"]], "int16_max (in module pytomography.io.pet.prd._ndjson)": [[17, "pytomography.io.PET.prd._ndjson.INT16_MAX"]], "int16_min (in module pytomography.io.pet.prd._ndjson)": [[17, "pytomography.io.PET.prd._ndjson.INT16_MIN"]], "int32_max (in module pytomography.io.pet.prd._ndjson)": [[17, "pytomography.io.PET.prd._ndjson.INT32_MAX"]], "int32_min (in module pytomography.io.pet.prd._ndjson)": [[17, "pytomography.io.PET.prd._ndjson.INT32_MIN"]], "int64_max (in module pytomography.io.pet.prd._ndjson)": [[17, "pytomography.io.PET.prd._ndjson.INT64_MAX"]], "int64_min (in module pytomography.io.pet.prd._ndjson)": [[17, "pytomography.io.PET.prd._ndjson.INT64_MIN"]], "int8_max (in module pytomography.io.pet.prd._ndjson)": [[17, "pytomography.io.PET.prd._ndjson.INT8_MAX"]], "int8_min (in module pytomography.io.pet.prd._ndjson)": [[17, "pytomography.io.PET.prd._ndjson.INT8_MIN"]], "int16converter (class in pytomography.io.pet.prd._ndjson)": [[17, "pytomography.io.PET.prd._ndjson.Int16Converter"]], "int32converter (class in pytomography.io.pet.prd._ndjson)": [[17, "pytomography.io.PET.prd._ndjson.Int32Converter"]], "int64converter (class in pytomography.io.pet.prd._ndjson)": [[17, "pytomography.io.PET.prd._ndjson.Int64Converter"]], "int8converter (class in pytomography.io.pet.prd._ndjson)": [[17, "pytomography.io.PET.prd._ndjson.Int8Converter"]], "jsonconverter (class in pytomography.io.pet.prd._ndjson)": [[17, "pytomography.io.PET.prd._ndjson.JsonConverter"]], "missing_sentinel (in module pytomography.io.pet.prd._ndjson)": [[17, "pytomography.io.PET.prd._ndjson.MISSING_SENTINEL"]], "mapconverter (class in pytomography.io.pet.prd._ndjson)": [[17, "pytomography.io.PET.prd._ndjson.MapConverter"]], "ndarrayconverter (class in pytomography.io.pet.prd._ndjson)": [[17, "pytomography.io.PET.prd._ndjson.NDArrayConverter"]], "ndarrayconverterbase (class in pytomography.io.pet.prd._ndjson)": [[17, "pytomography.io.PET.prd._ndjson.NDArrayConverterBase"]], "ndjsonprotocolreader (class in pytomography.io.pet.prd._ndjson)": [[17, "pytomography.io.PET.prd._ndjson.NDJsonProtocolReader"]], "ndjsonprotocolwriter (class in pytomography.io.pet.prd._ndjson)": [[17, "pytomography.io.PET.prd._ndjson.NDJsonProtocolWriter"]], "optionalconverter (class in pytomography.io.pet.prd._ndjson)": [[17, "pytomography.io.PET.prd._ndjson.OptionalConverter"]], "sizeconverter (class in pytomography.io.pet.prd._ndjson)": [[17, "pytomography.io.PET.prd._ndjson.SizeConverter"]], "stringconverter (class in pytomography.io.pet.prd._ndjson)": [[17, "pytomography.io.PET.prd._ndjson.StringConverter"]], "t (in module pytomography.io.pet.prd._ndjson)": [[17, "pytomography.io.PET.prd._ndjson.T"]], "tenum (in module pytomography.io.pet.prd._ndjson)": [[17, "pytomography.io.PET.prd._ndjson.TEnum"]], "tflag (in module pytomography.io.pet.prd._ndjson)": [[17, "pytomography.io.PET.prd._ndjson.TFlag"]], "tkey (in module pytomography.io.pet.prd._ndjson)": [[17, "pytomography.io.PET.prd._ndjson.TKey"]], "tkey_np (in module pytomography.io.pet.prd._ndjson)": [[17, "pytomography.io.PET.prd._ndjson.TKey_NP"]], "tvalue (in module pytomography.io.pet.prd._ndjson)": [[17, "pytomography.io.PET.prd._ndjson.TValue"]], "tvalue_np (in module pytomography.io.pet.prd._ndjson)": [[17, "pytomography.io.PET.prd._ndjson.TValue_NP"]], "t_np (in module pytomography.io.pet.prd._ndjson)": [[17, "pytomography.io.PET.prd._ndjson.T_NP"]], "timeconverter (class in pytomography.io.pet.prd._ndjson)": [[17, "pytomography.io.PET.prd._ndjson.TimeConverter"]], "uint16_max (in module pytomography.io.pet.prd._ndjson)": [[17, "pytomography.io.PET.prd._ndjson.UINT16_MAX"]], "uint32_max (in module pytomography.io.pet.prd._ndjson)": [[17, "pytomography.io.PET.prd._ndjson.UINT32_MAX"]], "uint64_max (in module pytomography.io.pet.prd._ndjson)": [[17, "pytomography.io.PET.prd._ndjson.UINT64_MAX"]], "uint8_max (in module pytomography.io.pet.prd._ndjson)": [[17, "pytomography.io.PET.prd._ndjson.UINT8_MAX"]], "uint16converter (class in pytomography.io.pet.prd._ndjson)": [[17, "pytomography.io.PET.prd._ndjson.UInt16Converter"]], "uint32converter (class in pytomography.io.pet.prd._ndjson)": [[17, "pytomography.io.PET.prd._ndjson.UInt32Converter"]], "uint64converter (class in pytomography.io.pet.prd._ndjson)": [[17, "pytomography.io.PET.prd._ndjson.UInt64Converter"]], "uint8converter (class in pytomography.io.pet.prd._ndjson)": [[17, "pytomography.io.PET.prd._ndjson.UInt8Converter"]], "unionconverter (class in pytomography.io.pet.prd._ndjson)": [[17, "pytomography.io.PET.prd._ndjson.UnionConverter"]], "vectorconverter (class in pytomography.io.pet.prd._ndjson)": [[17, "pytomography.io.PET.prd._ndjson.VectorConverter"]], "_end_stream() (pytomography.io.pet.prd._ndjson.ndjsonprotocolwriter method)": [[17, "pytomography.io.PET.prd._ndjson.NDJsonProtocolWriter._end_stream"]], "_get_dtype_and_subarray_shape() (pytomography.io.pet.prd._ndjson.ndarrayconverterbase static method)": [[17, "pytomography.io.PET.prd._ndjson.NDArrayConverterBase._get_dtype_and_subarray_shape"]], "_read() (pytomography.io.pet.prd._ndjson.ndarrayconverterbase method)": [[17, "pytomography.io.PET.prd._ndjson.NDArrayConverterBase._read"]], "_read_json_line() (pytomography.io.pet.prd._ndjson.ndjsonprotocolreader method)": [[17, "pytomography.io.PET.prd._ndjson.NDJsonProtocolReader._read_json_line"]], "_write_json_line() (pytomography.io.pet.prd._ndjson.ndjsonprotocolwriter method)": [[17, "pytomography.io.PET.prd._ndjson.NDJsonProtocolWriter._write_json_line"]], "bool_converter (in module pytomography.io.pet.prd._ndjson)": [[17, "pytomography.io.PET.prd._ndjson.bool_converter"]], "check_dtype() (pytomography.io.pet.prd._ndjson.ndarrayconverterbase method)": [[17, "pytomography.io.PET.prd._ndjson.NDArrayConverterBase.check_dtype"]], "close() (pytomography.io.pet.prd._ndjson.ndjsonprotocolreader method)": [[17, "pytomography.io.PET.prd._ndjson.NDJsonProtocolReader.close"]], "close() (pytomography.io.pet.prd._ndjson.ndjsonprotocolwriter method)": [[17, "pytomography.io.PET.prd._ndjson.NDJsonProtocolWriter.close"]], "complexfloat32_converter (in module pytomography.io.pet.prd._ndjson)": [[17, "pytomography.io.PET.prd._ndjson.complexfloat32_converter"]], "complexfloat64_converter (in module pytomography.io.pet.prd._ndjson)": [[17, "pytomography.io.PET.prd._ndjson.complexfloat64_converter"]], "date_converter (in module pytomography.io.pet.prd._ndjson)": [[17, "pytomography.io.PET.prd._ndjson.date_converter"]], "datetime_converter (in module pytomography.io.pet.prd._ndjson)": [[17, "pytomography.io.PET.prd._ndjson.datetime_converter"]], "float32_converter (in module pytomography.io.pet.prd._ndjson)": [[17, "pytomography.io.PET.prd._ndjson.float32_converter"]], "float64_converter (in module pytomography.io.pet.prd._ndjson)": [[17, "pytomography.io.PET.prd._ndjson.float64_converter"]], "from_json() (pytomography.io.pet.prd._ndjson.boolconverter method)": [[17, "pytomography.io.PET.prd._ndjson.BoolConverter.from_json"]], "from_json() (pytomography.io.pet.prd._ndjson.complex32converter method)": [[17, "pytomography.io.PET.prd._ndjson.Complex32Converter.from_json"]], "from_json() (pytomography.io.pet.prd._ndjson.complex64converter method)": [[17, "pytomography.io.PET.prd._ndjson.Complex64Converter.from_json"]], "from_json() (pytomography.io.pet.prd._ndjson.dateconverter method)": [[17, "pytomography.io.PET.prd._ndjson.DateConverter.from_json"]], "from_json() (pytomography.io.pet.prd._ndjson.datetimeconverter method)": [[17, "pytomography.io.PET.prd._ndjson.DateTimeConverter.from_json"]], "from_json() (pytomography.io.pet.prd._ndjson.dynamicndarrayconverter method)": [[17, "pytomography.io.PET.prd._ndjson.DynamicNDArrayConverter.from_json"]], "from_json() (pytomography.io.pet.prd._ndjson.enumconverter method)": [[17, "pytomography.io.PET.prd._ndjson.EnumConverter.from_json"]], "from_json() (pytomography.io.pet.prd._ndjson.fixedndarrayconverter method)": [[17, "pytomography.io.PET.prd._ndjson.FixedNDArrayConverter.from_json"]], "from_json() (pytomography.io.pet.prd._ndjson.fixedvectorconverter method)": [[17, "pytomography.io.PET.prd._ndjson.FixedVectorConverter.from_json"]], "from_json() (pytomography.io.pet.prd._ndjson.flagsconverter method)": [[17, "pytomography.io.PET.prd._ndjson.FlagsConverter.from_json"]], "from_json() (pytomography.io.pet.prd._ndjson.float32converter method)": [[17, "pytomography.io.PET.prd._ndjson.Float32Converter.from_json"]], "from_json() (pytomography.io.pet.prd._ndjson.float64converter method)": [[17, "pytomography.io.PET.prd._ndjson.Float64Converter.from_json"]], "from_json() (pytomography.io.pet.prd._ndjson.int16converter method)": [[17, "pytomography.io.PET.prd._ndjson.Int16Converter.from_json"]], "from_json() (pytomography.io.pet.prd._ndjson.int32converter method)": [[17, "pytomography.io.PET.prd._ndjson.Int32Converter.from_json"]], "from_json() (pytomography.io.pet.prd._ndjson.int64converter method)": [[17, "pytomography.io.PET.prd._ndjson.Int64Converter.from_json"]], "from_json() (pytomography.io.pet.prd._ndjson.int8converter method)": [[17, "pytomography.io.PET.prd._ndjson.Int8Converter.from_json"]], "from_json() (pytomography.io.pet.prd._ndjson.jsonconverter method)": [[17, "pytomography.io.PET.prd._ndjson.JsonConverter.from_json"]], "from_json() (pytomography.io.pet.prd._ndjson.mapconverter method)": [[17, "pytomography.io.PET.prd._ndjson.MapConverter.from_json"]], "from_json() (pytomography.io.pet.prd._ndjson.ndarrayconverter method)": [[17, "pytomography.io.PET.prd._ndjson.NDArrayConverter.from_json"]], "from_json() (pytomography.io.pet.prd._ndjson.optionalconverter method)": [[17, "pytomography.io.PET.prd._ndjson.OptionalConverter.from_json"]], "from_json() (pytomography.io.pet.prd._ndjson.sizeconverter method)": [[17, "pytomography.io.PET.prd._ndjson.SizeConverter.from_json"]], "from_json() (pytomography.io.pet.prd._ndjson.stringconverter method)": [[17, "pytomography.io.PET.prd._ndjson.StringConverter.from_json"]], "from_json() (pytomography.io.pet.prd._ndjson.timeconverter method)": [[17, "pytomography.io.PET.prd._ndjson.TimeConverter.from_json"]], "from_json() (pytomography.io.pet.prd._ndjson.uint16converter method)": [[17, "pytomography.io.PET.prd._ndjson.UInt16Converter.from_json"]], "from_json() (pytomography.io.pet.prd._ndjson.uint32converter method)": [[17, "pytomography.io.PET.prd._ndjson.UInt32Converter.from_json"]], "from_json() (pytomography.io.pet.prd._ndjson.uint64converter method)": [[17, "pytomography.io.PET.prd._ndjson.UInt64Converter.from_json"]], "from_json() (pytomography.io.pet.prd._ndjson.uint8converter method)": [[17, "pytomography.io.PET.prd._ndjson.UInt8Converter.from_json"]], "from_json() (pytomography.io.pet.prd._ndjson.unionconverter method)": [[17, "pytomography.io.PET.prd._ndjson.UnionConverter.from_json"]], "from_json() (pytomography.io.pet.prd._ndjson.vectorconverter method)": [[17, "pytomography.io.PET.prd._ndjson.VectorConverter.from_json"]], "from_json_to_numpy() (pytomography.io.pet.prd._ndjson.boolconverter method)": [[17, "pytomography.io.PET.prd._ndjson.BoolConverter.from_json_to_numpy"]], "from_json_to_numpy() (pytomography.io.pet.prd._ndjson.complex32converter method)": [[17, "pytomography.io.PET.prd._ndjson.Complex32Converter.from_json_to_numpy"]], "from_json_to_numpy() (pytomography.io.pet.prd._ndjson.complex64converter method)": [[17, "pytomography.io.PET.prd._ndjson.Complex64Converter.from_json_to_numpy"]], "from_json_to_numpy() (pytomography.io.pet.prd._ndjson.dateconverter method)": [[17, "pytomography.io.PET.prd._ndjson.DateConverter.from_json_to_numpy"]], "from_json_to_numpy() (pytomography.io.pet.prd._ndjson.datetimeconverter method)": [[17, "pytomography.io.PET.prd._ndjson.DateTimeConverter.from_json_to_numpy"]], "from_json_to_numpy() (pytomography.io.pet.prd._ndjson.dynamicndarrayconverter method)": [[17, "pytomography.io.PET.prd._ndjson.DynamicNDArrayConverter.from_json_to_numpy"]], "from_json_to_numpy() (pytomography.io.pet.prd._ndjson.enumconverter method)": [[17, "pytomography.io.PET.prd._ndjson.EnumConverter.from_json_to_numpy"]], "from_json_to_numpy() (pytomography.io.pet.prd._ndjson.fixedndarrayconverter method)": [[17, "pytomography.io.PET.prd._ndjson.FixedNDArrayConverter.from_json_to_numpy"]], "from_json_to_numpy() (pytomography.io.pet.prd._ndjson.fixedvectorconverter method)": [[17, "pytomography.io.PET.prd._ndjson.FixedVectorConverter.from_json_to_numpy"]], "from_json_to_numpy() (pytomography.io.pet.prd._ndjson.flagsconverter method)": [[17, "pytomography.io.PET.prd._ndjson.FlagsConverter.from_json_to_numpy"]], "from_json_to_numpy() (pytomography.io.pet.prd._ndjson.float32converter method)": [[17, "pytomography.io.PET.prd._ndjson.Float32Converter.from_json_to_numpy"]], "from_json_to_numpy() (pytomography.io.pet.prd._ndjson.float64converter method)": [[17, "pytomography.io.PET.prd._ndjson.Float64Converter.from_json_to_numpy"]], "from_json_to_numpy() (pytomography.io.pet.prd._ndjson.int16converter method)": [[17, "pytomography.io.PET.prd._ndjson.Int16Converter.from_json_to_numpy"]], "from_json_to_numpy() (pytomography.io.pet.prd._ndjson.int32converter method)": [[17, "pytomography.io.PET.prd._ndjson.Int32Converter.from_json_to_numpy"]], "from_json_to_numpy() (pytomography.io.pet.prd._ndjson.int64converter method)": [[17, "pytomography.io.PET.prd._ndjson.Int64Converter.from_json_to_numpy"]], "from_json_to_numpy() (pytomography.io.pet.prd._ndjson.int8converter method)": [[17, "pytomography.io.PET.prd._ndjson.Int8Converter.from_json_to_numpy"]], "from_json_to_numpy() (pytomography.io.pet.prd._ndjson.jsonconverter method)": [[17, "pytomography.io.PET.prd._ndjson.JsonConverter.from_json_to_numpy"]], "from_json_to_numpy() (pytomography.io.pet.prd._ndjson.mapconverter method)": [[17, "pytomography.io.PET.prd._ndjson.MapConverter.from_json_to_numpy"]], "from_json_to_numpy() (pytomography.io.pet.prd._ndjson.ndarrayconverter method)": [[17, "pytomography.io.PET.prd._ndjson.NDArrayConverter.from_json_to_numpy"]], "from_json_to_numpy() (pytomography.io.pet.prd._ndjson.optionalconverter method)": [[17, "pytomography.io.PET.prd._ndjson.OptionalConverter.from_json_to_numpy"]], "from_json_to_numpy() (pytomography.io.pet.prd._ndjson.sizeconverter method)": [[17, "pytomography.io.PET.prd._ndjson.SizeConverter.from_json_to_numpy"]], "from_json_to_numpy() (pytomography.io.pet.prd._ndjson.stringconverter method)": [[17, "pytomography.io.PET.prd._ndjson.StringConverter.from_json_to_numpy"]], "from_json_to_numpy() (pytomography.io.pet.prd._ndjson.timeconverter method)": [[17, "pytomography.io.PET.prd._ndjson.TimeConverter.from_json_to_numpy"]], "from_json_to_numpy() (pytomography.io.pet.prd._ndjson.uint16converter method)": [[17, "pytomography.io.PET.prd._ndjson.UInt16Converter.from_json_to_numpy"]], "from_json_to_numpy() (pytomography.io.pet.prd._ndjson.uint32converter method)": [[17, "pytomography.io.PET.prd._ndjson.UInt32Converter.from_json_to_numpy"]], "from_json_to_numpy() (pytomography.io.pet.prd._ndjson.uint64converter method)": [[17, "pytomography.io.PET.prd._ndjson.UInt64Converter.from_json_to_numpy"]], "from_json_to_numpy() (pytomography.io.pet.prd._ndjson.uint8converter method)": [[17, "pytomography.io.PET.prd._ndjson.UInt8Converter.from_json_to_numpy"]], "from_json_to_numpy() (pytomography.io.pet.prd._ndjson.unionconverter method)": [[17, "pytomography.io.PET.prd._ndjson.UnionConverter.from_json_to_numpy"]], "from_json_to_numpy() (pytomography.io.pet.prd._ndjson.vectorconverter method)": [[17, "pytomography.io.PET.prd._ndjson.VectorConverter.from_json_to_numpy"]], "int16_converter (in module pytomography.io.pet.prd._ndjson)": [[17, "pytomography.io.PET.prd._ndjson.int16_converter"]], "int32_converter (in module pytomography.io.pet.prd._ndjson)": [[17, "pytomography.io.PET.prd._ndjson.int32_converter"]], "int64_converter (in module pytomography.io.pet.prd._ndjson)": [[17, "pytomography.io.PET.prd._ndjson.int64_converter"]], "int8_converter (in module pytomography.io.pet.prd._ndjson)": [[17, "pytomography.io.PET.prd._ndjson.int8_converter"]], "numpy_to_json() (pytomography.io.pet.prd._ndjson.boolconverter method)": [[17, "pytomography.io.PET.prd._ndjson.BoolConverter.numpy_to_json"]], "numpy_to_json() (pytomography.io.pet.prd._ndjson.complex32converter method)": [[17, "pytomography.io.PET.prd._ndjson.Complex32Converter.numpy_to_json"]], "numpy_to_json() (pytomography.io.pet.prd._ndjson.complex64converter method)": [[17, "pytomography.io.PET.prd._ndjson.Complex64Converter.numpy_to_json"]], "numpy_to_json() (pytomography.io.pet.prd._ndjson.dateconverter method)": [[17, "pytomography.io.PET.prd._ndjson.DateConverter.numpy_to_json"]], "numpy_to_json() (pytomography.io.pet.prd._ndjson.datetimeconverter method)": [[17, "pytomography.io.PET.prd._ndjson.DateTimeConverter.numpy_to_json"]], "numpy_to_json() (pytomography.io.pet.prd._ndjson.dynamicndarrayconverter method)": [[17, "pytomography.io.PET.prd._ndjson.DynamicNDArrayConverter.numpy_to_json"]], "numpy_to_json() (pytomography.io.pet.prd._ndjson.enumconverter method)": [[17, "pytomography.io.PET.prd._ndjson.EnumConverter.numpy_to_json"]], "numpy_to_json() (pytomography.io.pet.prd._ndjson.fixedndarrayconverter method)": [[17, "pytomography.io.PET.prd._ndjson.FixedNDArrayConverter.numpy_to_json"]], "numpy_to_json() (pytomography.io.pet.prd._ndjson.fixedvectorconverter method)": [[17, "pytomography.io.PET.prd._ndjson.FixedVectorConverter.numpy_to_json"]], "numpy_to_json() (pytomography.io.pet.prd._ndjson.flagsconverter method)": [[17, "pytomography.io.PET.prd._ndjson.FlagsConverter.numpy_to_json"]], "numpy_to_json() (pytomography.io.pet.prd._ndjson.float32converter method)": [[17, "pytomography.io.PET.prd._ndjson.Float32Converter.numpy_to_json"]], "numpy_to_json() (pytomography.io.pet.prd._ndjson.float64converter method)": [[17, "pytomography.io.PET.prd._ndjson.Float64Converter.numpy_to_json"]], "numpy_to_json() (pytomography.io.pet.prd._ndjson.int16converter method)": [[17, "pytomography.io.PET.prd._ndjson.Int16Converter.numpy_to_json"]], "numpy_to_json() (pytomography.io.pet.prd._ndjson.int32converter method)": [[17, "pytomography.io.PET.prd._ndjson.Int32Converter.numpy_to_json"]], "numpy_to_json() (pytomography.io.pet.prd._ndjson.int64converter method)": [[17, "pytomography.io.PET.prd._ndjson.Int64Converter.numpy_to_json"]], "numpy_to_json() (pytomography.io.pet.prd._ndjson.int8converter method)": [[17, "pytomography.io.PET.prd._ndjson.Int8Converter.numpy_to_json"]], "numpy_to_json() (pytomography.io.pet.prd._ndjson.jsonconverter method)": [[17, "pytomography.io.PET.prd._ndjson.JsonConverter.numpy_to_json"]], "numpy_to_json() (pytomography.io.pet.prd._ndjson.mapconverter method)": [[17, "pytomography.io.PET.prd._ndjson.MapConverter.numpy_to_json"]], "numpy_to_json() (pytomography.io.pet.prd._ndjson.ndarrayconverter method)": [[17, "pytomography.io.PET.prd._ndjson.NDArrayConverter.numpy_to_json"]], "numpy_to_json() (pytomography.io.pet.prd._ndjson.optionalconverter method)": [[17, "pytomography.io.PET.prd._ndjson.OptionalConverter.numpy_to_json"]], "numpy_to_json() (pytomography.io.pet.prd._ndjson.sizeconverter method)": [[17, "pytomography.io.PET.prd._ndjson.SizeConverter.numpy_to_json"]], "numpy_to_json() (pytomography.io.pet.prd._ndjson.stringconverter method)": [[17, "pytomography.io.PET.prd._ndjson.StringConverter.numpy_to_json"]], "numpy_to_json() (pytomography.io.pet.prd._ndjson.timeconverter method)": [[17, "pytomography.io.PET.prd._ndjson.TimeConverter.numpy_to_json"]], "numpy_to_json() (pytomography.io.pet.prd._ndjson.uint16converter method)": [[17, "pytomography.io.PET.prd._ndjson.UInt16Converter.numpy_to_json"]], "numpy_to_json() (pytomography.io.pet.prd._ndjson.uint32converter method)": [[17, "pytomography.io.PET.prd._ndjson.UInt32Converter.numpy_to_json"]], "numpy_to_json() (pytomography.io.pet.prd._ndjson.uint64converter method)": [[17, "pytomography.io.PET.prd._ndjson.UInt64Converter.numpy_to_json"]], "numpy_to_json() (pytomography.io.pet.prd._ndjson.uint8converter method)": [[17, "pytomography.io.PET.prd._ndjson.UInt8Converter.numpy_to_json"]], "numpy_to_json() (pytomography.io.pet.prd._ndjson.unionconverter method)": [[17, "pytomography.io.PET.prd._ndjson.UnionConverter.numpy_to_json"]], "numpy_to_json() (pytomography.io.pet.prd._ndjson.vectorconverter method)": [[17, "pytomography.io.PET.prd._ndjson.VectorConverter.numpy_to_json"]], "overall_dtype() (pytomography.io.pet.prd._ndjson.jsonconverter method)": [[17, "pytomography.io.PET.prd._ndjson.JsonConverter.overall_dtype"]], "pytomography.io.pet.prd._ndjson": [[17, "module-pytomography.io.PET.prd._ndjson"]], "size_converter (in module pytomography.io.pet.prd._ndjson)": [[17, "pytomography.io.PET.prd._ndjson.size_converter"]], "string_converter (in module pytomography.io.pet.prd._ndjson)": [[17, "pytomography.io.PET.prd._ndjson.string_converter"]], "supports_none() (pytomography.io.pet.prd._ndjson.jsonconverter method)": [[17, "pytomography.io.PET.prd._ndjson.JsonConverter.supports_none"]], "supports_none() (pytomography.io.pet.prd._ndjson.optionalconverter method)": [[17, "pytomography.io.PET.prd._ndjson.OptionalConverter.supports_none"]], "supports_none() (pytomography.io.pet.prd._ndjson.unionconverter method)": [[17, "pytomography.io.PET.prd._ndjson.UnionConverter.supports_none"]], "time_converter (in module pytomography.io.pet.prd._ndjson)": [[17, "pytomography.io.PET.prd._ndjson.time_converter"]], "to_json() (pytomography.io.pet.prd._ndjson.boolconverter method)": [[17, "pytomography.io.PET.prd._ndjson.BoolConverter.to_json"]], "to_json() (pytomography.io.pet.prd._ndjson.complex32converter method)": [[17, "pytomography.io.PET.prd._ndjson.Complex32Converter.to_json"]], "to_json() (pytomography.io.pet.prd._ndjson.complex64converter method)": [[17, "pytomography.io.PET.prd._ndjson.Complex64Converter.to_json"]], "to_json() (pytomography.io.pet.prd._ndjson.dateconverter method)": [[17, "pytomography.io.PET.prd._ndjson.DateConverter.to_json"]], "to_json() (pytomography.io.pet.prd._ndjson.datetimeconverter method)": [[17, "pytomography.io.PET.prd._ndjson.DateTimeConverter.to_json"]], "to_json() (pytomography.io.pet.prd._ndjson.dynamicndarrayconverter method)": [[17, "pytomography.io.PET.prd._ndjson.DynamicNDArrayConverter.to_json"]], "to_json() (pytomography.io.pet.prd._ndjson.enumconverter method)": [[17, "pytomography.io.PET.prd._ndjson.EnumConverter.to_json"]], "to_json() (pytomography.io.pet.prd._ndjson.fixedndarrayconverter method)": [[17, "pytomography.io.PET.prd._ndjson.FixedNDArrayConverter.to_json"]], "to_json() (pytomography.io.pet.prd._ndjson.fixedvectorconverter method)": [[17, "pytomography.io.PET.prd._ndjson.FixedVectorConverter.to_json"]], "to_json() (pytomography.io.pet.prd._ndjson.flagsconverter method)": [[17, "pytomography.io.PET.prd._ndjson.FlagsConverter.to_json"]], "to_json() (pytomography.io.pet.prd._ndjson.float32converter method)": [[17, "pytomography.io.PET.prd._ndjson.Float32Converter.to_json"]], "to_json() (pytomography.io.pet.prd._ndjson.float64converter method)": [[17, "pytomography.io.PET.prd._ndjson.Float64Converter.to_json"]], "to_json() (pytomography.io.pet.prd._ndjson.int16converter method)": [[17, "pytomography.io.PET.prd._ndjson.Int16Converter.to_json"]], "to_json() (pytomography.io.pet.prd._ndjson.int32converter method)": [[17, "pytomography.io.PET.prd._ndjson.Int32Converter.to_json"]], "to_json() (pytomography.io.pet.prd._ndjson.int64converter method)": [[17, "pytomography.io.PET.prd._ndjson.Int64Converter.to_json"]], "to_json() (pytomography.io.pet.prd._ndjson.int8converter method)": [[17, "pytomography.io.PET.prd._ndjson.Int8Converter.to_json"]], "to_json() (pytomography.io.pet.prd._ndjson.jsonconverter method)": [[17, "pytomography.io.PET.prd._ndjson.JsonConverter.to_json"]], "to_json() (pytomography.io.pet.prd._ndjson.mapconverter method)": [[17, "pytomography.io.PET.prd._ndjson.MapConverter.to_json"]], "to_json() (pytomography.io.pet.prd._ndjson.ndarrayconverter method)": [[17, "pytomography.io.PET.prd._ndjson.NDArrayConverter.to_json"]], "to_json() (pytomography.io.pet.prd._ndjson.optionalconverter method)": [[17, "pytomography.io.PET.prd._ndjson.OptionalConverter.to_json"]], "to_json() (pytomography.io.pet.prd._ndjson.sizeconverter method)": [[17, "pytomography.io.PET.prd._ndjson.SizeConverter.to_json"]], "to_json() (pytomography.io.pet.prd._ndjson.stringconverter method)": [[17, "pytomography.io.PET.prd._ndjson.StringConverter.to_json"]], "to_json() (pytomography.io.pet.prd._ndjson.timeconverter method)": [[17, "pytomography.io.PET.prd._ndjson.TimeConverter.to_json"]], "to_json() (pytomography.io.pet.prd._ndjson.uint16converter method)": [[17, "pytomography.io.PET.prd._ndjson.UInt16Converter.to_json"]], "to_json() (pytomography.io.pet.prd._ndjson.uint32converter method)": [[17, "pytomography.io.PET.prd._ndjson.UInt32Converter.to_json"]], "to_json() (pytomography.io.pet.prd._ndjson.uint64converter method)": [[17, "pytomography.io.PET.prd._ndjson.UInt64Converter.to_json"]], "to_json() (pytomography.io.pet.prd._ndjson.uint8converter method)": [[17, "pytomography.io.PET.prd._ndjson.UInt8Converter.to_json"]], "to_json() (pytomography.io.pet.prd._ndjson.unionconverter method)": [[17, "pytomography.io.PET.prd._ndjson.UnionConverter.to_json"]], "to_json() (pytomography.io.pet.prd._ndjson.vectorconverter method)": [[17, "pytomography.io.PET.prd._ndjson.VectorConverter.to_json"]], "uint16_converter (in module pytomography.io.pet.prd._ndjson)": [[17, "pytomography.io.PET.prd._ndjson.uint16_converter"]], "uint32_converter (in module pytomography.io.pet.prd._ndjson)": [[17, "pytomography.io.PET.prd._ndjson.uint32_converter"]], "uint64_converter (in module pytomography.io.pet.prd._ndjson)": [[17, "pytomography.io.PET.prd._ndjson.uint64_converter"]], "uint8_converter (in module pytomography.io.pet.prd._ndjson)": [[17, "pytomography.io.PET.prd._ndjson.uint8_converter"]], "binaryprdexperimentreader (class in pytomography.io.pet.prd.binary)": [[18, "pytomography.io.PET.prd.binary.BinaryPrdExperimentReader"]], "binaryprdexperimentwriter (class in pytomography.io.pet.prd.binary)": [[18, "pytomography.io.PET.prd.binary.BinaryPrdExperimentWriter"]], "_coincidenceeventserializer (class in pytomography.io.pet.prd.binary)": [[18, "pytomography.io.PET.prd.binary._CoincidenceEventSerializer"]], "_detectorserializer (class in pytomography.io.pet.prd.binary)": [[18, "pytomography.io.PET.prd.binary._DetectorSerializer"]], "_examinformationserializer (class in pytomography.io.pet.prd.binary)": [[18, "pytomography.io.PET.prd.binary._ExamInformationSerializer"]], "_headerserializer (class in pytomography.io.pet.prd.binary)": [[18, "pytomography.io.PET.prd.binary._HeaderSerializer"]], "_institutionserializer (class in pytomography.io.pet.prd.binary)": [[18, "pytomography.io.PET.prd.binary._InstitutionSerializer"]], "_scannerinformationserializer (class in pytomography.io.pet.prd.binary)": [[18, "pytomography.io.PET.prd.binary._ScannerInformationSerializer"]], "_subjectserializer (class in pytomography.io.pet.prd.binary)": [[18, "pytomography.io.PET.prd.binary._SubjectSerializer"]], "_timeblockserializer (class in pytomography.io.pet.prd.binary)": [[18, "pytomography.io.PET.prd.binary._TimeBlockSerializer"]], "_timeframeinformationserializer (class in pytomography.io.pet.prd.binary)": [[18, "pytomography.io.PET.prd.binary._TimeFrameInformationSerializer"]], "_timeintervalserializer (class in pytomography.io.pet.prd.binary)": [[18, "pytomography.io.PET.prd.binary._TimeIntervalSerializer"]], "_read_header() (pytomography.io.pet.prd.binary.binaryprdexperimentreader method)": [[18, "pytomography.io.PET.prd.binary.BinaryPrdExperimentReader._read_header"]], "_read_time_blocks() (pytomography.io.pet.prd.binary.binaryprdexperimentreader method)": [[18, "pytomography.io.PET.prd.binary.BinaryPrdExperimentReader._read_time_blocks"]], "_write_header() (pytomography.io.pet.prd.binary.binaryprdexperimentwriter method)": [[18, "pytomography.io.PET.prd.binary.BinaryPrdExperimentWriter._write_header"]], "_write_time_blocks() (pytomography.io.pet.prd.binary.binaryprdexperimentwriter method)": [[18, "pytomography.io.PET.prd.binary.BinaryPrdExperimentWriter._write_time_blocks"]], "pytomography.io.pet.prd.binary": [[18, "module-pytomography.io.PET.prd.binary"]], "read() (pytomography.io.pet.prd.binary._coincidenceeventserializer method)": [[18, "pytomography.io.PET.prd.binary._CoincidenceEventSerializer.read"]], "read() (pytomography.io.pet.prd.binary._detectorserializer method)": [[18, "pytomography.io.PET.prd.binary._DetectorSerializer.read"]], "read() (pytomography.io.pet.prd.binary._examinformationserializer method)": [[18, "pytomography.io.PET.prd.binary._ExamInformationSerializer.read"]], "read() (pytomography.io.pet.prd.binary._headerserializer method)": [[18, "pytomography.io.PET.prd.binary._HeaderSerializer.read"]], "read() (pytomography.io.pet.prd.binary._institutionserializer method)": [[18, "pytomography.io.PET.prd.binary._InstitutionSerializer.read"]], "read() (pytomography.io.pet.prd.binary._scannerinformationserializer method)": [[18, "pytomography.io.PET.prd.binary._ScannerInformationSerializer.read"]], "read() (pytomography.io.pet.prd.binary._subjectserializer method)": [[18, "pytomography.io.PET.prd.binary._SubjectSerializer.read"]], "read() (pytomography.io.pet.prd.binary._timeblockserializer method)": [[18, "pytomography.io.PET.prd.binary._TimeBlockSerializer.read"]], "read() (pytomography.io.pet.prd.binary._timeframeinformationserializer method)": [[18, "pytomography.io.PET.prd.binary._TimeFrameInformationSerializer.read"]], "read() (pytomography.io.pet.prd.binary._timeintervalserializer method)": [[18, "pytomography.io.PET.prd.binary._TimeIntervalSerializer.read"]], "write() (pytomography.io.pet.prd.binary._coincidenceeventserializer method)": [[18, "pytomography.io.PET.prd.binary._CoincidenceEventSerializer.write"]], "write() (pytomography.io.pet.prd.binary._detectorserializer method)": [[18, "pytomography.io.PET.prd.binary._DetectorSerializer.write"]], "write() (pytomography.io.pet.prd.binary._examinformationserializer method)": [[18, "pytomography.io.PET.prd.binary._ExamInformationSerializer.write"]], "write() (pytomography.io.pet.prd.binary._headerserializer method)": [[18, "pytomography.io.PET.prd.binary._HeaderSerializer.write"]], "write() (pytomography.io.pet.prd.binary._institutionserializer method)": [[18, "pytomography.io.PET.prd.binary._InstitutionSerializer.write"]], "write() (pytomography.io.pet.prd.binary._scannerinformationserializer method)": [[18, "pytomography.io.PET.prd.binary._ScannerInformationSerializer.write"]], "write() (pytomography.io.pet.prd.binary._subjectserializer method)": [[18, "pytomography.io.PET.prd.binary._SubjectSerializer.write"]], "write() (pytomography.io.pet.prd.binary._timeblockserializer method)": [[18, "pytomography.io.PET.prd.binary._TimeBlockSerializer.write"]], "write() (pytomography.io.pet.prd.binary._timeframeinformationserializer method)": [[18, "pytomography.io.PET.prd.binary._TimeFrameInformationSerializer.write"]], "write() (pytomography.io.pet.prd.binary._timeintervalserializer method)": [[18, "pytomography.io.PET.prd.binary._TimeIntervalSerializer.write"]], "write_numpy() (pytomography.io.pet.prd.binary._coincidenceeventserializer method)": [[18, "pytomography.io.PET.prd.binary._CoincidenceEventSerializer.write_numpy"]], "write_numpy() (pytomography.io.pet.prd.binary._detectorserializer method)": [[18, "pytomography.io.PET.prd.binary._DetectorSerializer.write_numpy"]], "write_numpy() (pytomography.io.pet.prd.binary._examinformationserializer method)": [[18, "pytomography.io.PET.prd.binary._ExamInformationSerializer.write_numpy"]], "write_numpy() (pytomography.io.pet.prd.binary._headerserializer method)": [[18, "pytomography.io.PET.prd.binary._HeaderSerializer.write_numpy"]], "write_numpy() (pytomography.io.pet.prd.binary._institutionserializer method)": [[18, "pytomography.io.PET.prd.binary._InstitutionSerializer.write_numpy"]], "write_numpy() (pytomography.io.pet.prd.binary._scannerinformationserializer method)": [[18, "pytomography.io.PET.prd.binary._ScannerInformationSerializer.write_numpy"]], "write_numpy() (pytomography.io.pet.prd.binary._subjectserializer method)": [[18, "pytomography.io.PET.prd.binary._SubjectSerializer.write_numpy"]], "write_numpy() (pytomography.io.pet.prd.binary._timeblockserializer method)": [[18, "pytomography.io.PET.prd.binary._TimeBlockSerializer.write_numpy"]], "write_numpy() (pytomography.io.pet.prd.binary._timeframeinformationserializer method)": [[18, "pytomography.io.PET.prd.binary._TimeFrameInformationSerializer.write_numpy"]], "write_numpy() (pytomography.io.pet.prd.binary._timeintervalserializer method)": [[18, "pytomography.io.PET.prd.binary._TimeIntervalSerializer.write_numpy"]], "binaryprdexperimentreader (class in pytomography.io.pet.prd)": [[19, "pytomography.io.PET.prd.BinaryPrdExperimentReader"]], "binaryprdexperimentwriter (class in pytomography.io.pet.prd)": [[19, "pytomography.io.PET.prd.BinaryPrdExperimentWriter"]], "coincidenceevent (class in pytomography.io.pet.prd)": [[19, "pytomography.io.PET.prd.CoincidenceEvent"]], "complexdouble (in module pytomography.io.pet.prd)": [[19, "pytomography.io.PET.prd.ComplexDouble"]], "complexfloat (in module pytomography.io.pet.prd)": [[19, "pytomography.io.PET.prd.ComplexFloat"]], "datetime (class in pytomography.io.pet.prd)": [[19, "pytomography.io.PET.prd.DateTime"]], "detector (class in pytomography.io.pet.prd)": [[19, "pytomography.io.PET.prd.Detector"]], "examinformation (class in pytomography.io.pet.prd)": [[19, "pytomography.io.PET.prd.ExamInformation"]], "float32 (in module pytomography.io.pet.prd)": [[19, "pytomography.io.PET.prd.Float32"]], "float64 (in module pytomography.io.pet.prd)": [[19, "pytomography.io.PET.prd.Float64"]], "header (class in pytomography.io.pet.prd)": [[19, "pytomography.io.PET.prd.Header"]], "institution (class in pytomography.io.pet.prd)": [[19, "pytomography.io.PET.prd.Institution"]], "int16 (in module pytomography.io.pet.prd)": [[19, "pytomography.io.PET.prd.Int16"]], "int32 (in module pytomography.io.pet.prd)": [[19, "pytomography.io.PET.prd.Int32"]], "int64 (in module pytomography.io.pet.prd)": [[19, "pytomography.io.PET.prd.Int64"]], "int8 (in module pytomography.io.pet.prd)": [[19, "pytomography.io.PET.prd.Int8"]], "ndjsonprdexperimentreader (class in pytomography.io.pet.prd)": [[19, "pytomography.io.PET.prd.NDJsonPrdExperimentReader"]], "ndjsonprdexperimentwriter (class in pytomography.io.pet.prd)": [[19, "pytomography.io.PET.prd.NDJsonPrdExperimentWriter"]], "outofrangeenum (class in pytomography.io.pet.prd)": [[19, "pytomography.io.PET.prd.OutOfRangeEnum"]], "prdexperimentreaderbase (class in pytomography.io.pet.prd)": [[19, "pytomography.io.PET.prd.PrdExperimentReaderBase"]], "prdexperimentwriterbase (class in pytomography.io.pet.prd)": [[19, "pytomography.io.PET.prd.PrdExperimentWriterBase"]], "protocolerror": [[19, "pytomography.io.PET.prd.ProtocolError"], [23, "pytomography.io.PET.prd.yardl_types.ProtocolError"]], "scannerinformation (class in pytomography.io.pet.prd)": [[19, "pytomography.io.PET.prd.ScannerInformation"]], "size (in module pytomography.io.pet.prd)": [[19, "pytomography.io.PET.prd.Size"]], "subject (class in pytomography.io.pet.prd)": [[19, "pytomography.io.PET.prd.Subject"]], "t (pytomography.io.pet.prd.prdexperimentreaderbase attribute)": [[19, "pytomography.io.PET.prd.PrdExperimentReaderBase.T"]], "time (class in pytomography.io.pet.prd)": [[19, "pytomography.io.PET.prd.Time"]], "timeblock (class in pytomography.io.pet.prd)": [[19, "pytomography.io.PET.prd.TimeBlock"]], "timeframeinformation (class in pytomography.io.pet.prd)": [[19, "pytomography.io.PET.prd.TimeFrameInformation"]], "timeinterval (class in pytomography.io.pet.prd)": [[19, "pytomography.io.PET.prd.TimeInterval"]], "uint16 (in module pytomography.io.pet.prd)": [[19, "pytomography.io.PET.prd.UInt16"]], "uint32 (in module pytomography.io.pet.prd)": [[19, "pytomography.io.PET.prd.UInt32"]], "uint64 (in module pytomography.io.pet.prd)": [[19, "pytomography.io.PET.prd.UInt64"]], "uint8 (in module pytomography.io.pet.prd)": [[19, "pytomography.io.PET.prd.UInt8"]], "unioncase (class in pytomography.io.pet.prd)": [[19, "pytomography.io.PET.prd.UnionCase"]], "_min_numpy_version (in module pytomography.io.pet.prd)": [[19, "pytomography.io.PET.prd._MIN_NUMPY_VERSION"]], "_nanoseconds_per_day (pytomography.io.pet.prd.time attribute)": [[19, "pytomography.io.PET.prd.Time._NANOSECONDS_PER_DAY"]], "_t (in module pytomography.io.pet.prd)": [[19, "pytomography.io.PET.prd._T"]], "__enter__() (pytomography.io.pet.prd.prdexperimentreaderbase method)": [[19, "pytomography.io.PET.prd.PrdExperimentReaderBase.__enter__"]], "__enter__() (pytomography.io.pet.prd.prdexperimentwriterbase method)": [[19, "pytomography.io.PET.prd.PrdExperimentWriterBase.__enter__"]], "__eq__() (pytomography.io.pet.prd.coincidenceevent method)": [[19, "pytomography.io.PET.prd.CoincidenceEvent.__eq__"]], "__eq__() (pytomography.io.pet.prd.datetime method)": [[19, "pytomography.io.PET.prd.DateTime.__eq__"]], "__eq__() (pytomography.io.pet.prd.detector method)": [[19, "pytomography.io.PET.prd.Detector.__eq__"]], "__eq__() (pytomography.io.pet.prd.examinformation method)": [[19, "pytomography.io.PET.prd.ExamInformation.__eq__"]], "__eq__() (pytomography.io.pet.prd.header method)": [[19, "pytomography.io.PET.prd.Header.__eq__"]], "__eq__() (pytomography.io.pet.prd.institution method)": [[19, "pytomography.io.PET.prd.Institution.__eq__"]], "__eq__() (pytomography.io.pet.prd.outofrangeenum method)": [[19, "pytomography.io.PET.prd.OutOfRangeEnum.__eq__"]], "__eq__() (pytomography.io.pet.prd.scannerinformation method)": [[19, "pytomography.io.PET.prd.ScannerInformation.__eq__"]], "__eq__() (pytomography.io.pet.prd.subject method)": [[19, "pytomography.io.PET.prd.Subject.__eq__"]], "__eq__() (pytomography.io.pet.prd.time method)": [[19, "pytomography.io.PET.prd.Time.__eq__"]], "__eq__() (pytomography.io.pet.prd.timeblock method)": [[19, "pytomography.io.PET.prd.TimeBlock.__eq__"]], "__eq__() (pytomography.io.pet.prd.timeframeinformation method)": [[19, "pytomography.io.PET.prd.TimeFrameInformation.__eq__"]], "__eq__() (pytomography.io.pet.prd.timeinterval method)": [[19, "pytomography.io.PET.prd.TimeInterval.__eq__"]], "__eq__() (pytomography.io.pet.prd.unioncase method)": [[19, "pytomography.io.PET.prd.UnionCase.__eq__"]], "__exit__() (pytomography.io.pet.prd.prdexperimentreaderbase method)": [[19, "pytomography.io.PET.prd.PrdExperimentReaderBase.__exit__"]], "__exit__() (pytomography.io.pet.prd.prdexperimentwriterbase method)": [[19, "pytomography.io.PET.prd.PrdExperimentWriterBase.__exit__"]], "__hash__() (pytomography.io.pet.prd.datetime method)": [[19, "pytomography.io.PET.prd.DateTime.__hash__"]], "__hash__() (pytomography.io.pet.prd.outofrangeenum method)": [[19, "pytomography.io.PET.prd.OutOfRangeEnum.__hash__"]], "__repr__() (pytomography.io.pet.prd.coincidenceevent method)": [[19, "pytomography.io.PET.prd.CoincidenceEvent.__repr__"]], "__repr__() (pytomography.io.pet.prd.datetime method)": [[19, "pytomography.io.PET.prd.DateTime.__repr__"]], "__repr__() (pytomography.io.pet.prd.detector method)": [[19, "pytomography.io.PET.prd.Detector.__repr__"]], "__repr__() (pytomography.io.pet.prd.examinformation method)": [[19, "pytomography.io.PET.prd.ExamInformation.__repr__"]], "__repr__() (pytomography.io.pet.prd.header method)": [[19, "pytomography.io.PET.prd.Header.__repr__"]], "__repr__() (pytomography.io.pet.prd.institution method)": [[19, "pytomography.io.PET.prd.Institution.__repr__"]], "__repr__() (pytomography.io.pet.prd.outofrangeenum method)": [[19, "pytomography.io.PET.prd.OutOfRangeEnum.__repr__"]], "__repr__() (pytomography.io.pet.prd.scannerinformation method)": [[19, "pytomography.io.PET.prd.ScannerInformation.__repr__"]], "__repr__() (pytomography.io.pet.prd.subject method)": [[19, "pytomography.io.PET.prd.Subject.__repr__"]], "__repr__() (pytomography.io.pet.prd.time method)": [[19, "pytomography.io.PET.prd.Time.__repr__"]], "__repr__() (pytomography.io.pet.prd.timeblock method)": [[19, "pytomography.io.PET.prd.TimeBlock.__repr__"]], "__repr__() (pytomography.io.pet.prd.timeframeinformation method)": [[19, "pytomography.io.PET.prd.TimeFrameInformation.__repr__"]], "__repr__() (pytomography.io.pet.prd.timeinterval method)": [[19, "pytomography.io.PET.prd.TimeInterval.__repr__"]], "__repr__() (pytomography.io.pet.prd.unioncase method)": [[19, "pytomography.io.PET.prd.UnionCase.__repr__"]], "__str__() (pytomography.io.pet.prd.coincidenceevent method)": [[19, "pytomography.io.PET.prd.CoincidenceEvent.__str__"]], "__str__() (pytomography.io.pet.prd.datetime method)": [[19, "pytomography.io.PET.prd.DateTime.__str__"]], "__str__() (pytomography.io.pet.prd.detector method)": [[19, "pytomography.io.PET.prd.Detector.__str__"]], "__str__() (pytomography.io.pet.prd.examinformation method)": [[19, "pytomography.io.PET.prd.ExamInformation.__str__"]], "__str__() (pytomography.io.pet.prd.header method)": [[19, "pytomography.io.PET.prd.Header.__str__"]], "__str__() (pytomography.io.pet.prd.institution method)": [[19, "pytomography.io.PET.prd.Institution.__str__"]], "__str__() (pytomography.io.pet.prd.outofrangeenum method)": [[19, "pytomography.io.PET.prd.OutOfRangeEnum.__str__"]], "__str__() (pytomography.io.pet.prd.scannerinformation method)": [[19, "pytomography.io.PET.prd.ScannerInformation.__str__"]], "__str__() (pytomography.io.pet.prd.subject method)": [[19, "pytomography.io.PET.prd.Subject.__str__"]], "__str__() (pytomography.io.pet.prd.time method)": [[19, "pytomography.io.PET.prd.Time.__str__"]], "__str__() (pytomography.io.pet.prd.timeblock method)": [[19, "pytomography.io.PET.prd.TimeBlock.__str__"]], "__str__() (pytomography.io.pet.prd.timeframeinformation method)": [[19, "pytomography.io.PET.prd.TimeFrameInformation.__str__"]], "__str__() (pytomography.io.pet.prd.timeinterval method)": [[19, "pytomography.io.PET.prd.TimeInterval.__str__"]], "__str__() (pytomography.io.pet.prd.unioncase method)": [[19, "pytomography.io.PET.prd.UnionCase.__str__"]], "_end_stream() (pytomography.io.pet.prd.prdexperimentwriterbase method)": [[19, "pytomography.io.PET.prd.PrdExperimentWriterBase._end_stream"]], "_missing_() (pytomography.io.pet.prd.outofrangeenum class method)": [[19, "pytomography.io.PET.prd.OutOfRangeEnum._missing_"]], "_parse_version() (in module pytomography.io.pet.prd)": [[19, "pytomography.io.PET.prd._parse_version"]], "_raise_unexpected_state() (pytomography.io.pet.prd.prdexperimentreaderbase method)": [[19, "pytomography.io.PET.prd.PrdExperimentReaderBase._raise_unexpected_state"]], "_raise_unexpected_state() (pytomography.io.pet.prd.prdexperimentwriterbase method)": [[19, "pytomography.io.PET.prd.PrdExperimentWriterBase._raise_unexpected_state"]], "_read_header() (pytomography.io.pet.prd.binaryprdexperimentreader method)": [[19, "pytomography.io.PET.prd.BinaryPrdExperimentReader._read_header"]], "_read_header() (pytomography.io.pet.prd.ndjsonprdexperimentreader method)": [[19, "pytomography.io.PET.prd.NDJsonPrdExperimentReader._read_header"]], "_read_header() (pytomography.io.pet.prd.prdexperimentreaderbase method)": [[19, "pytomography.io.PET.prd.PrdExperimentReaderBase._read_header"]], "_read_time_blocks() (pytomography.io.pet.prd.binaryprdexperimentreader method)": [[19, "pytomography.io.PET.prd.BinaryPrdExperimentReader._read_time_blocks"]], "_read_time_blocks() (pytomography.io.pet.prd.ndjsonprdexperimentreader method)": [[19, "pytomography.io.PET.prd.NDJsonPrdExperimentReader._read_time_blocks"]], "_read_time_blocks() (pytomography.io.pet.prd.prdexperimentreaderbase method)": [[19, "pytomography.io.PET.prd.PrdExperimentReaderBase._read_time_blocks"]], "_state_to_method_name() (pytomography.io.pet.prd.prdexperimentreaderbase method)": [[19, "pytomography.io.PET.prd.PrdExperimentReaderBase._state_to_method_name"]], "_state_to_method_name() (pytomography.io.pet.prd.prdexperimentwriterbase method)": [[19, "pytomography.io.PET.prd.PrdExperimentWriterBase._state_to_method_name"]], "_wrap_iterable() (pytomography.io.pet.prd.prdexperimentreaderbase method)": [[19, "pytomography.io.PET.prd.PrdExperimentReaderBase._wrap_iterable"]], "_write_header() (pytomography.io.pet.prd.binaryprdexperimentwriter method)": [[19, "pytomography.io.PET.prd.BinaryPrdExperimentWriter._write_header"]], "_write_header() (pytomography.io.pet.prd.ndjsonprdexperimentwriter method)": [[19, "pytomography.io.PET.prd.NDJsonPrdExperimentWriter._write_header"]], "_write_header() (pytomography.io.pet.prd.prdexperimentwriterbase method)": [[19, "pytomography.io.PET.prd.PrdExperimentWriterBase._write_header"]], "_write_time_blocks() (pytomography.io.pet.prd.binaryprdexperimentwriter method)": [[19, "pytomography.io.PET.prd.BinaryPrdExperimentWriter._write_time_blocks"]], "_write_time_blocks() (pytomography.io.pet.prd.ndjsonprdexperimentwriter method)": [[19, "pytomography.io.PET.prd.NDJsonPrdExperimentWriter._write_time_blocks"]], "_write_time_blocks() (pytomography.io.pet.prd.prdexperimentwriterbase method)": [[19, "pytomography.io.PET.prd.PrdExperimentWriterBase._write_time_blocks"]], "address (pytomography.io.pet.prd.institution attribute)": [[19, "pytomography.io.PET.prd.Institution.address"]], "close() (pytomography.io.pet.prd.prdexperimentreaderbase method)": [[19, "pytomography.io.PET.prd.PrdExperimentReaderBase.close"]], "close() (pytomography.io.pet.prd.prdexperimentwriterbase method)": [[19, "pytomography.io.PET.prd.PrdExperimentWriterBase.close"]], "copy_to() (pytomography.io.pet.prd.prdexperimentreaderbase method)": [[19, "pytomography.io.PET.prd.PrdExperimentReaderBase.copy_to"]], "delayed_events (pytomography.io.pet.prd.timeblock attribute)": [[19, "pytomography.io.PET.prd.TimeBlock.delayed_events"]], "detector_1_id (pytomography.io.pet.prd.coincidenceevent attribute)": [[19, "pytomography.io.PET.prd.CoincidenceEvent.detector_1_id"]], "detector_2_id (pytomography.io.pet.prd.coincidenceevent attribute)": [[19, "pytomography.io.PET.prd.CoincidenceEvent.detector_2_id"]], "detectors (pytomography.io.pet.prd.scannerinformation attribute)": [[19, "pytomography.io.PET.prd.ScannerInformation.detectors"]], "energy_1_idx (pytomography.io.pet.prd.coincidenceevent attribute)": [[19, "pytomography.io.PET.prd.CoincidenceEvent.energy_1_idx"]], "energy_2_idx (pytomography.io.pet.prd.coincidenceevent attribute)": [[19, "pytomography.io.PET.prd.CoincidenceEvent.energy_2_idx"]], "energy_bin_edges (pytomography.io.pet.prd.scannerinformation attribute)": [[19, "pytomography.io.PET.prd.ScannerInformation.energy_bin_edges"]], "energy_resolution_at_511 (pytomography.io.pet.prd.scannerinformation attribute)": [[19, "pytomography.io.PET.prd.ScannerInformation.energy_resolution_at_511"]], "exam (pytomography.io.pet.prd.header attribute)": [[19, "pytomography.io.PET.prd.Header.exam"]], "from_components() (pytomography.io.pet.prd.datetime static method)": [[19, "pytomography.io.PET.prd.DateTime.from_components"]], "from_components() (pytomography.io.pet.prd.time static method)": [[19, "pytomography.io.PET.prd.Time.from_components"]], "from_datetime() (pytomography.io.pet.prd.datetime static method)": [[19, "pytomography.io.PET.prd.DateTime.from_datetime"]], "from_time() (pytomography.io.pet.prd.time static method)": [[19, "pytomography.io.PET.prd.Time.from_time"]], "get_dtype (in module pytomography.io.pet.prd)": [[19, "pytomography.io.PET.prd.get_dtype"]], "id (pytomography.io.pet.prd.detector attribute)": [[19, "pytomography.io.PET.prd.Detector.id"]], "id (pytomography.io.pet.prd.subject attribute)": [[19, "pytomography.io.PET.prd.Subject.id"]], "id (pytomography.io.pet.prd.timeblock attribute)": [[19, "pytomography.io.PET.prd.TimeBlock.id"]], "index (pytomography.io.pet.prd.unioncase attribute)": [[19, "pytomography.io.PET.prd.UnionCase.index"]], "institution (pytomography.io.pet.prd.examinformation attribute)": [[19, "pytomography.io.PET.prd.ExamInformation.institution"]], "listmode_time_block_duration (pytomography.io.pet.prd.scannerinformation attribute)": [[19, "pytomography.io.PET.prd.ScannerInformation.listmode_time_block_duration"]], "model_name (pytomography.io.pet.prd.scannerinformation attribute)": [[19, "pytomography.io.PET.prd.ScannerInformation.model_name"]], "name (pytomography.io.pet.prd.institution attribute)": [[19, "pytomography.io.PET.prd.Institution.name"]], "name (pytomography.io.pet.prd.subject attribute)": [[19, "pytomography.io.PET.prd.Subject.name"]], "now() (pytomography.io.pet.prd.datetime static method)": [[19, "pytomography.io.PET.prd.DateTime.now"]], "number_of_detectors() (pytomography.io.pet.prd.scannerinformation method)": [[19, "pytomography.io.PET.prd.ScannerInformation.number_of_detectors"]], "number_of_energy_bins() (pytomography.io.pet.prd.scannerinformation method)": [[19, "pytomography.io.PET.prd.ScannerInformation.number_of_energy_bins"]], "number_of_time_frames() (pytomography.io.pet.prd.timeframeinformation method)": [[19, "pytomography.io.PET.prd.TimeFrameInformation.number_of_time_frames"]], "number_of_tof_bins() (pytomography.io.pet.prd.scannerinformation method)": [[19, "pytomography.io.PET.prd.ScannerInformation.number_of_tof_bins"]], "numpy_value (pytomography.io.pet.prd.datetime property)": [[19, "pytomography.io.PET.prd.DateTime.numpy_value"]], "numpy_value (pytomography.io.pet.prd.time property)": [[19, "pytomography.io.PET.prd.Time.numpy_value"]], "parse() (pytomography.io.pet.prd.datetime static method)": [[19, "pytomography.io.PET.prd.DateTime.parse"]], "parse() (pytomography.io.pet.prd.time static method)": [[19, "pytomography.io.PET.prd.Time.parse"]], "prompt_events (pytomography.io.pet.prd.timeblock attribute)": [[19, "pytomography.io.PET.prd.TimeBlock.prompt_events"]], "protocol (pytomography.io.pet.prd.examinformation attribute)": [[19, "pytomography.io.PET.prd.ExamInformation.protocol"]], "pytomography.io.pet.prd": [[19, "module-pytomography.io.PET.prd"]], "read_header() (pytomography.io.pet.prd.prdexperimentreaderbase method)": [[19, "pytomography.io.PET.prd.PrdExperimentReaderBase.read_header"]], "read_time_blocks() (pytomography.io.pet.prd.prdexperimentreaderbase method)": [[19, "pytomography.io.PET.prd.PrdExperimentReaderBase.read_time_blocks"]], "scanner (pytomography.io.pet.prd.header attribute)": [[19, "pytomography.io.PET.prd.Header.scanner"]], "schema (pytomography.io.pet.prd.prdexperimentreaderbase attribute)": [[19, "pytomography.io.PET.prd.PrdExperimentReaderBase.schema"]], "schema (pytomography.io.pet.prd.prdexperimentwriterbase attribute)": [[19, "pytomography.io.PET.prd.PrdExperimentWriterBase.schema"]], "start (pytomography.io.pet.prd.timeinterval attribute)": [[19, "pytomography.io.PET.prd.TimeInterval.start"]], "start_of_acquisition (pytomography.io.pet.prd.examinformation attribute)": [[19, "pytomography.io.PET.prd.ExamInformation.start_of_acquisition"]], "stop (pytomography.io.pet.prd.timeinterval attribute)": [[19, "pytomography.io.PET.prd.TimeInterval.stop"]], "structural_equal() (in module pytomography.io.pet.prd)": [[19, "pytomography.io.PET.prd.structural_equal"]], "subject (pytomography.io.pet.prd.examinformation attribute)": [[19, "pytomography.io.PET.prd.ExamInformation.subject"]], "tag (pytomography.io.pet.prd.unioncase attribute)": [[19, "pytomography.io.PET.prd.UnionCase.tag"]], "time_frames (pytomography.io.pet.prd.timeframeinformation attribute)": [[19, "pytomography.io.PET.prd.TimeFrameInformation.time_frames"]], "to_datetime() (pytomography.io.pet.prd.datetime method)": [[19, "pytomography.io.PET.prd.DateTime.to_datetime"]], "tof_bin_edges (pytomography.io.pet.prd.scannerinformation attribute)": [[19, "pytomography.io.PET.prd.ScannerInformation.tof_bin_edges"]], "tof_idx (pytomography.io.pet.prd.coincidenceevent attribute)": [[19, "pytomography.io.PET.prd.CoincidenceEvent.tof_idx"]], "tof_resolution (pytomography.io.pet.prd.scannerinformation attribute)": [[19, "pytomography.io.PET.prd.ScannerInformation.tof_resolution"]], "write_header() (pytomography.io.pet.prd.prdexperimentwriterbase method)": [[19, "pytomography.io.PET.prd.PrdExperimentWriterBase.write_header"]], "write_time_blocks() (pytomography.io.pet.prd.prdexperimentwriterbase method)": [[19, "pytomography.io.PET.prd.PrdExperimentWriterBase.write_time_blocks"]], "x (pytomography.io.pet.prd.detector attribute)": [[19, "pytomography.io.PET.prd.Detector.x"]], "y (pytomography.io.pet.prd.detector attribute)": [[19, "pytomography.io.PET.prd.Detector.y"]], "z (pytomography.io.pet.prd.detector attribute)": [[19, "pytomography.io.PET.prd.Detector.z"]], "ndjsonprdexperimentreader (class in pytomography.io.pet.prd.ndjson)": [[20, "pytomography.io.PET.prd.ndjson.NDJsonPrdExperimentReader"]], "ndjsonprdexperimentwriter (class in pytomography.io.pet.prd.ndjson)": [[20, "pytomography.io.PET.prd.ndjson.NDJsonPrdExperimentWriter"]], "_coincidenceeventconverter (class in pytomography.io.pet.prd.ndjson)": [[20, "pytomography.io.PET.prd.ndjson._CoincidenceEventConverter"]], "_detectorconverter (class in pytomography.io.pet.prd.ndjson)": [[20, "pytomography.io.PET.prd.ndjson._DetectorConverter"]], "_examinformationconverter (class in pytomography.io.pet.prd.ndjson)": [[20, "pytomography.io.PET.prd.ndjson._ExamInformationConverter"]], "_headerconverter (class in pytomography.io.pet.prd.ndjson)": [[20, "pytomography.io.PET.prd.ndjson._HeaderConverter"]], "_institutionconverter (class in pytomography.io.pet.prd.ndjson)": [[20, "pytomography.io.PET.prd.ndjson._InstitutionConverter"]], "_scannerinformationconverter (class in pytomography.io.pet.prd.ndjson)": [[20, "pytomography.io.PET.prd.ndjson._ScannerInformationConverter"]], "_subjectconverter (class in pytomography.io.pet.prd.ndjson)": [[20, "pytomography.io.PET.prd.ndjson._SubjectConverter"]], "_timeblockconverter (class in pytomography.io.pet.prd.ndjson)": [[20, "pytomography.io.PET.prd.ndjson._TimeBlockConverter"]], "_timeframeinformationconverter (class in pytomography.io.pet.prd.ndjson)": [[20, "pytomography.io.PET.prd.ndjson._TimeFrameInformationConverter"]], "_timeintervalconverter (class in pytomography.io.pet.prd.ndjson)": [[20, "pytomography.io.PET.prd.ndjson._TimeIntervalConverter"]], "_read_header() (pytomography.io.pet.prd.ndjson.ndjsonprdexperimentreader method)": [[20, "pytomography.io.PET.prd.ndjson.NDJsonPrdExperimentReader._read_header"]], "_read_time_blocks() (pytomography.io.pet.prd.ndjson.ndjsonprdexperimentreader method)": [[20, "pytomography.io.PET.prd.ndjson.NDJsonPrdExperimentReader._read_time_blocks"]], "_write_header() (pytomography.io.pet.prd.ndjson.ndjsonprdexperimentwriter method)": [[20, "pytomography.io.PET.prd.ndjson.NDJsonPrdExperimentWriter._write_header"]], "_write_time_blocks() (pytomography.io.pet.prd.ndjson.ndjsonprdexperimentwriter method)": [[20, "pytomography.io.PET.prd.ndjson.NDJsonPrdExperimentWriter._write_time_blocks"]], "from_json() (pytomography.io.pet.prd.ndjson._coincidenceeventconverter method)": [[20, "pytomography.io.PET.prd.ndjson._CoincidenceEventConverter.from_json"]], "from_json() (pytomography.io.pet.prd.ndjson._detectorconverter method)": [[20, "pytomography.io.PET.prd.ndjson._DetectorConverter.from_json"]], "from_json() (pytomography.io.pet.prd.ndjson._examinformationconverter method)": [[20, "pytomography.io.PET.prd.ndjson._ExamInformationConverter.from_json"]], "from_json() (pytomography.io.pet.prd.ndjson._headerconverter method)": [[20, "pytomography.io.PET.prd.ndjson._HeaderConverter.from_json"]], "from_json() (pytomography.io.pet.prd.ndjson._institutionconverter method)": [[20, "pytomography.io.PET.prd.ndjson._InstitutionConverter.from_json"]], "from_json() (pytomography.io.pet.prd.ndjson._scannerinformationconverter method)": [[20, "pytomography.io.PET.prd.ndjson._ScannerInformationConverter.from_json"]], "from_json() (pytomography.io.pet.prd.ndjson._subjectconverter method)": [[20, "pytomography.io.PET.prd.ndjson._SubjectConverter.from_json"]], "from_json() (pytomography.io.pet.prd.ndjson._timeblockconverter method)": [[20, "pytomography.io.PET.prd.ndjson._TimeBlockConverter.from_json"]], "from_json() (pytomography.io.pet.prd.ndjson._timeframeinformationconverter method)": [[20, "pytomography.io.PET.prd.ndjson._TimeFrameInformationConverter.from_json"]], "from_json() (pytomography.io.pet.prd.ndjson._timeintervalconverter method)": [[20, "pytomography.io.PET.prd.ndjson._TimeIntervalConverter.from_json"]], "from_json_to_numpy() (pytomography.io.pet.prd.ndjson._coincidenceeventconverter method)": [[20, "pytomography.io.PET.prd.ndjson._CoincidenceEventConverter.from_json_to_numpy"]], "from_json_to_numpy() (pytomography.io.pet.prd.ndjson._detectorconverter method)": [[20, "pytomography.io.PET.prd.ndjson._DetectorConverter.from_json_to_numpy"]], "from_json_to_numpy() (pytomography.io.pet.prd.ndjson._examinformationconverter method)": [[20, "pytomography.io.PET.prd.ndjson._ExamInformationConverter.from_json_to_numpy"]], "from_json_to_numpy() (pytomography.io.pet.prd.ndjson._headerconverter method)": [[20, "pytomography.io.PET.prd.ndjson._HeaderConverter.from_json_to_numpy"]], "from_json_to_numpy() (pytomography.io.pet.prd.ndjson._institutionconverter method)": [[20, "pytomography.io.PET.prd.ndjson._InstitutionConverter.from_json_to_numpy"]], "from_json_to_numpy() (pytomography.io.pet.prd.ndjson._scannerinformationconverter method)": [[20, "pytomography.io.PET.prd.ndjson._ScannerInformationConverter.from_json_to_numpy"]], "from_json_to_numpy() (pytomography.io.pet.prd.ndjson._subjectconverter method)": [[20, "pytomography.io.PET.prd.ndjson._SubjectConverter.from_json_to_numpy"]], "from_json_to_numpy() (pytomography.io.pet.prd.ndjson._timeblockconverter method)": [[20, "pytomography.io.PET.prd.ndjson._TimeBlockConverter.from_json_to_numpy"]], "from_json_to_numpy() (pytomography.io.pet.prd.ndjson._timeframeinformationconverter method)": [[20, "pytomography.io.PET.prd.ndjson._TimeFrameInformationConverter.from_json_to_numpy"]], "from_json_to_numpy() (pytomography.io.pet.prd.ndjson._timeintervalconverter method)": [[20, "pytomography.io.PET.prd.ndjson._TimeIntervalConverter.from_json_to_numpy"]], "numpy_to_json() (pytomography.io.pet.prd.ndjson._coincidenceeventconverter method)": [[20, "pytomography.io.PET.prd.ndjson._CoincidenceEventConverter.numpy_to_json"]], "numpy_to_json() (pytomography.io.pet.prd.ndjson._detectorconverter method)": [[20, "pytomography.io.PET.prd.ndjson._DetectorConverter.numpy_to_json"]], "numpy_to_json() (pytomography.io.pet.prd.ndjson._examinformationconverter method)": [[20, "pytomography.io.PET.prd.ndjson._ExamInformationConverter.numpy_to_json"]], "numpy_to_json() (pytomography.io.pet.prd.ndjson._headerconverter method)": [[20, "pytomography.io.PET.prd.ndjson._HeaderConverter.numpy_to_json"]], "numpy_to_json() (pytomography.io.pet.prd.ndjson._institutionconverter method)": [[20, "pytomography.io.PET.prd.ndjson._InstitutionConverter.numpy_to_json"]], "numpy_to_json() (pytomography.io.pet.prd.ndjson._scannerinformationconverter method)": [[20, "pytomography.io.PET.prd.ndjson._ScannerInformationConverter.numpy_to_json"]], "numpy_to_json() (pytomography.io.pet.prd.ndjson._subjectconverter method)": [[20, "pytomography.io.PET.prd.ndjson._SubjectConverter.numpy_to_json"]], "numpy_to_json() (pytomography.io.pet.prd.ndjson._timeblockconverter method)": [[20, "pytomography.io.PET.prd.ndjson._TimeBlockConverter.numpy_to_json"]], "numpy_to_json() (pytomography.io.pet.prd.ndjson._timeframeinformationconverter method)": [[20, "pytomography.io.PET.prd.ndjson._TimeFrameInformationConverter.numpy_to_json"]], "numpy_to_json() (pytomography.io.pet.prd.ndjson._timeintervalconverter method)": [[20, "pytomography.io.PET.prd.ndjson._TimeIntervalConverter.numpy_to_json"]], "pytomography.io.pet.prd.ndjson": [[20, "module-pytomography.io.PET.prd.ndjson"]], "to_json() (pytomography.io.pet.prd.ndjson._coincidenceeventconverter method)": [[20, "pytomography.io.PET.prd.ndjson._CoincidenceEventConverter.to_json"]], "to_json() (pytomography.io.pet.prd.ndjson._detectorconverter method)": [[20, "pytomography.io.PET.prd.ndjson._DetectorConverter.to_json"]], "to_json() (pytomography.io.pet.prd.ndjson._examinformationconverter method)": [[20, "pytomography.io.PET.prd.ndjson._ExamInformationConverter.to_json"]], "to_json() (pytomography.io.pet.prd.ndjson._headerconverter method)": [[20, "pytomography.io.PET.prd.ndjson._HeaderConverter.to_json"]], "to_json() (pytomography.io.pet.prd.ndjson._institutionconverter method)": [[20, "pytomography.io.PET.prd.ndjson._InstitutionConverter.to_json"]], "to_json() (pytomography.io.pet.prd.ndjson._scannerinformationconverter method)": [[20, "pytomography.io.PET.prd.ndjson._ScannerInformationConverter.to_json"]], "to_json() (pytomography.io.pet.prd.ndjson._subjectconverter method)": [[20, "pytomography.io.PET.prd.ndjson._SubjectConverter.to_json"]], "to_json() (pytomography.io.pet.prd.ndjson._timeblockconverter method)": [[20, "pytomography.io.PET.prd.ndjson._TimeBlockConverter.to_json"]], "to_json() (pytomography.io.pet.prd.ndjson._timeframeinformationconverter method)": [[20, "pytomography.io.PET.prd.ndjson._TimeFrameInformationConverter.to_json"]], "to_json() (pytomography.io.pet.prd.ndjson._timeintervalconverter method)": [[20, "pytomography.io.PET.prd.ndjson._TimeIntervalConverter.to_json"]], "prdexperimentreaderbase (class in pytomography.io.pet.prd.protocols)": [[21, "pytomography.io.PET.prd.protocols.PrdExperimentReaderBase"]], "prdexperimentwriterbase (class in pytomography.io.pet.prd.protocols)": [[21, "pytomography.io.PET.prd.protocols.PrdExperimentWriterBase"]], "t (pytomography.io.pet.prd.protocols.prdexperimentreaderbase attribute)": [[21, "pytomography.io.PET.prd.protocols.PrdExperimentReaderBase.T"]], "__enter__() (pytomography.io.pet.prd.protocols.prdexperimentreaderbase method)": [[21, "pytomography.io.PET.prd.protocols.PrdExperimentReaderBase.__enter__"]], "__enter__() (pytomography.io.pet.prd.protocols.prdexperimentwriterbase method)": [[21, "pytomography.io.PET.prd.protocols.PrdExperimentWriterBase.__enter__"]], "__exit__() (pytomography.io.pet.prd.protocols.prdexperimentreaderbase method)": [[21, "pytomography.io.PET.prd.protocols.PrdExperimentReaderBase.__exit__"]], "__exit__() (pytomography.io.pet.prd.protocols.prdexperimentwriterbase method)": [[21, "pytomography.io.PET.prd.protocols.PrdExperimentWriterBase.__exit__"]], "_end_stream() (pytomography.io.pet.prd.protocols.prdexperimentwriterbase method)": [[21, "pytomography.io.PET.prd.protocols.PrdExperimentWriterBase._end_stream"]], "_raise_unexpected_state() (pytomography.io.pet.prd.protocols.prdexperimentreaderbase method)": [[21, "pytomography.io.PET.prd.protocols.PrdExperimentReaderBase._raise_unexpected_state"]], "_raise_unexpected_state() (pytomography.io.pet.prd.protocols.prdexperimentwriterbase method)": [[21, "pytomography.io.PET.prd.protocols.PrdExperimentWriterBase._raise_unexpected_state"]], "_read_header() (pytomography.io.pet.prd.protocols.prdexperimentreaderbase method)": [[21, "pytomography.io.PET.prd.protocols.PrdExperimentReaderBase._read_header"]], "_read_time_blocks() (pytomography.io.pet.prd.protocols.prdexperimentreaderbase method)": [[21, "pytomography.io.PET.prd.protocols.PrdExperimentReaderBase._read_time_blocks"]], "_state_to_method_name() (pytomography.io.pet.prd.protocols.prdexperimentreaderbase method)": [[21, "pytomography.io.PET.prd.protocols.PrdExperimentReaderBase._state_to_method_name"]], "_state_to_method_name() (pytomography.io.pet.prd.protocols.prdexperimentwriterbase method)": [[21, "pytomography.io.PET.prd.protocols.PrdExperimentWriterBase._state_to_method_name"]], "_wrap_iterable() (pytomography.io.pet.prd.protocols.prdexperimentreaderbase method)": [[21, "pytomography.io.PET.prd.protocols.PrdExperimentReaderBase._wrap_iterable"]], "_write_header() (pytomography.io.pet.prd.protocols.prdexperimentwriterbase method)": [[21, "pytomography.io.PET.prd.protocols.PrdExperimentWriterBase._write_header"]], "_write_time_blocks() (pytomography.io.pet.prd.protocols.prdexperimentwriterbase method)": [[21, "pytomography.io.PET.prd.protocols.PrdExperimentWriterBase._write_time_blocks"]], "close() (pytomography.io.pet.prd.protocols.prdexperimentreaderbase method)": [[21, "pytomography.io.PET.prd.protocols.PrdExperimentReaderBase.close"]], "close() (pytomography.io.pet.prd.protocols.prdexperimentwriterbase method)": [[21, "pytomography.io.PET.prd.protocols.PrdExperimentWriterBase.close"]], "copy_to() (pytomography.io.pet.prd.protocols.prdexperimentreaderbase method)": [[21, "pytomography.io.PET.prd.protocols.PrdExperimentReaderBase.copy_to"]], "pytomography.io.pet.prd.protocols": [[21, "module-pytomography.io.PET.prd.protocols"]], "read_header() (pytomography.io.pet.prd.protocols.prdexperimentreaderbase method)": [[21, "pytomography.io.PET.prd.protocols.PrdExperimentReaderBase.read_header"]], "read_time_blocks() (pytomography.io.pet.prd.protocols.prdexperimentreaderbase method)": [[21, "pytomography.io.PET.prd.protocols.PrdExperimentReaderBase.read_time_blocks"]], "schema (pytomography.io.pet.prd.protocols.prdexperimentreaderbase attribute)": [[21, "pytomography.io.PET.prd.protocols.PrdExperimentReaderBase.schema"]], "schema (pytomography.io.pet.prd.protocols.prdexperimentwriterbase attribute)": [[21, "pytomography.io.PET.prd.protocols.PrdExperimentWriterBase.schema"]], "write_header() (pytomography.io.pet.prd.protocols.prdexperimentwriterbase method)": [[21, "pytomography.io.PET.prd.protocols.PrdExperimentWriterBase.write_header"]], "write_time_blocks() (pytomography.io.pet.prd.protocols.prdexperimentwriterbase method)": [[21, "pytomography.io.PET.prd.protocols.PrdExperimentWriterBase.write_time_blocks"]], "coincidenceevent (class in pytomography.io.pet.prd.types)": [[22, "pytomography.io.PET.prd.types.CoincidenceEvent"]], "detector (class in pytomography.io.pet.prd.types)": [[22, "pytomography.io.PET.prd.types.Detector"]], "examinformation (class in pytomography.io.pet.prd.types)": [[22, "pytomography.io.PET.prd.types.ExamInformation"]], "header (class in pytomography.io.pet.prd.types)": [[22, "pytomography.io.PET.prd.types.Header"]], "institution (class in pytomography.io.pet.prd.types)": [[22, "pytomography.io.PET.prd.types.Institution"]], "scannerinformation (class in pytomography.io.pet.prd.types)": [[22, "pytomography.io.PET.prd.types.ScannerInformation"]], "subject (class in pytomography.io.pet.prd.types)": [[22, "pytomography.io.PET.prd.types.Subject"]], "timeblock (class in pytomography.io.pet.prd.types)": [[22, "pytomography.io.PET.prd.types.TimeBlock"]], "timeframeinformation (class in pytomography.io.pet.prd.types)": [[22, "pytomography.io.PET.prd.types.TimeFrameInformation"]], "timeinterval (class in pytomography.io.pet.prd.types)": [[22, "pytomography.io.PET.prd.types.TimeInterval"]], "__eq__() (pytomography.io.pet.prd.types.coincidenceevent method)": [[22, "pytomography.io.PET.prd.types.CoincidenceEvent.__eq__"]], "__eq__() (pytomography.io.pet.prd.types.detector method)": [[22, "pytomography.io.PET.prd.types.Detector.__eq__"]], "__eq__() (pytomography.io.pet.prd.types.examinformation method)": [[22, "pytomography.io.PET.prd.types.ExamInformation.__eq__"]], "__eq__() (pytomography.io.pet.prd.types.header method)": [[22, "pytomography.io.PET.prd.types.Header.__eq__"]], "__eq__() (pytomography.io.pet.prd.types.institution method)": [[22, "pytomography.io.PET.prd.types.Institution.__eq__"]], "__eq__() (pytomography.io.pet.prd.types.scannerinformation method)": [[22, "pytomography.io.PET.prd.types.ScannerInformation.__eq__"]], "__eq__() (pytomography.io.pet.prd.types.subject method)": [[22, "pytomography.io.PET.prd.types.Subject.__eq__"]], "__eq__() (pytomography.io.pet.prd.types.timeblock method)": [[22, "pytomography.io.PET.prd.types.TimeBlock.__eq__"]], "__eq__() (pytomography.io.pet.prd.types.timeframeinformation method)": [[22, "pytomography.io.PET.prd.types.TimeFrameInformation.__eq__"]], "__eq__() (pytomography.io.pet.prd.types.timeinterval method)": [[22, "pytomography.io.PET.prd.types.TimeInterval.__eq__"]], "__repr__() (pytomography.io.pet.prd.types.coincidenceevent method)": [[22, "pytomography.io.PET.prd.types.CoincidenceEvent.__repr__"]], "__repr__() (pytomography.io.pet.prd.types.detector method)": [[22, "pytomography.io.PET.prd.types.Detector.__repr__"]], "__repr__() (pytomography.io.pet.prd.types.examinformation method)": [[22, "pytomography.io.PET.prd.types.ExamInformation.__repr__"]], "__repr__() (pytomography.io.pet.prd.types.header method)": [[22, "pytomography.io.PET.prd.types.Header.__repr__"]], "__repr__() (pytomography.io.pet.prd.types.institution method)": [[22, "pytomography.io.PET.prd.types.Institution.__repr__"]], "__repr__() (pytomography.io.pet.prd.types.scannerinformation method)": [[22, "pytomography.io.PET.prd.types.ScannerInformation.__repr__"]], "__repr__() (pytomography.io.pet.prd.types.subject method)": [[22, "pytomography.io.PET.prd.types.Subject.__repr__"]], "__repr__() (pytomography.io.pet.prd.types.timeblock method)": [[22, "pytomography.io.PET.prd.types.TimeBlock.__repr__"]], "__repr__() (pytomography.io.pet.prd.types.timeframeinformation method)": [[22, "pytomography.io.PET.prd.types.TimeFrameInformation.__repr__"]], "__repr__() (pytomography.io.pet.prd.types.timeinterval method)": [[22, "pytomography.io.PET.prd.types.TimeInterval.__repr__"]], "__str__() (pytomography.io.pet.prd.types.coincidenceevent method)": [[22, "pytomography.io.PET.prd.types.CoincidenceEvent.__str__"]], "__str__() (pytomography.io.pet.prd.types.detector method)": [[22, "pytomography.io.PET.prd.types.Detector.__str__"]], "__str__() (pytomography.io.pet.prd.types.examinformation method)": [[22, "pytomography.io.PET.prd.types.ExamInformation.__str__"]], "__str__() (pytomography.io.pet.prd.types.header method)": [[22, "pytomography.io.PET.prd.types.Header.__str__"]], "__str__() (pytomography.io.pet.prd.types.institution method)": [[22, "pytomography.io.PET.prd.types.Institution.__str__"]], "__str__() (pytomography.io.pet.prd.types.scannerinformation method)": [[22, "pytomography.io.PET.prd.types.ScannerInformation.__str__"]], "__str__() (pytomography.io.pet.prd.types.subject method)": [[22, "pytomography.io.PET.prd.types.Subject.__str__"]], "__str__() (pytomography.io.pet.prd.types.timeblock method)": [[22, "pytomography.io.PET.prd.types.TimeBlock.__str__"]], "__str__() (pytomography.io.pet.prd.types.timeframeinformation method)": [[22, "pytomography.io.PET.prd.types.TimeFrameInformation.__str__"]], "__str__() (pytomography.io.pet.prd.types.timeinterval method)": [[22, "pytomography.io.PET.prd.types.TimeInterval.__str__"]], "_mk_get_dtype() (in module pytomography.io.pet.prd.types)": [[22, "pytomography.io.PET.prd.types._mk_get_dtype"]], "address (pytomography.io.pet.prd.types.institution attribute)": [[22, "pytomography.io.PET.prd.types.Institution.address"]], "delayed_events (pytomography.io.pet.prd.types.timeblock attribute)": [[22, "pytomography.io.PET.prd.types.TimeBlock.delayed_events"]], "detector_1_id (pytomography.io.pet.prd.types.coincidenceevent attribute)": [[22, "pytomography.io.PET.prd.types.CoincidenceEvent.detector_1_id"]], "detector_2_id (pytomography.io.pet.prd.types.coincidenceevent attribute)": [[22, "pytomography.io.PET.prd.types.CoincidenceEvent.detector_2_id"]], "detectors (pytomography.io.pet.prd.types.scannerinformation attribute)": [[22, "pytomography.io.PET.prd.types.ScannerInformation.detectors"]], "energy_1_idx (pytomography.io.pet.prd.types.coincidenceevent attribute)": [[22, "pytomography.io.PET.prd.types.CoincidenceEvent.energy_1_idx"]], "energy_2_idx (pytomography.io.pet.prd.types.coincidenceevent attribute)": [[22, "pytomography.io.PET.prd.types.CoincidenceEvent.energy_2_idx"]], "energy_bin_edges (pytomography.io.pet.prd.types.scannerinformation attribute)": [[22, "pytomography.io.PET.prd.types.ScannerInformation.energy_bin_edges"]], "energy_resolution_at_511 (pytomography.io.pet.prd.types.scannerinformation attribute)": [[22, "pytomography.io.PET.prd.types.ScannerInformation.energy_resolution_at_511"]], "exam (pytomography.io.pet.prd.types.header attribute)": [[22, "pytomography.io.PET.prd.types.Header.exam"]], "get_dtype (in module pytomography.io.pet.prd.types)": [[22, "pytomography.io.PET.prd.types.get_dtype"]], "id (pytomography.io.pet.prd.types.detector attribute)": [[22, "pytomography.io.PET.prd.types.Detector.id"]], "id (pytomography.io.pet.prd.types.subject attribute)": [[22, "pytomography.io.PET.prd.types.Subject.id"]], "id (pytomography.io.pet.prd.types.timeblock attribute)": [[22, "pytomography.io.PET.prd.types.TimeBlock.id"]], "institution (pytomography.io.pet.prd.types.examinformation attribute)": [[22, "pytomography.io.PET.prd.types.ExamInformation.institution"]], "listmode_time_block_duration (pytomography.io.pet.prd.types.scannerinformation attribute)": [[22, "pytomography.io.PET.prd.types.ScannerInformation.listmode_time_block_duration"]], "model_name (pytomography.io.pet.prd.types.scannerinformation attribute)": [[22, "pytomography.io.PET.prd.types.ScannerInformation.model_name"]], "name (pytomography.io.pet.prd.types.institution attribute)": [[22, "pytomography.io.PET.prd.types.Institution.name"]], "name (pytomography.io.pet.prd.types.subject attribute)": [[22, "pytomography.io.PET.prd.types.Subject.name"]], "number_of_detectors() (pytomography.io.pet.prd.types.scannerinformation method)": [[22, "pytomography.io.PET.prd.types.ScannerInformation.number_of_detectors"]], "number_of_energy_bins() (pytomography.io.pet.prd.types.scannerinformation method)": [[22, "pytomography.io.PET.prd.types.ScannerInformation.number_of_energy_bins"]], "number_of_time_frames() (pytomography.io.pet.prd.types.timeframeinformation method)": [[22, "pytomography.io.PET.prd.types.TimeFrameInformation.number_of_time_frames"]], "number_of_tof_bins() (pytomography.io.pet.prd.types.scannerinformation method)": [[22, "pytomography.io.PET.prd.types.ScannerInformation.number_of_tof_bins"]], "prompt_events (pytomography.io.pet.prd.types.timeblock attribute)": [[22, "pytomography.io.PET.prd.types.TimeBlock.prompt_events"]], "protocol (pytomography.io.pet.prd.types.examinformation attribute)": [[22, "pytomography.io.PET.prd.types.ExamInformation.protocol"]], "pytomography.io.pet.prd.types": [[22, "module-pytomography.io.PET.prd.types"]], "scanner (pytomography.io.pet.prd.types.header attribute)": [[22, "pytomography.io.PET.prd.types.Header.scanner"]], "start (pytomography.io.pet.prd.types.timeinterval attribute)": [[22, "pytomography.io.PET.prd.types.TimeInterval.start"]], "start_of_acquisition (pytomography.io.pet.prd.types.examinformation attribute)": [[22, "pytomography.io.PET.prd.types.ExamInformation.start_of_acquisition"]], "stop (pytomography.io.pet.prd.types.timeinterval attribute)": [[22, "pytomography.io.PET.prd.types.TimeInterval.stop"]], "subject (pytomography.io.pet.prd.types.examinformation attribute)": [[22, "pytomography.io.PET.prd.types.ExamInformation.subject"]], "time_frames (pytomography.io.pet.prd.types.timeframeinformation attribute)": [[22, "pytomography.io.PET.prd.types.TimeFrameInformation.time_frames"]], "tof_bin_edges (pytomography.io.pet.prd.types.scannerinformation attribute)": [[22, "pytomography.io.PET.prd.types.ScannerInformation.tof_bin_edges"]], "tof_idx (pytomography.io.pet.prd.types.coincidenceevent attribute)": [[22, "pytomography.io.PET.prd.types.CoincidenceEvent.tof_idx"]], "tof_resolution (pytomography.io.pet.prd.types.scannerinformation attribute)": [[22, "pytomography.io.PET.prd.types.ScannerInformation.tof_resolution"]], "x (pytomography.io.pet.prd.types.detector attribute)": [[22, "pytomography.io.PET.prd.types.Detector.x"]], "y (pytomography.io.pet.prd.types.detector attribute)": [[22, "pytomography.io.PET.prd.types.Detector.y"]], "z (pytomography.io.pet.prd.types.detector attribute)": [[22, "pytomography.io.PET.prd.types.Detector.z"]], "complexdouble (in module pytomography.io.pet.prd.yardl_types)": [[23, "pytomography.io.PET.prd.yardl_types.ComplexDouble"]], "complexfloat (in module pytomography.io.pet.prd.yardl_types)": [[23, "pytomography.io.PET.prd.yardl_types.ComplexFloat"]], "datetime (class in pytomography.io.pet.prd.yardl_types)": [[23, "pytomography.io.PET.prd.yardl_types.DateTime"]], "float32 (in module pytomography.io.pet.prd.yardl_types)": [[23, "pytomography.io.PET.prd.yardl_types.Float32"]], "float64 (in module pytomography.io.pet.prd.yardl_types)": [[23, "pytomography.io.PET.prd.yardl_types.Float64"]], "int16 (in module pytomography.io.pet.prd.yardl_types)": [[23, "pytomography.io.PET.prd.yardl_types.Int16"]], "int32 (in module pytomography.io.pet.prd.yardl_types)": [[23, "pytomography.io.PET.prd.yardl_types.Int32"]], "int64 (in module pytomography.io.pet.prd.yardl_types)": [[23, "pytomography.io.PET.prd.yardl_types.Int64"]], "int8 (in module pytomography.io.pet.prd.yardl_types)": [[23, "pytomography.io.PET.prd.yardl_types.Int8"]], "outofrangeenum (class in pytomography.io.pet.prd.yardl_types)": [[23, "pytomography.io.PET.prd.yardl_types.OutOfRangeEnum"]], "size (in module pytomography.io.pet.prd.yardl_types)": [[23, "pytomography.io.PET.prd.yardl_types.Size"]], "time (class in pytomography.io.pet.prd.yardl_types)": [[23, "pytomography.io.PET.prd.yardl_types.Time"]], "uint16 (in module pytomography.io.pet.prd.yardl_types)": [[23, "pytomography.io.PET.prd.yardl_types.UInt16"]], "uint32 (in module pytomography.io.pet.prd.yardl_types)": [[23, "pytomography.io.PET.prd.yardl_types.UInt32"]], "uint64 (in module pytomography.io.pet.prd.yardl_types)": [[23, "pytomography.io.PET.prd.yardl_types.UInt64"]], "uint8 (in module pytomography.io.pet.prd.yardl_types)": [[23, "pytomography.io.PET.prd.yardl_types.UInt8"]], "unioncase (class in pytomography.io.pet.prd.yardl_types)": [[23, "pytomography.io.PET.prd.yardl_types.UnionCase"]], "_nanoseconds_per_day (pytomography.io.pet.prd.yardl_types.time attribute)": [[23, "pytomography.io.PET.prd.yardl_types.Time._NANOSECONDS_PER_DAY"]], "_t (in module pytomography.io.pet.prd.yardl_types)": [[23, "pytomography.io.PET.prd.yardl_types._T"]], "__eq__() (pytomography.io.pet.prd.yardl_types.datetime method)": [[23, "pytomography.io.PET.prd.yardl_types.DateTime.__eq__"]], "__eq__() (pytomography.io.pet.prd.yardl_types.outofrangeenum method)": [[23, "pytomography.io.PET.prd.yardl_types.OutOfRangeEnum.__eq__"]], "__eq__() (pytomography.io.pet.prd.yardl_types.time method)": [[23, "pytomography.io.PET.prd.yardl_types.Time.__eq__"]], "__eq__() (pytomography.io.pet.prd.yardl_types.unioncase method)": [[23, "pytomography.io.PET.prd.yardl_types.UnionCase.__eq__"]], "__hash__() (pytomography.io.pet.prd.yardl_types.datetime method)": [[23, "pytomography.io.PET.prd.yardl_types.DateTime.__hash__"]], "__hash__() (pytomography.io.pet.prd.yardl_types.outofrangeenum method)": [[23, "pytomography.io.PET.prd.yardl_types.OutOfRangeEnum.__hash__"]], "__repr__() (pytomography.io.pet.prd.yardl_types.datetime method)": [[23, "pytomography.io.PET.prd.yardl_types.DateTime.__repr__"]], "__repr__() (pytomography.io.pet.prd.yardl_types.outofrangeenum method)": [[23, "pytomography.io.PET.prd.yardl_types.OutOfRangeEnum.__repr__"]], "__repr__() (pytomography.io.pet.prd.yardl_types.time method)": [[23, "pytomography.io.PET.prd.yardl_types.Time.__repr__"]], "__repr__() (pytomography.io.pet.prd.yardl_types.unioncase method)": [[23, "pytomography.io.PET.prd.yardl_types.UnionCase.__repr__"]], "__str__() (pytomography.io.pet.prd.yardl_types.datetime method)": [[23, "pytomography.io.PET.prd.yardl_types.DateTime.__str__"]], "__str__() (pytomography.io.pet.prd.yardl_types.outofrangeenum method)": [[23, "pytomography.io.PET.prd.yardl_types.OutOfRangeEnum.__str__"]], "__str__() (pytomography.io.pet.prd.yardl_types.time method)": [[23, "pytomography.io.PET.prd.yardl_types.Time.__str__"]], "__str__() (pytomography.io.pet.prd.yardl_types.unioncase method)": [[23, "pytomography.io.PET.prd.yardl_types.UnionCase.__str__"]], "_missing_() (pytomography.io.pet.prd.yardl_types.outofrangeenum class method)": [[23, "pytomography.io.PET.prd.yardl_types.OutOfRangeEnum._missing_"]], "from_components() (pytomography.io.pet.prd.yardl_types.datetime static method)": [[23, "pytomography.io.PET.prd.yardl_types.DateTime.from_components"]], "from_components() (pytomography.io.pet.prd.yardl_types.time static method)": [[23, "pytomography.io.PET.prd.yardl_types.Time.from_components"]], "from_datetime() (pytomography.io.pet.prd.yardl_types.datetime static method)": [[23, "pytomography.io.PET.prd.yardl_types.DateTime.from_datetime"]], "from_time() (pytomography.io.pet.prd.yardl_types.time static method)": [[23, "pytomography.io.PET.prd.yardl_types.Time.from_time"]], "index (pytomography.io.pet.prd.yardl_types.unioncase attribute)": [[23, "pytomography.io.PET.prd.yardl_types.UnionCase.index"]], "now() (pytomography.io.pet.prd.yardl_types.datetime static method)": [[23, "pytomography.io.PET.prd.yardl_types.DateTime.now"]], "numpy_value (pytomography.io.pet.prd.yardl_types.datetime property)": [[23, "pytomography.io.PET.prd.yardl_types.DateTime.numpy_value"]], "numpy_value (pytomography.io.pet.prd.yardl_types.time property)": [[23, "pytomography.io.PET.prd.yardl_types.Time.numpy_value"]], "parse() (pytomography.io.pet.prd.yardl_types.datetime static method)": [[23, "pytomography.io.PET.prd.yardl_types.DateTime.parse"]], "parse() (pytomography.io.pet.prd.yardl_types.time static method)": [[23, "pytomography.io.PET.prd.yardl_types.Time.parse"]], "pytomography.io.pet.prd.yardl_types": [[23, "module-pytomography.io.PET.prd.yardl_types"]], "structural_equal() (in module pytomography.io.pet.prd.yardl_types)": [[23, "pytomography.io.PET.prd.yardl_types.structural_equal"]], "tag (pytomography.io.pet.prd.yardl_types.unioncase attribute)": [[23, "pytomography.io.PET.prd.yardl_types.UnionCase.tag"]], "to_datetime() (pytomography.io.pet.prd.yardl_types.datetime method)": [[23, "pytomography.io.PET.prd.yardl_types.DateTime.to_datetime"]], "ct_to_mumap() (in module pytomography.io.spect.dicom)": [[24, "pytomography.io.SPECT.dicom.CT_to_mumap"]], "_get_affine_spect_projections() (in module pytomography.io.spect.dicom)": [[24, "pytomography.io.SPECT.dicom._get_affine_spect_projections"]], "get_aligned_rtstruct() (in module pytomography.io.spect.dicom)": [[24, "pytomography.io.SPECT.dicom.get_aligned_rtstruct"]], "get_attenuation_map_from_ct_slices() (in module pytomography.io.spect.dicom)": [[24, "pytomography.io.SPECT.dicom.get_attenuation_map_from_CT_slices"]], "get_attenuation_map_from_file() (in module pytomography.io.spect.dicom)": [[24, "pytomography.io.SPECT.dicom.get_attenuation_map_from_file"]], "get_metadata() (in module pytomography.io.spect.dicom)": [[24, "pytomography.io.SPECT.dicom.get_metadata"]], "get_projections() (in module pytomography.io.spect.dicom)": [[24, "pytomography.io.SPECT.dicom.get_projections"]], "get_psfmeta_from_scanner_params() (in module pytomography.io.spect.dicom)": [[24, "pytomography.io.SPECT.dicom.get_psfmeta_from_scanner_params"]], "get_scatter_from_tew() (in module pytomography.io.spect.dicom)": [[24, "pytomography.io.SPECT.dicom.get_scatter_from_TEW"]], "get_window_width() (in module pytomography.io.spect.dicom)": [[24, "pytomography.io.SPECT.dicom.get_window_width"]], "parse_projection_dataset() (in module pytomography.io.spect.dicom)": [[24, "pytomography.io.SPECT.dicom.parse_projection_dataset"]], "pytomography.io.spect.dicom": [[24, "module-pytomography.io.SPECT.dicom"]], "save_dcm() (in module pytomography.io.spect.dicom)": [[24, "pytomography.io.SPECT.dicom.save_dcm"]], "stitch_multibed() (in module pytomography.io.spect.dicom)": [[24, "pytomography.io.SPECT.dicom.stitch_multibed"]], "ct_to_mumap() (in module pytomography.io.spect)": [[25, "pytomography.io.SPECT.CT_to_mumap"]], "get_attenuation_map() (in module pytomography.io.spect)": [[25, "pytomography.io.SPECT.get_attenuation_map"]], "get_attenuation_map_from_ct_slices() (in module pytomography.io.spect)": [[25, "pytomography.io.SPECT.get_attenuation_map_from_CT_slices"]], "get_attenuation_map_from_file() (in module pytomography.io.spect)": [[25, "pytomography.io.SPECT.get_attenuation_map_from_file"]], "get_projections() (in module pytomography.io.spect)": [[25, "pytomography.io.SPECT.get_projections"]], "get_psfmeta_from_scanner_params() (in module pytomography.io.spect)": [[25, "pytomography.io.SPECT.get_psfmeta_from_scanner_params"]], "get_scatter_from_tew() (in module pytomography.io.spect)": [[25, "pytomography.io.SPECT.get_scatter_from_TEW"]], "pytomography.io.spect": [[25, "module-pytomography.io.SPECT"]], "reduce_amap() (in module pytomography.io.spect)": [[25, "pytomography.io.SPECT.reduce_amap"]], "reduce_projections() (in module pytomography.io.spect)": [[25, "pytomography.io.SPECT.reduce_projections"]], "pytomography.io.spect.shared": [[26, "module-pytomography.io.SPECT.shared"]], "reduce_amap() (in module pytomography.io.spect.shared)": [[26, "pytomography.io.SPECT.shared.reduce_amap"]], "reduce_projections() (in module pytomography.io.spect.shared)": [[26, "pytomography.io.SPECT.shared.reduce_projections"]], "subsample_projections() (in module pytomography.io.spect.shared)": [[26, "pytomography.io.SPECT.shared.subsample_projections"]], "_get_projections_from_single_file() (in module pytomography.io.spect.simind)": [[27, "pytomography.io.SPECT.simind._get_projections_from_single_file"]], "combine_projection_data() (in module pytomography.io.spect.simind)": [[27, "pytomography.io.SPECT.simind.combine_projection_data"]], "combine_scatter_data_tew() (in module pytomography.io.spect.simind)": [[27, "pytomography.io.SPECT.simind.combine_scatter_data_TEW"]], "get_attenuation_map() (in module pytomography.io.spect.simind)": [[27, "pytomography.io.SPECT.simind.get_attenuation_map"]], "get_energy_window_width() (in module pytomography.io.spect.simind)": [[27, "pytomography.io.SPECT.simind.get_energy_window_width"]], "get_metadata() (in module pytomography.io.spect.simind)": [[27, "pytomography.io.SPECT.simind.get_metadata"]], "get_projections() (in module pytomography.io.spect.simind)": [[27, "pytomography.io.SPECT.simind.get_projections"]], "get_psfmeta_from_header() (in module pytomography.io.spect.simind)": [[27, "pytomography.io.SPECT.simind.get_psfmeta_from_header"]], "get_scatter_from_tew() (in module pytomography.io.spect.simind)": [[27, "pytomography.io.SPECT.simind.get_scatter_from_TEW"]], "pytomography.io.spect.simind": [[27, "module-pytomography.io.SPECT.simind"]], "relation_dict (in module pytomography.io.spect.simind)": [[27, "pytomography.io.SPECT.simind.relation_dict"]], "pytomography.io": [[28, "module-pytomography.io"]], "_get_affine_multifile() (in module pytomography.io.shared.dicom)": [[29, "pytomography.io.shared.dicom._get_affine_multifile"]], "align_images_affine() (in module pytomography.io.shared.dicom)": [[29, "pytomography.io.shared.dicom.align_images_affine"]], "compute_max_slice_loc_multifile() (in module pytomography.io.shared.dicom)": [[29, "pytomography.io.shared.dicom.compute_max_slice_loc_multifile"]], "compute_slice_thickness_multifile() (in module pytomography.io.shared.dicom)": [[29, "pytomography.io.shared.dicom.compute_slice_thickness_multifile"]], "open_multifile() (in module pytomography.io.shared.dicom)": [[29, "pytomography.io.shared.dicom.open_multifile"]], "pytomography.io.shared.dicom": [[29, "module-pytomography.io.shared.dicom"]], "add_patient_information() (in module pytomography.io.shared.dicom_creation)": [[30, "pytomography.io.shared.dicom_creation.add_patient_information"]], "add_required_elements_to_ds() (in module pytomography.io.shared.dicom_creation)": [[30, "pytomography.io.shared.dicom_creation.add_required_elements_to_ds"]], "add_study_and_series_information() (in module pytomography.io.shared.dicom_creation)": [[30, "pytomography.io.shared.dicom_creation.add_study_and_series_information"]], "create_ds() (in module pytomography.io.shared.dicom_creation)": [[30, "pytomography.io.shared.dicom_creation.create_ds"]], "generate_base_dataset() (in module pytomography.io.shared.dicom_creation)": [[30, "pytomography.io.shared.dicom_creation.generate_base_dataset"]], "get_file_meta() (in module pytomography.io.shared.dicom_creation)": [[30, "pytomography.io.shared.dicom_creation.get_file_meta"]], "pytomography.io.shared.dicom_creation": [[30, "module-pytomography.io.shared.dicom_creation"]], "_get_affine_multifile() (in module pytomography.io.shared)": [[31, "pytomography.io.shared._get_affine_multifile"]], "align_images_affine() (in module pytomography.io.shared)": [[31, "pytomography.io.shared.align_images_affine"]], "create_ds() (in module pytomography.io.shared)": [[31, "pytomography.io.shared.create_ds"]], "get_attenuation_map_interfile() (in module pytomography.io.shared)": [[31, "pytomography.io.shared.get_attenuation_map_interfile"]], "get_header_value() (in module pytomography.io.shared)": [[31, "pytomography.io.shared.get_header_value"]], "open_multifile() (in module pytomography.io.shared)": [[31, "pytomography.io.shared.open_multifile"]], "pytomography.io.shared": [[31, "module-pytomography.io.shared"]], "get_attenuation_map_interfile() (in module pytomography.io.shared.interfile)": [[32, "pytomography.io.shared.interfile.get_attenuation_map_interfile"]], "get_header_value() (in module pytomography.io.shared.interfile)": [[32, "pytomography.io.shared.interfile.get_header_value"]], "pytomography.io.shared.interfile": [[32, "module-pytomography.io.shared.interfile"]], "likelihood (class in pytomography.likelihoods)": [[33, "pytomography.likelihoods.Likelihood"]], "poissonloglikelihood (class in pytomography.likelihoods)": [[33, "pytomography.likelihoods.PoissonLogLikelihood"]], "_set_n_subsets() (pytomography.likelihoods.likelihood method)": [[33, "pytomography.likelihoods.Likelihood._set_n_subsets"]], "compute_gradient() (pytomography.likelihoods.likelihood method)": [[33, "pytomography.likelihoods.Likelihood.compute_gradient"]], "compute_gradient() (pytomography.likelihoods.poissonloglikelihood method)": [[33, "pytomography.likelihoods.PoissonLogLikelihood.compute_gradient"]], "compute_gradient_ff() (pytomography.likelihoods.likelihood method)": [[33, "pytomography.likelihoods.Likelihood.compute_gradient_ff"]], "compute_gradient_ff() (pytomography.likelihoods.poissonloglikelihood method)": [[33, "pytomography.likelihoods.PoissonLogLikelihood.compute_gradient_ff"]], "compute_gradient_gf() (pytomography.likelihoods.likelihood method)": [[33, "pytomography.likelihoods.Likelihood.compute_gradient_gf"]], "compute_gradient_gf() (pytomography.likelihoods.poissonloglikelihood method)": [[33, "pytomography.likelihoods.PoissonLogLikelihood.compute_gradient_gf"]], "pytomography.likelihoods": [[33, "module-pytomography.likelihoods"]], "likelihood (class in pytomography.likelihoods.likelihood)": [[34, "pytomography.likelihoods.likelihood.Likelihood"]], "_set_n_subsets() (pytomography.likelihoods.likelihood.likelihood method)": [[34, "pytomography.likelihoods.likelihood.Likelihood._set_n_subsets"]], "compute_gradient() (pytomography.likelihoods.likelihood.likelihood method)": [[34, "pytomography.likelihoods.likelihood.Likelihood.compute_gradient"]], "compute_gradient_ff() (pytomography.likelihoods.likelihood.likelihood method)": [[34, "pytomography.likelihoods.likelihood.Likelihood.compute_gradient_ff"]], "compute_gradient_gf() (pytomography.likelihoods.likelihood.likelihood method)": [[34, "pytomography.likelihoods.likelihood.Likelihood.compute_gradient_gf"]], "pytomography.likelihoods.likelihood": [[34, "module-pytomography.likelihoods.likelihood"]], "poissonloglikelihood (class in pytomography.likelihoods.poisson_log_likelihood)": [[35, "pytomography.likelihoods.poisson_log_likelihood.PoissonLogLikelihood"]], "compute_gradient() (pytomography.likelihoods.poisson_log_likelihood.poissonloglikelihood method)": [[35, "pytomography.likelihoods.poisson_log_likelihood.PoissonLogLikelihood.compute_gradient"]], "compute_gradient_ff() (pytomography.likelihoods.poisson_log_likelihood.poissonloglikelihood method)": [[35, "pytomography.likelihoods.poisson_log_likelihood.PoissonLogLikelihood.compute_gradient_ff"]], "compute_gradient_gf() (pytomography.likelihoods.poisson_log_likelihood.poissonloglikelihood method)": [[35, "pytomography.likelihoods.poisson_log_likelihood.PoissonLogLikelihood.compute_gradient_gf"]], "pytomography.likelihoods.poisson_log_likelihood": [[35, "module-pytomography.likelihoods.poisson_log_likelihood"]], "petlmprojmeta (class in pytomography.metadata.pet)": [[36, "pytomography.metadata.PET.PETLMProjMeta"]], "pettofmeta (class in pytomography.metadata.pet)": [[36, "pytomography.metadata.PET.PETTOFMeta"]], "pytomography.metadata.pet": [[36, "module-pytomography.metadata.PET"]], "pettofmeta (class in pytomography.metadata.pet.pet_tof_metadata)": [[37, "pytomography.metadata.PET.pet_tof_metadata.PETTOFMeta"]], "pytomography.metadata.pet.pet_tof_metadata": [[37, "module-pytomography.metadata.PET.pet_tof_metadata"]], "petlmprojmeta (class in pytomography.metadata.pet.petlm_metadata)": [[38, "pytomography.metadata.PET.petlm_metadata.PETLMProjMeta"]], "pytomography.metadata.pet.petlm_metadata": [[38, "module-pytomography.metadata.PET.petlm_metadata"]], "spectobjectmeta (class in pytomography.metadata.spect)": [[39, "pytomography.metadata.SPECT.SPECTObjectMeta"]], "spectpsfmeta (class in pytomography.metadata.spect)": [[39, "pytomography.metadata.SPECT.SPECTPSFMeta"]], "spectprojmeta (class in pytomography.metadata.spect)": [[39, "pytomography.metadata.SPECT.SPECTProjMeta"]], "__repr__() (pytomography.metadata.spect.spectpsfmeta method)": [[39, "pytomography.metadata.SPECT.SPECTPSFMeta.__repr__"]], "compute_padded_shape() (pytomography.metadata.spect.spectobjectmeta method)": [[39, "pytomography.metadata.SPECT.SPECTObjectMeta.compute_padded_shape"]], "compute_padded_shape() (pytomography.metadata.spect.spectprojmeta method)": [[39, "pytomography.metadata.SPECT.SPECTProjMeta.compute_padded_shape"]], "pytomography.metadata.spect": [[39, "module-pytomography.metadata.SPECT"]], "spectobjectmeta (class in pytomography.metadata.spect.spect_metadata)": [[40, "pytomography.metadata.SPECT.spect_metadata.SPECTObjectMeta"]], "spectpsfmeta (class in pytomography.metadata.spect.spect_metadata)": [[40, "pytomography.metadata.SPECT.spect_metadata.SPECTPSFMeta"]], "spectprojmeta (class in pytomography.metadata.spect.spect_metadata)": [[40, "pytomography.metadata.SPECT.spect_metadata.SPECTProjMeta"]], "__repr__() (pytomography.metadata.spect.spect_metadata.spectpsfmeta method)": [[40, "pytomography.metadata.SPECT.spect_metadata.SPECTPSFMeta.__repr__"]], "compute_padded_shape() (pytomography.metadata.spect.spect_metadata.spectobjectmeta method)": [[40, "pytomography.metadata.SPECT.spect_metadata.SPECTObjectMeta.compute_padded_shape"]], "compute_padded_shape() (pytomography.metadata.spect.spect_metadata.spectprojmeta method)": [[40, "pytomography.metadata.SPECT.spect_metadata.SPECTProjMeta.compute_padded_shape"]], "pytomography.metadata.spect.spect_metadata": [[40, "module-pytomography.metadata.SPECT.spect_metadata"]], "objectmeta (class in pytomography.metadata)": [[41, "pytomography.metadata.ObjectMeta"]], "petlmprojmeta (class in pytomography.metadata)": [[41, "pytomography.metadata.PETLMProjMeta"]], "pettofmeta (class in pytomography.metadata)": [[41, "pytomography.metadata.PETTOFMeta"]], "projmeta (class in pytomography.metadata)": [[41, "pytomography.metadata.ProjMeta"]], "spectobjectmeta (class in pytomography.metadata)": [[41, "pytomography.metadata.SPECTObjectMeta"]], "spectpsfmeta (class in pytomography.metadata)": [[41, "pytomography.metadata.SPECTPSFMeta"]], "spectprojmeta (class in pytomography.metadata)": [[41, "pytomography.metadata.SPECTProjMeta"]], "__repr__() (pytomography.metadata.objectmeta method)": [[41, "pytomography.metadata.ObjectMeta.__repr__"]], "__repr__() (pytomography.metadata.projmeta method)": [[41, "pytomography.metadata.ProjMeta.__repr__"]], "__repr__() (pytomography.metadata.spectpsfmeta method)": [[41, "pytomography.metadata.SPECTPSFMeta.__repr__"]], "compute_padded_shape() (pytomography.metadata.spectobjectmeta method)": [[41, "pytomography.metadata.SPECTObjectMeta.compute_padded_shape"]], "compute_padded_shape() (pytomography.metadata.spectprojmeta method)": [[41, "pytomography.metadata.SPECTProjMeta.compute_padded_shape"]], "pytomography.metadata": [[41, "module-pytomography.metadata"]], "objectmeta (class in pytomography.metadata.metadata)": [[42, "pytomography.metadata.metadata.ObjectMeta"]], "projmeta (class in pytomography.metadata.metadata)": [[42, "pytomography.metadata.metadata.ProjMeta"]], "__repr__() (pytomography.metadata.metadata.objectmeta method)": [[42, "pytomography.metadata.metadata.ObjectMeta.__repr__"]], "__repr__() (pytomography.metadata.metadata.projmeta method)": [[42, "pytomography.metadata.metadata.ProjMeta.__repr__"]], "pytomography.metadata.metadata": [[42, "module-pytomography.metadata.metadata"]], "anatomyneighbourweight (class in pytomography.priors)": [[43, "pytomography.priors.AnatomyNeighbourWeight"]], "euclideanneighbourweight (class in pytomography.priors)": [[43, "pytomography.priors.EuclideanNeighbourWeight"]], "logcoshprior (class in pytomography.priors)": [[43, "pytomography.priors.LogCoshPrior"]], "nearestneighbourprior (class in pytomography.priors)": [[43, "pytomography.priors.NearestNeighbourPrior"]], "neighbourweight (class in pytomography.priors)": [[43, "pytomography.priors.NeighbourWeight"]], "prior (class in pytomography.priors)": [[43, "pytomography.priors.Prior"]], "quadraticprior (class in pytomography.priors)": [[43, "pytomography.priors.QuadraticPrior"]], "relativedifferenceprior (class in pytomography.priors)": [[43, "pytomography.priors.RelativeDifferencePrior"]], "topnanatomyneighbourweight (class in pytomography.priors)": [[43, "pytomography.priors.TopNAnatomyNeighbourWeight"]], "__call__() (pytomography.priors.anatomyneighbourweight method)": [[43, "pytomography.priors.AnatomyNeighbourWeight.__call__"]], "__call__() (pytomography.priors.euclideanneighbourweight method)": [[43, "pytomography.priors.EuclideanNeighbourWeight.__call__"]], "__call__() (pytomography.priors.nearestneighbourprior method)": [[43, "pytomography.priors.NearestNeighbourPrior.__call__"]], "__call__() (pytomography.priors.neighbourweight method)": [[43, "pytomography.priors.NeighbourWeight.__call__"]], "__call__() (pytomography.priors.prior method)": [[43, "pytomography.priors.Prior.__call__"]], "__call__() (pytomography.priors.topnanatomyneighbourweight method)": [[43, "pytomography.priors.TopNAnatomyNeighbourWeight.__call__"]], "_pair_contribution() (pytomography.priors.nearestneighbourprior method)": [[43, "pytomography.priors.NearestNeighbourPrior._pair_contribution"]], "compute_inclusion_tensor() (pytomography.priors.topnanatomyneighbourweight method)": [[43, "pytomography.priors.TopNAnatomyNeighbourWeight.compute_inclusion_tensor"]], "phi0() (pytomography.priors.logcoshprior method)": [[43, "pytomography.priors.LogCoshPrior.phi0"]], "phi0() (pytomography.priors.nearestneighbourprior method)": [[43, "pytomography.priors.NearestNeighbourPrior.phi0"]], "phi0() (pytomography.priors.quadraticprior method)": [[43, "pytomography.priors.QuadraticPrior.phi0"]], "phi0() (pytomography.priors.relativedifferenceprior method)": [[43, "pytomography.priors.RelativeDifferencePrior.phi0"]], "phi1() (pytomography.priors.logcoshprior method)": [[43, "pytomography.priors.LogCoshPrior.phi1"]], "phi1() (pytomography.priors.nearestneighbourprior method)": [[43, "pytomography.priors.NearestNeighbourPrior.phi1"]], "phi1() (pytomography.priors.quadraticprior method)": [[43, "pytomography.priors.QuadraticPrior.phi1"]], "phi1() (pytomography.priors.relativedifferenceprior method)": [[43, "pytomography.priors.RelativeDifferencePrior.phi1"]], "phi2_1() (pytomography.priors.nearestneighbourprior method)": [[43, "pytomography.priors.NearestNeighbourPrior.phi2_1"]], "phi2_1() (pytomography.priors.relativedifferenceprior method)": [[43, "pytomography.priors.RelativeDifferencePrior.phi2_1"]], "phi2_2() (pytomography.priors.nearestneighbourprior method)": [[43, "pytomography.priors.NearestNeighbourPrior.phi2_2"]], "phi2_2() (pytomography.priors.relativedifferenceprior method)": [[43, "pytomography.priors.RelativeDifferencePrior.phi2_2"]], "pytomography.priors": [[43, "module-pytomography.priors"]], "set_beta_scale() (pytomography.priors.prior method)": [[43, "pytomography.priors.Prior.set_beta_scale"]], "set_object() (pytomography.priors.prior method)": [[43, "pytomography.priors.Prior.set_object"]], "set_object_meta() (pytomography.priors.anatomyneighbourweight method)": [[43, "pytomography.priors.AnatomyNeighbourWeight.set_object_meta"]], "set_object_meta() (pytomography.priors.nearestneighbourprior method)": [[43, "pytomography.priors.NearestNeighbourPrior.set_object_meta"]], "set_object_meta() (pytomography.priors.neighbourweight method)": [[43, "pytomography.priors.NeighbourWeight.set_object_meta"]], "set_object_meta() (pytomography.priors.prior method)": [[43, "pytomography.priors.Prior.set_object_meta"]], "set_object_meta() (pytomography.priors.topnanatomyneighbourweight method)": [[43, "pytomography.priors.TopNAnatomyNeighbourWeight.set_object_meta"]], "anatomyneighbourweight (class in pytomography.priors.nearest_neighbour)": [[44, "pytomography.priors.nearest_neighbour.AnatomyNeighbourWeight"]], "euclideanneighbourweight (class in pytomography.priors.nearest_neighbour)": [[44, "pytomography.priors.nearest_neighbour.EuclideanNeighbourWeight"]], "logcoshprior (class in pytomography.priors.nearest_neighbour)": [[44, "pytomography.priors.nearest_neighbour.LogCoshPrior"]], "nearestneighbourprior (class in pytomography.priors.nearest_neighbour)": [[44, "pytomography.priors.nearest_neighbour.NearestNeighbourPrior"]], "neighbourweight (class in pytomography.priors.nearest_neighbour)": [[44, "pytomography.priors.nearest_neighbour.NeighbourWeight"]], "quadraticprior (class in pytomography.priors.nearest_neighbour)": [[44, "pytomography.priors.nearest_neighbour.QuadraticPrior"]], "relativedifferenceprior (class in pytomography.priors.nearest_neighbour)": [[44, "pytomography.priors.nearest_neighbour.RelativeDifferencePrior"]], "topnanatomyneighbourweight (class in pytomography.priors.nearest_neighbour)": [[44, "pytomography.priors.nearest_neighbour.TopNAnatomyNeighbourWeight"]], "__call__() (pytomography.priors.nearest_neighbour.anatomyneighbourweight method)": [[44, "pytomography.priors.nearest_neighbour.AnatomyNeighbourWeight.__call__"]], "__call__() (pytomography.priors.nearest_neighbour.euclideanneighbourweight method)": [[44, "pytomography.priors.nearest_neighbour.EuclideanNeighbourWeight.__call__"]], "__call__() (pytomography.priors.nearest_neighbour.nearestneighbourprior method)": [[44, "pytomography.priors.nearest_neighbour.NearestNeighbourPrior.__call__"]], "__call__() (pytomography.priors.nearest_neighbour.neighbourweight method)": [[44, "pytomography.priors.nearest_neighbour.NeighbourWeight.__call__"]], "__call__() (pytomography.priors.nearest_neighbour.topnanatomyneighbourweight method)": [[44, "pytomography.priors.nearest_neighbour.TopNAnatomyNeighbourWeight.__call__"]], "_pair_contribution() (pytomography.priors.nearest_neighbour.nearestneighbourprior method)": [[44, "pytomography.priors.nearest_neighbour.NearestNeighbourPrior._pair_contribution"]], "compute_inclusion_tensor() (pytomography.priors.nearest_neighbour.topnanatomyneighbourweight method)": [[44, "pytomography.priors.nearest_neighbour.TopNAnatomyNeighbourWeight.compute_inclusion_tensor"]], "phi0() (pytomography.priors.nearest_neighbour.logcoshprior method)": [[44, "pytomography.priors.nearest_neighbour.LogCoshPrior.phi0"]], "phi0() (pytomography.priors.nearest_neighbour.nearestneighbourprior method)": [[44, "pytomography.priors.nearest_neighbour.NearestNeighbourPrior.phi0"]], "phi0() (pytomography.priors.nearest_neighbour.quadraticprior method)": [[44, "pytomography.priors.nearest_neighbour.QuadraticPrior.phi0"]], "phi0() (pytomography.priors.nearest_neighbour.relativedifferenceprior method)": [[44, "pytomography.priors.nearest_neighbour.RelativeDifferencePrior.phi0"]], "phi1() (pytomography.priors.nearest_neighbour.logcoshprior method)": [[44, "pytomography.priors.nearest_neighbour.LogCoshPrior.phi1"]], "phi1() (pytomography.priors.nearest_neighbour.nearestneighbourprior method)": [[44, "pytomography.priors.nearest_neighbour.NearestNeighbourPrior.phi1"]], "phi1() (pytomography.priors.nearest_neighbour.quadraticprior method)": [[44, "pytomography.priors.nearest_neighbour.QuadraticPrior.phi1"]], "phi1() (pytomography.priors.nearest_neighbour.relativedifferenceprior method)": [[44, "pytomography.priors.nearest_neighbour.RelativeDifferencePrior.phi1"]], "phi2_1() (pytomography.priors.nearest_neighbour.nearestneighbourprior method)": [[44, "pytomography.priors.nearest_neighbour.NearestNeighbourPrior.phi2_1"]], "phi2_1() (pytomography.priors.nearest_neighbour.relativedifferenceprior method)": [[44, "pytomography.priors.nearest_neighbour.RelativeDifferencePrior.phi2_1"]], "phi2_2() (pytomography.priors.nearest_neighbour.nearestneighbourprior method)": [[44, "pytomography.priors.nearest_neighbour.NearestNeighbourPrior.phi2_2"]], "phi2_2() (pytomography.priors.nearest_neighbour.relativedifferenceprior method)": [[44, "pytomography.priors.nearest_neighbour.RelativeDifferencePrior.phi2_2"]], "pytomography.priors.nearest_neighbour": [[44, "module-pytomography.priors.nearest_neighbour"]], "set_object_meta() (pytomography.priors.nearest_neighbour.anatomyneighbourweight method)": [[44, "pytomography.priors.nearest_neighbour.AnatomyNeighbourWeight.set_object_meta"]], "set_object_meta() (pytomography.priors.nearest_neighbour.nearestneighbourprior method)": [[44, "pytomography.priors.nearest_neighbour.NearestNeighbourPrior.set_object_meta"]], "set_object_meta() (pytomography.priors.nearest_neighbour.neighbourweight method)": [[44, "pytomography.priors.nearest_neighbour.NeighbourWeight.set_object_meta"]], "set_object_meta() (pytomography.priors.nearest_neighbour.topnanatomyneighbourweight method)": [[44, "pytomography.priors.nearest_neighbour.TopNAnatomyNeighbourWeight.set_object_meta"]], "prior (class in pytomography.priors.prior)": [[45, "pytomography.priors.prior.Prior"]], "__call__() (pytomography.priors.prior.prior method)": [[45, "pytomography.priors.prior.Prior.__call__"]], "pytomography.priors.prior": [[45, "module-pytomography.priors.prior"]], "set_beta_scale() (pytomography.priors.prior.prior method)": [[45, "pytomography.priors.prior.Prior.set_beta_scale"]], "set_object() (pytomography.priors.prior.prior method)": [[45, "pytomography.priors.prior.Prior.set_object"]], "set_object_meta() (pytomography.priors.prior.prior method)": [[45, "pytomography.priors.prior.Prior.set_object_meta"]], "petlmsystemmatrix (class in pytomography.projectors.pet)": [[46, "pytomography.projectors.PET.PETLMSystemMatrix"]], "backward() (pytomography.projectors.pet.petlmsystemmatrix method)": [[46, "pytomography.projectors.PET.PETLMSystemMatrix.backward"]], "compute_atteunation_probability_projection() (pytomography.projectors.pet.petlmsystemmatrix method)": [[46, "pytomography.projectors.PET.PETLMSystemMatrix.compute_atteunation_probability_projection"]], "compute_normalization_factor() (pytomography.projectors.pet.petlmsystemmatrix method)": [[46, "pytomography.projectors.PET.PETLMSystemMatrix.compute_normalization_factor"]], "compute_sens_factor() (pytomography.projectors.pet.petlmsystemmatrix method)": [[46, "pytomography.projectors.PET.PETLMSystemMatrix.compute_sens_factor"]], "forward() (pytomography.projectors.pet.petlmsystemmatrix method)": [[46, "pytomography.projectors.PET.PETLMSystemMatrix.forward"]], "get_projection_subset() (pytomography.projectors.pet.petlmsystemmatrix method)": [[46, "pytomography.projectors.PET.PETLMSystemMatrix.get_projection_subset"]], "get_weighting_subset() (pytomography.projectors.pet.petlmsystemmatrix method)": [[46, "pytomography.projectors.PET.PETLMSystemMatrix.get_weighting_subset"]], "pytomography.projectors.pet": [[46, "module-pytomography.projectors.PET"]], "set_n_subsets() (pytomography.projectors.pet.petlmsystemmatrix method)": [[46, "pytomography.projectors.PET.PETLMSystemMatrix.set_n_subsets"]], "petlmsystemmatrix (class in pytomography.projectors.pet.petlm_system_matrix)": [[47, "pytomography.projectors.PET.petlm_system_matrix.PETLMSystemMatrix"]], "backward() (pytomography.projectors.pet.petlm_system_matrix.petlmsystemmatrix method)": [[47, "pytomography.projectors.PET.petlm_system_matrix.PETLMSystemMatrix.backward"]], "compute_atteunation_probability_projection() (pytomography.projectors.pet.petlm_system_matrix.petlmsystemmatrix method)": [[47, "pytomography.projectors.PET.petlm_system_matrix.PETLMSystemMatrix.compute_atteunation_probability_projection"]], "compute_normalization_factor() (pytomography.projectors.pet.petlm_system_matrix.petlmsystemmatrix method)": [[47, "pytomography.projectors.PET.petlm_system_matrix.PETLMSystemMatrix.compute_normalization_factor"]], "compute_sens_factor() (pytomography.projectors.pet.petlm_system_matrix.petlmsystemmatrix method)": [[47, "pytomography.projectors.PET.petlm_system_matrix.PETLMSystemMatrix.compute_sens_factor"]], "forward() (pytomography.projectors.pet.petlm_system_matrix.petlmsystemmatrix method)": [[47, "pytomography.projectors.PET.petlm_system_matrix.PETLMSystemMatrix.forward"]], "get_projection_subset() (pytomography.projectors.pet.petlm_system_matrix.petlmsystemmatrix method)": [[47, "pytomography.projectors.PET.petlm_system_matrix.PETLMSystemMatrix.get_projection_subset"]], "get_weighting_subset() (pytomography.projectors.pet.petlm_system_matrix.petlmsystemmatrix method)": [[47, "pytomography.projectors.PET.petlm_system_matrix.PETLMSystemMatrix.get_weighting_subset"]], "pytomography.projectors.pet.petlm_system_matrix": [[47, "module-pytomography.projectors.PET.petlm_system_matrix"]], "set_n_subsets() (pytomography.projectors.pet.petlm_system_matrix.petlmsystemmatrix method)": [[47, "pytomography.projectors.PET.petlm_system_matrix.PETLMSystemMatrix.set_n_subsets"]], "spectcompletesystemmatrix (class in pytomography.projectors.spect)": [[48, "pytomography.projectors.SPECT.SPECTCompleteSystemMatrix"]], "spectsystemmatrix (class in pytomography.projectors.spect)": [[48, "pytomography.projectors.SPECT.SPECTSystemMatrix"]], "_compute_projections_mask() (pytomography.projectors.spect.spectcompletesystemmatrix method)": [[48, "pytomography.projectors.SPECT.SPECTCompleteSystemMatrix._compute_projections_mask"]], "_compute_system_matrix_components() (pytomography.projectors.spect.spectcompletesystemmatrix method)": [[48, "pytomography.projectors.SPECT.SPECTCompleteSystemMatrix._compute_system_matrix_components"]], "_get_object_initial() (pytomography.projectors.spect.spectsystemmatrix method)": [[48, "pytomography.projectors.SPECT.SPECTSystemMatrix._get_object_initial"]], "_get_object_positions() (pytomography.projectors.spect.spectcompletesystemmatrix method)": [[48, "pytomography.projectors.SPECT.SPECTCompleteSystemMatrix._get_object_positions"]], "_get_proj_positions() (pytomography.projectors.spect.spectcompletesystemmatrix method)": [[48, "pytomography.projectors.SPECT.SPECTCompleteSystemMatrix._get_proj_positions"]], "backward() (pytomography.projectors.spect.spectcompletesystemmatrix method)": [[48, "pytomography.projectors.SPECT.SPECTCompleteSystemMatrix.backward"]], "backward() (pytomography.projectors.spect.spectsystemmatrix method)": [[48, "pytomography.projectors.SPECT.SPECTSystemMatrix.backward"]], "compute_normalization_factor() (pytomography.projectors.spect.spectsystemmatrix method)": [[48, "pytomography.projectors.SPECT.SPECTSystemMatrix.compute_normalization_factor"]], "forward() (pytomography.projectors.spect.spectcompletesystemmatrix method)": [[48, "pytomography.projectors.SPECT.SPECTCompleteSystemMatrix.forward"]], "forward() (pytomography.projectors.spect.spectsystemmatrix method)": [[48, "pytomography.projectors.SPECT.SPECTSystemMatrix.forward"]], "get_projection_subset() (pytomography.projectors.spect.spectsystemmatrix method)": [[48, "pytomography.projectors.SPECT.SPECTSystemMatrix.get_projection_subset"]], "get_weighting_subset() (pytomography.projectors.spect.spectsystemmatrix method)": [[48, "pytomography.projectors.SPECT.SPECTSystemMatrix.get_weighting_subset"]], "pytomography.projectors.spect": [[48, "module-pytomography.projectors.SPECT"]], "set_n_subsets() (pytomography.projectors.spect.spectsystemmatrix method)": [[48, "pytomography.projectors.SPECT.SPECTSystemMatrix.set_n_subsets"]], "spectcompletesystemmatrix (class in pytomography.projectors.spect.spect_system_matrix)": [[49, "pytomography.projectors.SPECT.spect_system_matrix.SPECTCompleteSystemMatrix"]], "spectsystemmatrix (class in pytomography.projectors.spect.spect_system_matrix)": [[49, "pytomography.projectors.SPECT.spect_system_matrix.SPECTSystemMatrix"]], "_compute_projections_mask() (pytomography.projectors.spect.spect_system_matrix.spectcompletesystemmatrix method)": [[49, "pytomography.projectors.SPECT.spect_system_matrix.SPECTCompleteSystemMatrix._compute_projections_mask"]], "_compute_system_matrix_components() (pytomography.projectors.spect.spect_system_matrix.spectcompletesystemmatrix method)": [[49, "pytomography.projectors.SPECT.spect_system_matrix.SPECTCompleteSystemMatrix._compute_system_matrix_components"]], "_get_object_initial() (pytomography.projectors.spect.spect_system_matrix.spectsystemmatrix method)": [[49, "pytomography.projectors.SPECT.spect_system_matrix.SPECTSystemMatrix._get_object_initial"]], "_get_object_positions() (pytomography.projectors.spect.spect_system_matrix.spectcompletesystemmatrix method)": [[49, "pytomography.projectors.SPECT.spect_system_matrix.SPECTCompleteSystemMatrix._get_object_positions"]], "_get_proj_positions() (pytomography.projectors.spect.spect_system_matrix.spectcompletesystemmatrix method)": [[49, "pytomography.projectors.SPECT.spect_system_matrix.SPECTCompleteSystemMatrix._get_proj_positions"]], "backward() (pytomography.projectors.spect.spect_system_matrix.spectcompletesystemmatrix method)": [[49, "pytomography.projectors.SPECT.spect_system_matrix.SPECTCompleteSystemMatrix.backward"]], "backward() (pytomography.projectors.spect.spect_system_matrix.spectsystemmatrix method)": [[49, "pytomography.projectors.SPECT.spect_system_matrix.SPECTSystemMatrix.backward"]], "compute_normalization_factor() (pytomography.projectors.spect.spect_system_matrix.spectsystemmatrix method)": [[49, "pytomography.projectors.SPECT.spect_system_matrix.SPECTSystemMatrix.compute_normalization_factor"]], "forward() (pytomography.projectors.spect.spect_system_matrix.spectcompletesystemmatrix method)": [[49, "pytomography.projectors.SPECT.spect_system_matrix.SPECTCompleteSystemMatrix.forward"]], "forward() (pytomography.projectors.spect.spect_system_matrix.spectsystemmatrix method)": [[49, "pytomography.projectors.SPECT.spect_system_matrix.SPECTSystemMatrix.forward"]], "get_projection_subset() (pytomography.projectors.spect.spect_system_matrix.spectsystemmatrix method)": [[49, "pytomography.projectors.SPECT.spect_system_matrix.SPECTSystemMatrix.get_projection_subset"]], "get_weighting_subset() (pytomography.projectors.spect.spect_system_matrix.spectsystemmatrix method)": [[49, "pytomography.projectors.SPECT.spect_system_matrix.SPECTSystemMatrix.get_weighting_subset"]], "pytomography.projectors.spect.spect_system_matrix": [[49, "module-pytomography.projectors.SPECT.spect_system_matrix"]], "set_n_subsets() (pytomography.projectors.spect.spect_system_matrix.spectsystemmatrix method)": [[49, "pytomography.projectors.SPECT.spect_system_matrix.SPECTSystemMatrix.set_n_subsets"]], "extendedsystemmatrix (class in pytomography.projectors)": [[50, "pytomography.projectors.ExtendedSystemMatrix"]], "systemmatrix (class in pytomography.projectors)": [[50, "pytomography.projectors.SystemMatrix"]], "_get_object_initial() (pytomography.projectors.systemmatrix method)": [[50, "pytomography.projectors.SystemMatrix._get_object_initial"]], "backward() (pytomography.projectors.extendedsystemmatrix method)": [[50, "pytomography.projectors.ExtendedSystemMatrix.backward"]], "backward() (pytomography.projectors.systemmatrix method)": [[50, "pytomography.projectors.SystemMatrix.backward"]], "compute_normalization_factor() (pytomography.projectors.extendedsystemmatrix method)": [[50, "pytomography.projectors.ExtendedSystemMatrix.compute_normalization_factor"]], "forward() (pytomography.projectors.extendedsystemmatrix method)": [[50, "pytomography.projectors.ExtendedSystemMatrix.forward"]], "forward() (pytomography.projectors.systemmatrix method)": [[50, "pytomography.projectors.SystemMatrix.forward"]], "get_projection_subset() (pytomography.projectors.extendedsystemmatrix method)": [[50, "pytomography.projectors.ExtendedSystemMatrix.get_projection_subset"]], "get_subset_splits() (pytomography.projectors.systemmatrix method)": [[50, "pytomography.projectors.SystemMatrix.get_subset_splits"]], "initialize_transforms() (pytomography.projectors.systemmatrix method)": [[50, "pytomography.projectors.SystemMatrix.initialize_transforms"]], "pytomography.projectors": [[50, "module-pytomography.projectors"]], "set_n_subsets() (pytomography.projectors.extendedsystemmatrix method)": [[50, "pytomography.projectors.ExtendedSystemMatrix.set_n_subsets"]], "kemsystemmatrix (class in pytomography.projectors.shared)": [[51, "pytomography.projectors.shared.KEMSystemMatrix"]], "motionsystemmatrix (class in pytomography.projectors.shared)": [[51, "pytomography.projectors.shared.MotionSystemMatrix"]], "backward() (pytomography.projectors.shared.kemsystemmatrix method)": [[51, "pytomography.projectors.shared.KEMSystemMatrix.backward"]], "compute_normalization_factor() (pytomography.projectors.shared.kemsystemmatrix method)": [[51, "pytomography.projectors.shared.KEMSystemMatrix.compute_normalization_factor"]], "forward() (pytomography.projectors.shared.kemsystemmatrix method)": [[51, "pytomography.projectors.shared.KEMSystemMatrix.forward"]], "pytomography.projectors.shared": [[51, "module-pytomography.projectors.shared"]], "kemsystemmatrix (class in pytomography.projectors.shared.kem_system_matrix)": [[52, "pytomography.projectors.shared.kem_system_matrix.KEMSystemMatrix"]], "backward() (pytomography.projectors.shared.kem_system_matrix.kemsystemmatrix method)": [[52, "pytomography.projectors.shared.kem_system_matrix.KEMSystemMatrix.backward"]], "compute_normalization_factor() (pytomography.projectors.shared.kem_system_matrix.kemsystemmatrix method)": [[52, "pytomography.projectors.shared.kem_system_matrix.KEMSystemMatrix.compute_normalization_factor"]], "forward() (pytomography.projectors.shared.kem_system_matrix.kemsystemmatrix method)": [[52, "pytomography.projectors.shared.kem_system_matrix.KEMSystemMatrix.forward"]], "pytomography.projectors.shared.kem_system_matrix": [[52, "module-pytomography.projectors.shared.kem_system_matrix"]], "motionsystemmatrix (class in pytomography.projectors.shared.motion_correction_system_matrix)": [[53, "pytomography.projectors.shared.motion_correction_system_matrix.MotionSystemMatrix"]], "pytomography.projectors.shared.motion_correction_system_matrix": [[53, "module-pytomography.projectors.shared.motion_correction_system_matrix"]], "extendedsystemmatrix (class in pytomography.projectors.system_matrix)": [[54, "pytomography.projectors.system_matrix.ExtendedSystemMatrix"]], "systemmatrix (class in pytomography.projectors.system_matrix)": [[54, "pytomography.projectors.system_matrix.SystemMatrix"]], "_get_object_initial() (pytomography.projectors.system_matrix.systemmatrix method)": [[54, "pytomography.projectors.system_matrix.SystemMatrix._get_object_initial"]], "backward() (pytomography.projectors.system_matrix.extendedsystemmatrix method)": [[54, "pytomography.projectors.system_matrix.ExtendedSystemMatrix.backward"]], "backward() (pytomography.projectors.system_matrix.systemmatrix method)": [[54, "pytomography.projectors.system_matrix.SystemMatrix.backward"]], "compute_normalization_factor() (pytomography.projectors.system_matrix.extendedsystemmatrix method)": [[54, "pytomography.projectors.system_matrix.ExtendedSystemMatrix.compute_normalization_factor"]], "forward() (pytomography.projectors.system_matrix.extendedsystemmatrix method)": [[54, "pytomography.projectors.system_matrix.ExtendedSystemMatrix.forward"]], "forward() (pytomography.projectors.system_matrix.systemmatrix method)": [[54, "pytomography.projectors.system_matrix.SystemMatrix.forward"]], "get_projection_subset() (pytomography.projectors.system_matrix.extendedsystemmatrix method)": [[54, "pytomography.projectors.system_matrix.ExtendedSystemMatrix.get_projection_subset"]], "get_subset_splits() (pytomography.projectors.system_matrix.systemmatrix method)": [[54, "pytomography.projectors.system_matrix.SystemMatrix.get_subset_splits"]], "initialize_transforms() (pytomography.projectors.system_matrix.systemmatrix method)": [[54, "pytomography.projectors.system_matrix.SystemMatrix.initialize_transforms"]], "pytomography.projectors.system_matrix": [[54, "module-pytomography.projectors.system_matrix"]], "set_n_subsets() (pytomography.projectors.system_matrix.extendedsystemmatrix method)": [[54, "pytomography.projectors.system_matrix.ExtendedSystemMatrix.set_n_subsets"]], "spectattenuationtransform (class in pytomography.transforms.spect.attenuation)": [[55, "pytomography.transforms.SPECT.attenuation.SPECTAttenuationTransform"]], "backward() (pytomography.transforms.spect.attenuation.spectattenuationtransform method)": [[55, "pytomography.transforms.SPECT.attenuation.SPECTAttenuationTransform.backward"]], "compute_average_prob_matrix() (pytomography.transforms.spect.attenuation.spectattenuationtransform method)": [[55, "pytomography.transforms.SPECT.attenuation.SPECTAttenuationTransform.compute_average_prob_matrix"]], "configure() (pytomography.transforms.spect.attenuation.spectattenuationtransform method)": [[55, "pytomography.transforms.SPECT.attenuation.SPECTAttenuationTransform.configure"]], "forward() (pytomography.transforms.spect.attenuation.spectattenuationtransform method)": [[55, "pytomography.transforms.SPECT.attenuation.SPECTAttenuationTransform.forward"]], "get_prob_of_detection_matrix() (in module pytomography.transforms.spect.attenuation)": [[55, "pytomography.transforms.SPECT.attenuation.get_prob_of_detection_matrix"]], "pytomography.transforms.spect.attenuation": [[55, "module-pytomography.transforms.SPECT.attenuation"]], "cutofftransform (class in pytomography.transforms.spect.cutoff)": [[56, "pytomography.transforms.SPECT.cutoff.CutOffTransform"]], "backward() (pytomography.transforms.spect.cutoff.cutofftransform method)": [[56, "pytomography.transforms.SPECT.cutoff.CutOffTransform.backward"]], "forward() (pytomography.transforms.spect.cutoff.cutofftransform method)": [[56, "pytomography.transforms.SPECT.cutoff.CutOffTransform.forward"]], "pytomography.transforms.spect.cutoff": [[56, "module-pytomography.transforms.SPECT.cutoff"]], "cutofftransform (class in pytomography.transforms.spect)": [[57, "pytomography.transforms.SPECT.CutOffTransform"]], "spectattenuationtransform (class in pytomography.transforms.spect)": [[57, "pytomography.transforms.SPECT.SPECTAttenuationTransform"]], "spectpsftransform (class in pytomography.transforms.spect)": [[57, "pytomography.transforms.SPECT.SPECTPSFTransform"]], "_apply_psf() (pytomography.transforms.spect.spectpsftransform method)": [[57, "pytomography.transforms.SPECT.SPECTPSFTransform._apply_psf"]], "_compute_kernel_size() (pytomography.transforms.spect.spectpsftransform method)": [[57, "pytomography.transforms.SPECT.SPECTPSFTransform._compute_kernel_size"]], "_configure_gaussian_model() (pytomography.transforms.spect.spectpsftransform method)": [[57, "pytomography.transforms.SPECT.SPECTPSFTransform._configure_gaussian_model"]], "_configure_kernel_model() (pytomography.transforms.spect.spectpsftransform method)": [[57, "pytomography.transforms.SPECT.SPECTPSFTransform._configure_kernel_model"]], "_configure_manual_net() (pytomography.transforms.spect.spectpsftransform method)": [[57, "pytomography.transforms.SPECT.SPECTPSFTransform._configure_manual_net"]], "_get_sigma() (pytomography.transforms.spect.spectpsftransform method)": [[57, "pytomography.transforms.SPECT.SPECTPSFTransform._get_sigma"]], "backward() (pytomography.transforms.spect.cutofftransform method)": [[57, "pytomography.transforms.SPECT.CutOffTransform.backward"]], "backward() (pytomography.transforms.spect.spectattenuationtransform method)": [[57, "pytomography.transforms.SPECT.SPECTAttenuationTransform.backward"]], "backward() (pytomography.transforms.spect.spectpsftransform method)": [[57, "pytomography.transforms.SPECT.SPECTPSFTransform.backward"]], "compute_average_prob_matrix() (pytomography.transforms.spect.spectattenuationtransform method)": [[57, "pytomography.transforms.SPECT.SPECTAttenuationTransform.compute_average_prob_matrix"]], "configure() (pytomography.transforms.spect.spectattenuationtransform method)": [[57, "pytomography.transforms.SPECT.SPECTAttenuationTransform.configure"]], "configure() (pytomography.transforms.spect.spectpsftransform method)": [[57, "pytomography.transforms.SPECT.SPECTPSFTransform.configure"]], "forward() (pytomography.transforms.spect.cutofftransform method)": [[57, "pytomography.transforms.SPECT.CutOffTransform.forward"]], "forward() (pytomography.transforms.spect.spectattenuationtransform method)": [[57, "pytomography.transforms.SPECT.SPECTAttenuationTransform.forward"]], "forward() (pytomography.transforms.spect.spectpsftransform method)": [[57, "pytomography.transforms.SPECT.SPECTPSFTransform.forward"]], "pytomography.transforms.spect": [[57, "module-pytomography.transforms.SPECT"]], "arbitrarypsfnet (class in pytomography.transforms.spect.psf)": [[58, "pytomography.transforms.SPECT.psf.ArbitraryPSFNet"]], "gaussianblurnet (class in pytomography.transforms.spect.psf)": [[58, "pytomography.transforms.SPECT.psf.GaussianBlurNet"]], "spectpsftransform (class in pytomography.transforms.spect.psf)": [[58, "pytomography.transforms.SPECT.psf.SPECTPSFTransform"]], "_apply_psf() (pytomography.transforms.spect.psf.spectpsftransform method)": [[58, "pytomography.transforms.SPECT.psf.SPECTPSFTransform._apply_psf"]], "_compute_kernel_size() (pytomography.transforms.spect.psf.spectpsftransform method)": [[58, "pytomography.transforms.SPECT.psf.SPECTPSFTransform._compute_kernel_size"]], "_configure_gaussian_model() (pytomography.transforms.spect.psf.spectpsftransform method)": [[58, "pytomography.transforms.SPECT.psf.SPECTPSFTransform._configure_gaussian_model"]], "_configure_kernel_model() (pytomography.transforms.spect.psf.spectpsftransform method)": [[58, "pytomography.transforms.SPECT.psf.SPECTPSFTransform._configure_kernel_model"]], "_configure_manual_net() (pytomography.transforms.spect.psf.spectpsftransform method)": [[58, "pytomography.transforms.SPECT.psf.SPECTPSFTransform._configure_manual_net"]], "_get_sigma() (pytomography.transforms.spect.psf.spectpsftransform method)": [[58, "pytomography.transforms.SPECT.psf.SPECTPSFTransform._get_sigma"]], "backward() (pytomography.transforms.spect.psf.spectpsftransform method)": [[58, "pytomography.transforms.SPECT.psf.SPECTPSFTransform.backward"]], "configure() (pytomography.transforms.spect.psf.spectpsftransform method)": [[58, "pytomography.transforms.SPECT.psf.SPECTPSFTransform.configure"]], "forward() (pytomography.transforms.spect.psf.arbitrarypsfnet method)": [[58, "pytomography.transforms.SPECT.psf.ArbitraryPSFNet.forward"]], "forward() (pytomography.transforms.spect.psf.gaussianblurnet method)": [[58, "pytomography.transforms.SPECT.psf.GaussianBlurNet.forward"]], "forward() (pytomography.transforms.spect.psf.spectpsftransform method)": [[58, "pytomography.transforms.SPECT.psf.SPECTPSFTransform.forward"]], "get_1d_psf_layer() (in module pytomography.transforms.spect.psf)": [[58, "pytomography.transforms.SPECT.psf.get_1D_PSF_layer"]], "pytomography.transforms.spect.psf": [[58, "module-pytomography.transforms.SPECT.psf"]], "transform (class in pytomography.transforms)": [[59, "pytomography.transforms.Transform"]], "backward() (pytomography.transforms.transform method)": [[59, "pytomography.transforms.Transform.backward"]], "configure() (pytomography.transforms.transform method)": [[59, "pytomography.transforms.Transform.configure"]], "forward() (pytomography.transforms.transform method)": [[59, "pytomography.transforms.Transform.forward"]], "pytomography.transforms": [[59, "module-pytomography.transforms"]], "gaussianfilter (class in pytomography.transforms.shared.filters)": [[60, "pytomography.transforms.shared.filters.GaussianFilter"]], "__call__() (pytomography.transforms.shared.filters.gaussianfilter method)": [[60, "pytomography.transforms.shared.filters.GaussianFilter.__call__"]], "_get_kernels() (pytomography.transforms.shared.filters.gaussianfilter method)": [[60, "pytomography.transforms.shared.filters.GaussianFilter._get_kernels"]], "backward() (pytomography.transforms.shared.filters.gaussianfilter method)": [[60, "pytomography.transforms.shared.filters.GaussianFilter.backward"]], "configure() (pytomography.transforms.shared.filters.gaussianfilter method)": [[60, "pytomography.transforms.shared.filters.GaussianFilter.configure"]], "forward() (pytomography.transforms.shared.filters.gaussianfilter method)": [[60, "pytomography.transforms.shared.filters.GaussianFilter.forward"]], "pytomography.transforms.shared.filters": [[60, "module-pytomography.transforms.shared.filters"]], "dvfmotiontransform (class in pytomography.transforms.shared)": [[61, "pytomography.transforms.shared.DVFMotionTransform"]], "gaussianfilter (class in pytomography.transforms.shared)": [[61, "pytomography.transforms.shared.GaussianFilter"]], "kemtransform (class in pytomography.transforms.shared)": [[61, "pytomography.transforms.shared.KEMTransform"]], "rotationtransform (class in pytomography.transforms.shared)": [[61, "pytomography.transforms.shared.RotationTransform"]], "__call__() (pytomography.transforms.shared.gaussianfilter method)": [[61, "pytomography.transforms.shared.GaussianFilter.__call__"]], "_apply_dvf() (pytomography.transforms.shared.dvfmotiontransform method)": [[61, "pytomography.transforms.shared.DVFMotionTransform._apply_dvf"]], "_get_kernels() (pytomography.transforms.shared.gaussianfilter method)": [[61, "pytomography.transforms.shared.GaussianFilter._get_kernels"]], "_get_new_coordinates() (pytomography.transforms.shared.dvfmotiontransform method)": [[61, "pytomography.transforms.shared.DVFMotionTransform._get_new_coordinates"]], "_get_old_coordinates() (pytomography.transforms.shared.dvfmotiontransform method)": [[61, "pytomography.transforms.shared.DVFMotionTransform._get_old_coordinates"]], "_get_vol_ratio() (pytomography.transforms.shared.dvfmotiontransform method)": [[61, "pytomography.transforms.shared.DVFMotionTransform._get_vol_ratio"]], "backward() (pytomography.transforms.shared.dvfmotiontransform method)": [[61, "pytomography.transforms.shared.DVFMotionTransform.backward"]], "backward() (pytomography.transforms.shared.gaussianfilter method)": [[61, "pytomography.transforms.shared.GaussianFilter.backward"]], "backward() (pytomography.transforms.shared.kemtransform method)": [[61, "pytomography.transforms.shared.KEMTransform.backward"]], "backward() (pytomography.transforms.shared.rotationtransform method)": [[61, "pytomography.transforms.shared.RotationTransform.backward"]], "compute_kernel() (pytomography.transforms.shared.kemtransform method)": [[61, "pytomography.transforms.shared.KEMTransform.compute_kernel"]], "configure() (pytomography.transforms.shared.gaussianfilter method)": [[61, "pytomography.transforms.shared.GaussianFilter.configure"]], "configure() (pytomography.transforms.shared.kemtransform method)": [[61, "pytomography.transforms.shared.KEMTransform.configure"]], "forward() (pytomography.transforms.shared.dvfmotiontransform method)": [[61, "pytomography.transforms.shared.DVFMotionTransform.forward"]], "forward() (pytomography.transforms.shared.gaussianfilter method)": [[61, "pytomography.transforms.shared.GaussianFilter.forward"]], "forward() (pytomography.transforms.shared.kemtransform method)": [[61, "pytomography.transforms.shared.KEMTransform.forward"]], "forward() (pytomography.transforms.shared.rotationtransform method)": [[61, "pytomography.transforms.shared.RotationTransform.forward"]], "pytomography.transforms.shared": [[61, "module-pytomography.transforms.shared"]], "kemtransform (class in pytomography.transforms.shared.kem)": [[62, "pytomography.transforms.shared.kem.KEMTransform"]], "backward() (pytomography.transforms.shared.kem.kemtransform method)": [[62, "pytomography.transforms.shared.kem.KEMTransform.backward"]], "compute_kernel() (pytomography.transforms.shared.kem.kemtransform method)": [[62, "pytomography.transforms.shared.kem.KEMTransform.compute_kernel"]], "configure() (pytomography.transforms.shared.kem.kemtransform method)": [[62, "pytomography.transforms.shared.kem.KEMTransform.configure"]], "forward() (pytomography.transforms.shared.kem.kemtransform method)": [[62, "pytomography.transforms.shared.kem.KEMTransform.forward"]], "pytomography.transforms.shared.kem": [[62, "module-pytomography.transforms.shared.kem"]], "dvfmotiontransform (class in pytomography.transforms.shared.motion)": [[63, "pytomography.transforms.shared.motion.DVFMotionTransform"]], "_apply_dvf() (pytomography.transforms.shared.motion.dvfmotiontransform method)": [[63, "pytomography.transforms.shared.motion.DVFMotionTransform._apply_dvf"]], "_get_new_coordinates() (pytomography.transforms.shared.motion.dvfmotiontransform method)": [[63, "pytomography.transforms.shared.motion.DVFMotionTransform._get_new_coordinates"]], "_get_old_coordinates() (pytomography.transforms.shared.motion.dvfmotiontransform method)": [[63, "pytomography.transforms.shared.motion.DVFMotionTransform._get_old_coordinates"]], "_get_vol_ratio() (pytomography.transforms.shared.motion.dvfmotiontransform method)": [[63, "pytomography.transforms.shared.motion.DVFMotionTransform._get_vol_ratio"]], "backward() (pytomography.transforms.shared.motion.dvfmotiontransform method)": [[63, "pytomography.transforms.shared.motion.DVFMotionTransform.backward"]], "forward() (pytomography.transforms.shared.motion.dvfmotiontransform method)": [[63, "pytomography.transforms.shared.motion.DVFMotionTransform.forward"]], "pytomography.transforms.shared.motion": [[63, "module-pytomography.transforms.shared.motion"]], "rotationtransform (class in pytomography.transforms.shared.spatial)": [[64, "pytomography.transforms.shared.spatial.RotationTransform"]], "backward() (pytomography.transforms.shared.spatial.rotationtransform method)": [[64, "pytomography.transforms.shared.spatial.RotationTransform.backward"]], "forward() (pytomography.transforms.shared.spatial.rotationtransform method)": [[64, "pytomography.transforms.shared.spatial.RotationTransform.forward"]], "pytomography.transforms.shared.spatial": [[64, "module-pytomography.transforms.shared.spatial"]], "transform (class in pytomography.transforms.transform)": [[65, "pytomography.transforms.transform.Transform"]], "backward() (pytomography.transforms.transform.transform method)": [[65, "pytomography.transforms.transform.Transform.backward"]], "configure() (pytomography.transforms.transform.transform method)": [[65, "pytomography.transforms.transform.Transform.configure"]], "forward() (pytomography.transforms.transform.transform method)": [[65, "pytomography.transforms.transform.Transform.forward"]], "pytomography.transforms.transform": [[65, "module-pytomography.transforms.transform"]], "hammingfilter (class in pytomography.utils.fourier_filters)": [[66, "pytomography.utils.fourier_filters.HammingFilter"]], "rampfilter (class in pytomography.utils.fourier_filters)": [[66, "pytomography.utils.fourier_filters.RampFilter"]], "__call__() (pytomography.utils.fourier_filters.hammingfilter method)": [[66, "pytomography.utils.fourier_filters.HammingFilter.__call__"]], "__call__() (pytomography.utils.fourier_filters.rampfilter method)": [[66, "pytomography.utils.fourier_filters.RampFilter.__call__"]], "pytomography.utils.fourier_filters": [[66, "module-pytomography.utils.fourier_filters"]], "hammingfilter (class in pytomography.utils)": [[67, "pytomography.utils.HammingFilter"]], "rampfilter (class in pytomography.utils)": [[67, "pytomography.utils.RampFilter"]], "__call__() (pytomography.utils.hammingfilter method)": [[67, "pytomography.utils.HammingFilter.__call__"]], "__call__() (pytomography.utils.rampfilter method)": [[67, "pytomography.utils.RampFilter.__call__"]], "check_if_class_contains_method() (in module pytomography.utils)": [[67, "pytomography.utils.check_if_class_contains_method"]], "compute_tew() (in module pytomography.utils)": [[67, "pytomography.utils.compute_TEW"]], "compute_pad_size() (in module pytomography.utils)": [[67, "pytomography.utils.compute_pad_size"]], "dual_sqrt_exponential() (in module pytomography.utils)": [[67, "pytomography.utils.dual_sqrt_exponential"]], "get_e_mu_data_from_datasheet() (in module pytomography.utils)": [[67, "pytomography.utils.get_E_mu_data_from_datasheet"]], "get_blank_below_above() (in module pytomography.utils)": [[67, "pytomography.utils.get_blank_below_above"]], "get_distance() (in module pytomography.utils)": [[67, "pytomography.utils.get_distance"]], "get_mu_from_spectrum_interp() (in module pytomography.utils)": [[67, "pytomography.utils.get_mu_from_spectrum_interp"]], "get_object_nearest_neighbour() (in module pytomography.utils)": [[67, "pytomography.utils.get_object_nearest_neighbour"]], "pad_object() (in module pytomography.utils)": [[67, "pytomography.utils.pad_object"]], "pad_object_z() (in module pytomography.utils)": [[67, "pytomography.utils.pad_object_z"]], "pad_proj() (in module pytomography.utils)": [[67, "pytomography.utils.pad_proj"]], "print_collimator_parameters() (in module pytomography.utils)": [[67, "pytomography.utils.print_collimator_parameters"]], "pytomography.utils": [[67, "module-pytomography.utils"]], "rev_cumsum() (in module pytomography.utils)": [[67, "pytomography.utils.rev_cumsum"]], "rotate_detector_z() (in module pytomography.utils)": [[67, "pytomography.utils.rotate_detector_z"]], "unpad_object() (in module pytomography.utils)": [[67, "pytomography.utils.unpad_object"]], "unpad_object_z() (in module pytomography.utils)": [[67, "pytomography.utils.unpad_object_z"]], "unpad_proj() (in module pytomography.utils)": [[67, "pytomography.utils.unpad_proj"]], "check_if_class_contains_method() (in module pytomography.utils.misc)": [[68, "pytomography.utils.misc.check_if_class_contains_method"]], "get_blank_below_above() (in module pytomography.utils.misc)": [[68, "pytomography.utils.misc.get_blank_below_above"]], "get_distance() (in module pytomography.utils.misc)": [[68, "pytomography.utils.misc.get_distance"]], "get_object_nearest_neighbour() (in module pytomography.utils.misc)": [[68, "pytomography.utils.misc.get_object_nearest_neighbour"]], "print_collimator_parameters() (in module pytomography.utils.misc)": [[68, "pytomography.utils.misc.print_collimator_parameters"]], "pytomography.utils.misc": [[68, "module-pytomography.utils.misc"]], "rev_cumsum() (in module pytomography.utils.misc)": [[68, "pytomography.utils.misc.rev_cumsum"]], "dual_sqrt_exponential() (in module pytomography.utils.nist_data)": [[69, "pytomography.utils.nist_data.dual_sqrt_exponential"]], "get_e_mu_data_from_datasheet() (in module pytomography.utils.nist_data)": [[69, "pytomography.utils.nist_data.get_E_mu_data_from_datasheet"]], "get_mu_from_spectrum_interp() (in module pytomography.utils.nist_data)": [[69, "pytomography.utils.nist_data.get_mu_from_spectrum_interp"]], "pytomography.utils.nist_data": [[69, "module-pytomography.utils.nist_data"]], "compute_tew() (in module pytomography.utils.scatter)": [[70, "pytomography.utils.scatter.compute_TEW"]], "pytomography.utils.scatter": [[70, "module-pytomography.utils.scatter"]], "compute_pad_size() (in module pytomography.utils.spatial)": [[71, "pytomography.utils.spatial.compute_pad_size"]], "compute_pad_size_padded() (in module pytomography.utils.spatial)": [[71, "pytomography.utils.spatial.compute_pad_size_padded"]], "pad_object() (in module pytomography.utils.spatial)": [[71, "pytomography.utils.spatial.pad_object"]], "pad_object_z() (in module pytomography.utils.spatial)": [[71, "pytomography.utils.spatial.pad_object_z"]], "pad_proj() (in module pytomography.utils.spatial)": [[71, "pytomography.utils.spatial.pad_proj"]], "pytomography.utils.spatial": [[71, "module-pytomography.utils.spatial"]], "rotate_detector_z() (in module pytomography.utils.spatial)": [[71, "pytomography.utils.spatial.rotate_detector_z"]], "unpad_object() (in module pytomography.utils.spatial)": [[71, "pytomography.utils.spatial.unpad_object"]], "unpad_object_z() (in module pytomography.utils.spatial)": [[71, "pytomography.utils.spatial.unpad_object_z"]], "unpad_proj() (in module pytomography.utils.spatial)": [[71, "pytomography.utils.spatial.unpad_proj"]]}})